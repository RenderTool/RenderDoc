import{_ as p,a as u}from"./gamemodeinclue-310fc6c6.js";import{_ as h}from"./libexpcpp-97f4e187.js";import{_,r as o,o as b,c as m,f as v,d as a,w as t,a as n,b as e,e as l}from"./app-89c110f4.js";const g="/RenderDoc/assets/helloworldUE-41c43e32.jpg",k="/RenderDoc/assets/newcppclass-9d55c7f1.png",r="/RenderDoc/assets/actorpublicobject-cd1e639f.jpg",f="/RenderDoc/assets/slate-9b7fdbc4.jpg",y="/RenderDoc/assets/GameFramework-d1ad3780.jpg",U="/RenderDoc/assets/UEComponent-d7ede08e.png",C="/RenderDoc/assets/level-5d0d5770.jpg",E="/RenderDoc/assets/uworld-78be2191.jpg",j="/RenderDoc/assets/gameinstancecpp-3ff99027.jpg",x="/RenderDoc/assets/carbagecollection-1f23cf87.png",q="/RenderDoc/assets/UEpakage-0c99c34e.jpg",w="/RenderDoc/assets/subsystems-fbfd5b27.jpg",S="/RenderDoc/assets/IDEgenerate def-9b5715a4.jpg",W="/RenderDoc/assets/ideaicode2-14207711.jpg",T="/RenderDoc/assets/testhelloworld-e6cf4ebe.png",A="/RenderDoc/assets/testfunlist-a2d85ff2.jpg",P="/RenderDoc/assets/successhelloworld-884e34d3.png",R={},D=n("blockquote",null,[n("p",null,[e("天地除开，诞生了第一缕"),n("code",null,"UObject"),e("，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。"),n("br"),e(" 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。")])],-1),G=n("h2",{id:"导读",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#导读","aria-hidden":"true"},"#"),e(" 导读")],-1),I=n("br",null,null,-1),O=n("br",null,null,-1),B=n("br",null,null,-1),z=n("h2",{id:"ue启动",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue启动","aria-hidden":"true"},"#"),e(" UE启动")],-1),M=n("blockquote",null,[n("p",null,"心血来潮！我要自己搞一个游戏！UE启动！")],-1),H=n("h2",{id:"_1-新建一个cpp工程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-新建一个cpp工程","aria-hidden":"true"},"#"),e(" 1. 新建一个CPP工程")],-1),L=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=n("blockquote",null,[n("p",null,"如果你不会CPP建议你去下方查考链接观看CPP基础教程，或者等我的CPP入门介绍篇。")],-1),N=n("h2",{id:"_2-添加第一个c-类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-添加第一个c-类","aria-hidden":"true"},"#"),e(" 2.添加第一个C++类")],-1),F=n("blockquote",null,[n("p",null,"等待编译并启动项目，初次尝试UECPP先问候一句HelloWorld再说，点击工具-新建一个C++类。")],-1),X=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),K=n("blockquote",null,[n("p",null,"弹出的窗口让人一脸懵逼")],-1),Y=n("figure",null,[n("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),$=n("hr",null,null,-1),J=n("blockquote",null,[n("p",null,[e("所有节点的根目录都来自一个叫Object的东西，这里我们叫它UObject。"),n("br"),e(" 即：所有XXObject都继承自UObject。")])],-1),Z=n("hr",null,null,-1),Q=n("h2",{id:"uobject-ue对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uobject-ue对象","aria-hidden":"true"},"#"),e(" UObject|UE对象")],-1),nn=n("blockquote",null,[n("p",null,"什么是UObject?")],-1),en=n("br",null,null,-1),an=n("br",null,null,-1),tn=n("br",null,null,-1),sn=n("figure",null,[n("img",{src:r,alt:"例如：Actor继承自UObject",tabindex:"0",loading:"lazy"}),n("figcaption",null,"例如：Actor继承自UObject")],-1),ln=n("figure",null,[n("img",{src:f,alt:"左边C++右边蓝图",tabindex:"0",loading:"lazy"}),n("figcaption",null,"左边C++右边蓝图")],-1),on=n("hr",null,null,-1),rn=n("h2",{id:"ue-gameplay架构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue-gameplay架构","aria-hidden":"true"},"#"),e(" UE-GamePlay架构")],-1),dn=n("figure",null,[n("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),cn=n("p",null,"摘自官方文档：",-1),pn=n("blockquote",null,[n("p",null,[e("此流程图演示了这些核心Gameplay类彼此之间的关系。 "),n("br"),e("一个游戏由一个GameMode和一个GameState构成。 "),n("br"),e("加入游戏的人类玩家与PlayerController关联。 "),n("br"),e("这些PlayerController允许玩家持有游戏中的Pawn，以便在关卡中有物理表示。 "),n("br"),e("PlayerController还为玩家提供了输入功能按钮、平视显示器（简称HUD）和用于处理摄像机视图的PlayerCameraManager。")])],-1),un=n("br",null,null,-1),hn=n("br",null,null,-1),_n=n("blockquote",null,[n("p",null,"下面会详细介绍每一项")],-1),bn={style:{color:"red"}},mn=n("a",{href:"#_1GamePlay->GameMode"},"游戏规则： ①-②",-1),vn=n("br",null,null,-1),gn=n("a",{href:"#_3-camera-游戏相机"},[e("3C是指： "),n("span",{style:{color:"orangered"}},"Character（角色）、Control（控制）和Camera（摄像机）"),e(" ③-⑤")],-1),kn={href:"https://zhuanlan.zhihu.com/p/357621053",target:"_blank",rel:"noopener noreferrer"},fn=n("br",null,null,-1),yn=n("a",{href:"#_6-gameui-游戏ui"},"游戏界面⑥",-1),Un=n("h3",{id:"_1gameplay-gamemode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1gameplay-gamemode","aria-hidden":"true"},"#"),e(" ①GamePlay->GameMode")],-1),Cn=n("ul",null,[n("li",null,[e("AGameModeBase (public AInfo) "),n("ul",null,[n("li",null,[e("AInfo (public AActor) "),n("ul",null,[n("li",null,"AActor (public UObject)")])])])])],-1),En=l('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>生成的类打开后</p></blockquote><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>类别</th><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>APawn class</td><td>游戏中的角色</td><td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td></tr><tr><td>AHUD class</td><td>Heads-Up Display (HUD)</td><td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td></tr><tr><td>APlayerController class</td><td>玩家控制器</td><td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td></tr><tr><td>AGameState class</td><td>游戏状态</td><td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td></tr><tr><td>APlayerState class</td><td>玩家状态</td><td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td></tr><tr><td>ASpectatorPawn class</td><td>观察者角色</td><td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td></tr></tbody></table><hr><h3 id="_2-gamestate-游戏状态" tabindex="-1"><a class="header-anchor" href="#_2-gamestate-游戏状态" aria-hidden="true">#</a> ② GameState|游戏状态</h3><ul><li>AGameStateBase (public AInfo) <ul><li>AInfo (public AActor) <ul><li>AActor (public UObject)</li></ul></li></ul></li></ul>',7),jn=n("hr",null,null,-1),xn=n("h3",{id:"_3-camera-游戏相机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-camera-游戏相机","aria-hidden":"true"},"#"),e(" ③ Camera|游戏相机")],-1),qn=n("hr",null,null,-1),wn=n("h3",{id:"_4-character-游戏角色",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-character-游戏角色","aria-hidden":"true"},"#"),e(" ④ Character|游戏角色")],-1),Sn=n("hr",null,null,-1),Wn=n("h3",{id:"_5-controller-控制器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-controller-控制器","aria-hidden":"true"},"#"),e(" ⑤ Controller|控制器")],-1),Tn=n("hr",null,null,-1),An=n("h3",{id:"_6-gameui-游戏ui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-gameui-游戏ui","aria-hidden":"true"},"#"),e(" ⑥ GameUI|游戏UI")],-1),Pn=n("hr",null,null,-1),Rn=n("h3",{id:"component-组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#component-组件","aria-hidden":"true"},"#"),e(" Component|组件")],-1),Dn=l('<figure><img src="'+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>组件类型</th><th>功能和用途</th></tr></thead><tbody><tr><td>UStaticMeshComponent</td><td>渲染静态网格模型，如墙、地板等</td></tr><tr><td>USkeletalMeshComponent</td><td>渲染有骨骼的网格模型，适用于角色和生物</td></tr><tr><td>UCameraComponent</td><td>创建摄像机视图，用于玩家或观察</td></tr><tr><td>ULightComponentBase</td><td>创建不同类型的光源，如点光源、聚光灯等</td></tr><tr><td>UParticleSystemComponent</td><td>播放粒子系统，创建特效如火焰、爆炸等</td></tr><tr><td>UAudioComponent</td><td>播放声音，附加到物体上产生音效</td></tr><tr><td>UCollisionComponent</td><td>处理碰撞和触发事件，可以是基本碰撞体或区域</td></tr><tr><td>UInputComponent</td><td>处理玩家输入，如按键和鼠标事件</td></tr><tr><td>USceneComponent</td><td>在场景中构建组件层次结构，可作为父组件</td></tr><tr><td>UWidgetComponent</td><td>将2D UI嵌入3D世界，显示UMG部件</td></tr></tbody></table>',2),Gn=n("a",{href:"./exp_经验_/Blueprint2CPP.html"},"几种查看蓝图节点对应C++类的几种方法！",-1),In=n("hr",null,null,-1),On=n("h3",{id:"uworld-游戏世界",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uworld-游戏世界","aria-hidden":"true"},"#"),e(" UWorld|游戏世界")],-1),Bn=n("blockquote",null,[n("p",null,"现在框架有了好比游戏内剧本、演员、相机等道具都齐活了！可拍摄地呢?导演呢？谁是BOSS?")],-1),zn=n("figure",null,[n("img",{src:C,alt:"关卡",tabindex:"0",loading:"lazy"}),n("figcaption",null,"关卡")],-1),Mn=n("h3",{id:"ulevel-游戏关卡",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ulevel-游戏关卡","aria-hidden":"true"},"#"),e(" ULevel|游戏关卡")],-1),Hn=n("blockquote",null,[n("p",null,"可一个世界不一定只有一个国家，便于管理我们会将这个世界划分成若干个国家，我们称他为ULevel")],-1),Ln=n("br",null,null,-1),Vn=n("span",{style:{color:"#c0392b"}},"N*ULeveL => UWorld ",-1),Nn=n("figure",null,[n("img",{src:E,alt:"若干小关卡组成大世界",tabindex:"0",loading:"lazy"}),n("figcaption",null,"若干小关卡组成大世界")],-1),Fn=n("h3",{id:"worldcontext-世界上下文",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#worldcontext-世界上下文","aria-hidden":"true"},"#"),e(" WorldContext|世界上下文")],-1),Xn=n("blockquote",null,[n("p",null,"问题又来了！我们玩的很多游戏好像不止一张地图哦！也就是不止一个World!如果玩家去另外一个世界丢失记忆（游戏数据）可不是一件好事。")],-1),Kn=n("hr",null,null,-1),Yn=n("h2",{id:"掌权者",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#掌权者","aria-hidden":"true"},"#"),e(" 掌权者")],-1),$n=n("h3",{id:"gameinstance-游戏实例",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gameinstance-游戏实例","aria-hidden":"true"},"#"),e(" GameInstance|游戏实例")],-1),Jn=n("blockquote",null,[n("p",null,"似乎我们已经从人界跳脱，来到了其他界面。前文我们说了后门-WorldContext的事情，看毕竟这只是一个后门，到底谁能开启掌管这个后门呢？")],-1),Zn=l('<figure><img src="'+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="大帝" tabindex="-1"><a class="header-anchor" href="#大帝" aria-hidden="true">#</a> 大帝</h2><h3 id="uengine-虚幻游戏引擎" tabindex="-1"><a class="header-anchor" href="#uengine-虚幻游戏引擎" aria-hidden="true">#</a> UEngine|虚幻游戏引擎</h3><p>天地除开，诞生了第一缕<code>UObject</code>，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。<br> 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。</p>',4),Qn=n("p",null,[n("strong",null,"Object->Actor+Component->Level->World->WorldContext->GameInstance->Engine")],-1),ne=n("blockquote",null,[n("p",null,"最终一个由大帝——UEngine掌管的宇宙诞生了。")],-1),ee=n("h2",{id:"真神",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#真神","aria-hidden":"true"},"#"),e(" 真神")],-1),ae=n("h3",{id:"ue-refection-ue反射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue-refection-ue反射","aria-hidden":"true"},"#"),e(" UE-Refection|UE反射")],-1),te=n("blockquote",null,[n("p",null,"篇幅限制，这里不做反射的深入，具体可以看后续的反射机制篇。")],-1),se={href:"https://docs.unrealengine.com/5.3/zh-CN/reflection-system-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},ie=n("blockquote",null,[n("p",null,"不会吧不会吧！还有人不知道宏是什么？自行百度吧！")],-1),le=n("code",null,"宏（英语：Macro），是一种批量处理的称谓。 计算机科学里的宏是一种抽象（Abstraction），它根据一系列预定义的规则替换一定的文本模式。 解释器或编译器在遇到宏时会自动进行这一模式替换。——wiki",-1),oe=n("h3",{id:"uht-unreal-header-tool-虚幻头文件工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uht-unreal-header-tool-虚幻头文件工具","aria-hidden":"true"},"#"),e(" UHT|Unreal Header Tool（虚幻头文件工具）")],-1),re=l(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 源代码
    <span class="token list punctuation">-</span> 用户编写包含特定宏和标记的UE4 C++ 代码。

<span class="token list punctuation">2.</span> UHT扫描
    <span class="token list punctuation">-</span> UHT在构建项目时扫描头文件，寻找特定的宏和标记。

<span class="token list punctuation">3.</span> 生成反射信息
    <span class="token list punctuation">-</span> UHT使用找到的宏和标记生成反射信息，包括类的成员变量和成员函数。

<span class="token list punctuation">4.</span> 生成代码框架
    <span class="token list punctuation">-</span> 除了反射信息，UHT也可以根据宏和标记生成一些代码框架，以辅助实现类的功能。

<span class="token list punctuation">5.</span> 传递给编译器
    <span class="token list punctuation">-</span> 生成的反射信息和代码框架将传递给C++编译器，它们会被合并到最终的编译过程中。

<span class="token list punctuation">6.</span> 构建项目
    <span class="token list punctuation">-</span> 编译器将所有的源代码和生成的代码一起编译成可执行文件。

<span class="token list punctuation">7.</span> 运行游戏
    <span class="token list punctuation">-</span> 最终生成的可执行文件可以在UE4引擎中运行，实现用户在代码中定义的功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常会在一个类的头文件中包含一个以 .generated.h 结尾的文件， 例如 MyClass.generated.h。</li><li>这个文件包含了由UHT生成的代码，通常用于实现反射信息、蓝图节点以及其他与类相关的元数据。</li><li>默认情况下，UE会使用Microsoft Visual C++(MSVC)作为主要的编译工具,这里我们用Rider连接MSVC（IDE自动完成）。</li></ul><figure><img src="`+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),de={href:"https://www.bilibili.com/video/BV1EM411U7PX?p=36&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},ce=n("hr",null,null,-1),pe=n("blockquote",null,[n("p",null,[n("strong",null,"解决完这些矛盾、纠纷后怎么保存我们建立的”宇宙“呢？不得不引入一个叫做资源打包的概念。")])],-1),ue=n("h3",{id:"upk-ue包文件组成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#upk-ue包文件组成","aria-hidden":"true"},"#"),e(" UPK|UE包文件组成")],-1),he=l('<figure><img src="'+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>从Unreal Engine 4（UE4）开始，UPK 文件被替代为更先进的Unreal Asset文件格式（.uasset）和Unreal Asset Registry（.uassetregistry）等。 UPK 文件仍然存在于早期版本的Unreal Engine中。<br> 更准确点描述：一个Package是一个文件（.uasset或者.umap），它包含一些可以UE4进行操作和访问的二进制数据文件。</p></blockquote><h2 id="进化" tabindex="-1"><a class="header-anchor" href="#进化" aria-hidden="true">#</a> 进化</h2><p>各司其职原本是件好事，随着时间的增加，我们发现这个管理模式会出现很多问题。大帝UEngine忙着管理大局，所有琐碎任务都堆积给我们的Gameinstance这位掌权者身上，导致我们的项目非常难以维护。 <br>如果我们自己重新定义一个管理者Object Manager，又必须非常小心管理这一切。<br> 好钢用在刀刃——显然开发者应该把精力更多的放在游戏性本身。</p><blockquote><p>于是UEngine“东、西厂”出现了！——Subsystem。</p></blockquote><h3 id="subsystem-子系统" tabindex="-1"><a class="header-anchor" href="#subsystem-子系统" aria-hidden="true">#</a> Subsystem|子系统</h3>',6),_e=l('<table><thead><tr><th>子系统</th><th>继承自的类</th></tr></thead><tbody><tr><td>引擎子系统</td><td>UEngineSubsystem 类</td></tr><tr><td>编辑器子系统</td><td>UEditorSubsystem 类</td></tr><tr><td>游戏实例子系统</td><td>UGameInstanceSubsystem 类</td></tr><tr><td>本地玩家子系统</td><td>ULocalPlayerSubsystem 类</td></tr></tbody></table><blockquote><p>当引擎子系统的模块加载时，子系统将在模块的 Startup() 函数返回后执行 Initialize()，子系统将在模块的 Shutdown() 函数返回后执行 Deinitialize()。</p></blockquote><figure><img src="'+w+'" alt="目录：EngineSourceRuntimeEnginePublicSubsystems" tabindex="0" loading="lazy"><figcaption>目录：Engine\\Source\\Runtime\\Engine\\Public\\Subsystems\\</figcaption></figure><h2 id="_3-选择蓝图函数库类" tabindex="-1"><a class="header-anchor" href="#_3-选择蓝图函数库类" aria-hidden="true">#</a> 3. 选择蓝图函数库类</h2>',4),be=l('<figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>因为我们只是想打印一条简单的HelloWorld,又不想挂载在Actor上，最终决定先写在蓝图函数库中。</p></blockquote><h2 id="_4-分析系统生成的cpp文件。" tabindex="-1"><a class="header-anchor" href="#_4-分析系统生成的cpp文件。" aria-hidden="true">#</a> 4. 分析系统生成的cpp文件。</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token comment">/**
 * 
 */</span>
<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开TEST.generated.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 版权归 Epic Games, Inc. 所有。保留所有权利。</span>
<span class="token comment">/*===========================================================================
	从UnrealHeaderTool导出的生成代码。
	请勿手动修改！请编辑相应的.h文件！
===========================================================================*/</span>

<span class="token comment">// IWYU pragma: private, include &quot;TEST.h&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ObjectMacros.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ScriptMacros.h&quot;</span></span>

PRAGMA_DISABLE_DEPRECATION_WARNINGS
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXORCIST_TEST_generated_h</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;TEST.generated.h 已经被包含，TEST.h 中缺少 &#39;#pragma once&#39;&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXORCIST_TEST_generated_h</span></span>

<span class="token comment">//后续省略.....</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),me=l(`<h2 id="_5-新建一个helloworld函数" tabindex="-1"><a class="header-anchor" href="#_5-新建一个helloworld函数" aria-hidden="true">#</a> 5. 新建一个HelloWorld函数</h2><blockquote><p>TEST.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	<span class="token comment">//测试函数打印HelloWorld</span>
	
	<span class="token comment">//使用UFUNCTION红标记，BlueprintCallable让UE反射系统能够反射成蓝图调用。</span>
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>
	
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-对应的函数实现输出helloworld" tabindex="-1"><a class="header-anchor" href="#_6-对应的函数实现输出helloworld" aria-hidden="true">#</a> 6. 对应的函数实现输出HelloWorld</h2><blockquote><p>可以借助IDE生成对应函数定义。</p></blockquote><figure><img src="`+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>TEST.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token class-name">UTEST</span><span class="token double-colon punctuation">::</span><span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	GEngine<span class="token operator">-&gt;</span><span class="token function">AddOnScreenDebugMessage</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5.f</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+W+'" alt="ideaicode2.jpg" tabindex="0" loading="lazy"><figcaption>ideaicode2.jpg</figcaption></figure>',9),ve=n("h2",{id:"_6-编译-在关卡蓝图检验。",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-编译-在关卡蓝图检验。","aria-hidden":"true"},"#"),e(" 6. 编译，在关卡蓝图检验。")],-1),ge=n("figure",null,[n("img",{src:T,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),ke=n("figure",null,[n("img",{src:A,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),fe=n("blockquote",null,[n("p",null,"因为我们的函数中没有加入参数，所以对应生成的蓝图节点也没有输入输出节点。")],-1),ye=n("h2",{id:"_7-运行查看成果",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-运行查看成果","aria-hidden":"true"},"#"),e(" 7.运行查看成果！")],-1),Ue=n("figure",null,[n("img",{src:P,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Ce=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),e(" 参考链接")],-1),Ee=n("thead",null,[n("tr",null,[n("th",null,"大佬")])],-1),je={href:"https://www.zhihu.com/people/fjz13",target:"_blank",rel:"noopener noreferrer"},xe=n("thead",null,[n("tr",null,[n("th",null,"课程名"),n("th",null,"类型"),n("th",null,"链接")])],-1),qe=n("td",null,"2023最新版C++",-1),we=n("td",null,"C++基础",-1),Se={href:"https://www.bilibili.com/video/BV1eL41187JS/?spm_id_from=333.999.0.0&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},We=n("td",null,"【Cherno C++】",-1),Te=n("td",null,"C++基础",-1),Ae={href:"https://www.bilibili.com/video/BV1fP4y1w7iE/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},Pe=n("td",null,"为游戏编程学习C++",-1),Re=n("td",null,"C++基础",-1),De={href:"https://www.bilibili.com/video/BV1Dd4y1R7VS/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},Ge=n("td",null,"黑马程序员匠心之作",-1),Ie=n("td",null,"C++教程",-1),Oe={href:"https://www.bilibili.com/video/BV1et411b73Z?t=94.0&p=95",target:"_blank",rel:"noopener noreferrer"},Be=n("td",null,"字节跳动最新打造的C++教程",-1),ze=n("td",null,"C++基础",-1),Me={href:"https://www.bilibili.com/video/BV1ps4y1k7d7/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},He=n("td",null,"Udemy宝藏数据结构与算法课",-1),Le=n("td",null,"C++算法",-1),Ve={href:"https://www.bilibili.com/video/BV1Ba411Y71K/?spm_id_from=333.337.top_right_bar_window_custom_collection.content.click",target:"_blank",rel:"noopener noreferrer"};function Ne(Fe,Xe){const s=o("ChatMessage"),d=o("GifWithButton"),i=o("ExternalLinkIcon"),c=o("RouterLink");return b(),m("div",null,[D,v(" more "),G,a(s,{avatar:"../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[e(" 1、食用本文前你应该已经了解UE的一些基本操作,包括下载安装、打开工程、资源导入导出、关卡等概念。"),I,e(" 2、有一定的（C++）编程基础，但不是必须的。"),O,e(" 3、本章将试图初步了解UE GamePlay架构。"),B,e(" 4、最终尝试用CPP在我们的屏幕上打印一个HelloWorld。 ")]),_:1}),z,M,H,a(s,{avatar:"../assets/emoji/bqb (1).png",avatarWidth:40},{default:t(()=>[e(" 什么你不会CPP!巧了我也不会！ ")]),_:1}),L,V,N,F,a(s,{avatar:"../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[e(" BABA用了Rider已经回不去了,如果你用VS这里是将是刷新VS项目。 ")]),_:1}),X,K,Y,a(s,{avatar:"../assets/emoji/kclr.png",avatarWidth:40},{default:t(()=>[e(" 看不懂，根本看不懂。 ")]),_:1}),$,a(s,{avatar:"../assets/emoji/bqb (3).png",avatarWidth:40},{default:t(()=>[e(" 虽然看不懂这些东西是干啥的，但细心的你应该发现: ")]),_:1}),J,a(d,{src:"../assets/unrealgif/newcppclass.gif"}),a(s,{avatar:"../assets/emoji/kclr.png",avatarWidth:40},{default:t(()=>[e(" 你在说啥？啥是UObject？ ")]),_:1}),Z,a(s,{avatar:"../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[e(" 很好！看来下一步之前需要搞清楚几个基本概念 ")]),_:1}),Q,nn,a(s,{avatar:"../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[e(" 在 Unreal Engine 中 "),en,e(" ·UObject几乎是所有对象的基类，包括角色、物体、组件、纹理、材质等等。"),an,e(" ·UObject 提供了许多基本的功能和特性，例如内存管理、反射（Reflection）、属性系统、蓝图扩展等。"),tn]),_:1}),sn,a(s,{avatar:"../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[e(" 对比蓝图版，C++类中多了许多编辑器类，代码在手为所欲为。 ")]),_:1}),ln,on,a(s,{avatar:"../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[e(" 很好，UObject可以理解成混沌之力，进而凝聚成一个一个对象。可光有这些对象好比只是原始部落时代的人类，没有规则、秩序。 Epicbaba作为造物主，当然需要给自己的UE宇宙制定一些界面准则——GamePlay。 ")]),_:1}),rn,a(s,{avatar:"../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[e(" 现在请你暂停阅读，你会怎么制定这些准则，让你的游戏世界正常运作？ ")]),_:1}),dn,cn,pn,a(s,{avatar:"../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[e(" 官方你在说啥？我脑子不够用了！ ")]),_:1}),a(s,{avatar:"../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[e(" 总结成一个基本公式："),un,e(" 游戏规则 + 3C + 游戏界面 = 基础GamePlay。"),hn]),_:1}),_n,n("p",null,[n("span",bn,[mn,vn,gn,n("a",kn,[e("扩展阅读"),a(i)]),fn,yn])]),Un,Cn,a(s,{avatar:"../assets/emoji/bqb02.png",avatarWidth:40},{default:t(()=>[e(" GameMode（游戏模式）是一个非常重要的类，它决定了游戏的规则、逻辑和行为。 ")]),_:1}),En,a(s,{avatar:"../assets/emoji/ybk.png",avatarWidth:40},{default:t(()=>[e(" Game State 就是指游戏状态。它管理了所有已连接的客户端，并且实时追踪游戏层面的属性并把它们分发给远程客户端。 ")]),_:1}),jn,xn,a(s,{avatar:"../assets/emoji/bqb (1).png",avatarWidth:40},{default:t(()=>[e(" 3C之一Camera ")]),_:1}),qn,wn,a(s,{avatar:"../assets/emoji/bqb (2).png",avatarWidth:40},{default:t(()=>[e(" 3C之一Character ")]),_:1}),Sn,Wn,a(s,{avatar:"../assets/emoji/bqb (3).png",avatarWidth:40},{default:t(()=>[e(" 3C之一Controller ")]),_:1}),Tn,An,a(s,{avatar:"../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[e(" 比如血条、切枪图标等。 ")]),_:1}),Pn,Rn,a(s,{avatar:"../assets/emoji/bqb01.png",avatarWidth:40},{default:t(()=>[e(" 组件 是一种特殊类型的 对象，Actor 可以将组件作为子对象附加到自身。组件适用于共享相同的行为，例如显示视觉表现、播放声音 ")]),_:1}),Dn,a(s,{avatar:"../assets/emoji/kclr.png",avatarWidth:40},{default:t(()=>[e(" 记不住根本记不住！这里BABA推荐你"),Gn]),_:1}),In,On,Bn,a(s,{avatar:"../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[e(" 拍摄地当然是要放在世界里啊，当然这个“世界”指的是我们的UWorld。 ")]),_:1}),zn,Mn,Hn,a(s,{avatar:"../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[e(" 实际上是受硬件限制，不得不将这个大世界分成若干块，然后按需加载。"),Ln,Vn]),_:1}),Nn,Fn,Xn,a(s,{avatar:"../assets/emoji/bqb01.png",avatarWidth:40},{default:t(()=>[e(" EPICbaba给我们的UE奈何桥留了个后门-WorldContext，通过WorldContext可以连接各个界面而保持记忆。 ")]),_:1}),Kn,Yn,$n,Jn,a(s,{avatar:"../assets/emoji/bqb (1).png",avatarWidth:40},{default:t(()=>[e(" GameInstance就是这么一个掌权者，管理这些“后门”。 ")]),_:1}),Zn,a(s,{avatar:"../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[e(" 没错，这就是经典的MVC->数据（Model）、表现（View）、逻辑（Controller） ")]),_:1}),Qn,ne,ee,a(s,{avatar:"../assets/emoji/ybk.png",avatarWidth:40},{default:t(()=>[e(" 说到底还是程序员在管理这些东西，可是“它们”内部之前的矛盾一不小心就会激化。比如：垃圾怎么倒啊！某管理员权限越级啊！ 这时候我们需要介入调和、整顿。 ")]),_:1}),ae,a(s,{avatar:"../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[e(" C++中并没有类似JAVA的反射机制，但EpicBABA的UE引擎已经帮我们实现了。 ")]),_:1}),te,n("p",null,[e("可以先参考"),n("a",se,[e("官方文档"),a(i)])]),a(s,{avatar:"../assets/emoji/ybk.png",avatarWidth:40},{default:t(()=>[e(" 简单来说虚幻引擎反射系统 使用宏为提供引擎和编辑器各种功，封装你的类。在使用 虚幻引擎（UE） 时，可以使用标准的C++类、函数和变量。 ")]),_:1}),ie,a(s,{avatar:"../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[e(" BABA怎么舍得你离开呢！宏的定义如下： ")]),_:1}),n("p",null,[le,e(" 具体的宏标记请"),a(c,{to:"/unreal/doc_%E6%96%87%E6%A1%A3_/macro.html"},{default:t(()=>[e("阅读我的")]),_:1})]),oe,a(s,{avatar:"../assets/emoji/bqb (2).png",avatarWidth:40},{default:t(()=>[e(" UHT是一个用于生成C++类和相关代码的预处理器工具，它将特定的宏和标记解析成C++代码，以便在编译时构建项目。大致流程如下： ")]),_:1}),re,n("p",null,[e("图片截取自"),n("a",de,[e("图片截取自ARRG从入门到进阶P36"),a(i)])]),ce,pe,ue,a(s,{avatar:"../assets/emoji/bqb (7).png",avatarWidth:40},{default:t(()=>[e(" Unreal Package 文件，它是Unreal Engine（虚幻引擎）中用于存储游戏资源和数据的一种文件格式。 ")]),_:1}),he,a(s,{avatar:"../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[e(" 子系统是一组在整个引擎中提供特定功能的类和接口，它们可以独立于Gameplay存在并提供额外的功能和服务。后续会有实践篇，更加深入体验一下。 ")]),_:1}),_e,a(s,{avatar:"../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[e(" 是不是已经快要忘记咱们的主线任务啦！ ")]),_:1}),be,a(s,{avatar:"../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[e(" 之前我们已经介绍过UHT,通过观察，UHT确实将一些宏标记”翻译“成具体代码提交给了编译器。 ")]),_:1}),me,a(s,{avatar:"../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[e(" 再次安利一波AI补全插件，只需记住类的开头基本都能补出来！ ")]),_:1}),ve,ge,a(s,{avatar:"../assets/emoji/kclr.png",avatarWidth:40},{default:t(()=>[e(" 我们之前命名为TESTFUNC，分组在TEST已经成功映射到蓝图中了！ ")]),_:1}),ke,fe,ye,a(s,{avatar:"../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[e(" 点击播放后，窗口中也成功打印红色的hello world! ")]),_:1}),Ue,Ce,n("table",null,[Ee,n("tbody",null,[n("tr",null,[n("td",null,[n("strong",null,[n("a",je,[e(" 知乎大钊"),a(i)])])])])])]),n("table",null,[xe,n("tbody",null,[n("tr",null,[qe,we,n("td",null,[n("a",Se,[e("链接"),a(i)])])]),n("tr",null,[We,Te,n("td",null,[n("a",Ae,[e("链接"),a(i)])])]),n("tr",null,[Pe,Re,n("td",null,[n("a",De,[e("链接"),a(i)])])]),n("tr",null,[Ge,Ie,n("td",null,[n("a",Oe,[e("链接"),a(i)])])]),n("tr",null,[Be,ze,n("td",null,[n("a",Me,[e("链接"),a(i)])])]),n("tr",null,[He,Le,n("td",null,[n("a",Ve,[e("链接"),a(i)])])])])])])}const Je=_(R,[["render",Ne],["__file","HelloUEcpp.html.vue"]]);export{Je as default};
