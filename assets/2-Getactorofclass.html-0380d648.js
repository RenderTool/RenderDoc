import{_ as i,r as c,o as r,c as d,d as a,w as e,a as n,b as s,e as o}from"./app-072d8949.js";const u="/RenderDoc/assets/getactorofclassnode-bf11c021.png",v="/RenderDoc/assets/2actor-d5d2d1a6.png",k="/RenderDoc/assets/testfunction-20c4aa72.png",m="/RenderDoc/assets/dyonghans-f914a165.png",b="/RenderDoc/assets/cppcastvsgetacotrofclass-c66993a3.png",h={},f=n("h2",{id:"getactorofclass",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getactorofclass","aria-hidden":"true"},"#"),s(" getactorofclass")],-1),g=n("h3",{id:"节点介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#节点介绍","aria-hidden":"true"},"#"),s(" 节点介绍")],-1),_=n("figure",null,[n("img",{src:u,alt:"getactorofclass",tabindex:"0",loading:"lazy"}),n("figcaption",null,"getactorofclass")],-1),y=n("h3",{id:"节点实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#节点实践","aria-hidden":"true"},"#"),s(" 节点实践")],-1),A=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),C=n("br",null,null,-1),x=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),W=n("p",null,[s("actor1中使用"),n("code",null,"getactorofclass"),s("节点获取到actor2，并调用actor2中的test2函数")],-1),j=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w=n("h4",{id:"完整动图",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#完整动图","aria-hidden":"true"},"#"),s(" 完整动图")],-1),O=n("h3",{id:"c-剖析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-剖析","aria-hidden":"true"},"#"),s(" c++剖析")],-1),G=n("span",{style:{color:"#c0392b"}},"getactorofclass",-1),L=o(`<h4 id="头文件-h" tabindex="-1"><a class="header-anchor" href="#头文件-h" aria-hidden="true">#</a> 头文件.h</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * 在世界中查找指定类的第一个Actor。
 * 这是一项耗时的操作，谨慎使用，例如不要在每一帧都使用。
 * @param ActorClass 要查找的Actor的类。必须指定，否则结果将为空。
 * @return 指定类的Actor。
 */</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Actor&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>WorldContext<span class="token operator">=</span><span class="token string">&quot;WorldContextObject&quot;</span><span class="token punctuation">,</span> DeterminesOutputType<span class="token operator">=</span><span class="token string">&quot;ActorClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AActor</span><span class="token operator">*</span> <span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U=n("p",null,[s("一个普通静态函数，返回类型是 "),n("code",null,"AActor*"),s("，即指向 "),n("code",null,"AActor"),s(" 类的指针。"),n("br"),s(" 在C++中，"),n("code",null,"static"),s(" 关键字用于指示该函数是属于类而不是类的实例，并且可以直接通过类名来调用，而不需要创建类的实例。")],-1),E=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass类的实例</span>
MyClass myObject<span class="token punctuation">;</span>

<span class="token comment">//如果函数是static实现，则不需要创建实例就可以直接调用</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 直接调用静态函数</span>
<span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I=n("p",null,[s("这里static修饰的了函数,因此 "),n("code",null,"UGameplayStatics::GetActorOfClass"),s(" 可以直接调用，而不需要创建 "),n("code",null,"UGameplayStatics"),s(" 类的实例。")],-1),M=o(`<h4 id="源文件-cpp" tabindex="-1"><a class="header-anchor" href="#源文件-cpp" aria-hidden="true">#</a> 源文件.cpp</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>AActor<span class="token operator">*</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用QUICK_SCOPE_CYCLE_COUNTER进行性能分析，标记函数调用的性能</span>
    <span class="token function">QUICK_SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>UGameplayStatics_GetActorOfClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果未提供ActorClass，则不执行任何操作，直接返回nullptr</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClass<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 通过WorldContextObject获取当前世界的指针，如果失败则记录错误并返回nullptr</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>UWorld<span class="token operator">*</span> World <span class="token operator">=</span> GEngine<span class="token operator">-&gt;</span><span class="token function">GetWorldFromContextObject</span><span class="token punctuation">(</span>WorldContextObject<span class="token punctuation">,</span> EGetWorldErrorMode<span class="token double-colon punctuation">::</span>LogAndReturnNull<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 使用TActorIterator迭代World中的所有指定类型的Actor</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>TActorIterator<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> <span class="token function">It</span><span class="token punctuation">(</span>World<span class="token punctuation">,</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 获取当前迭代到的Actor指针</span>
                AActor<span class="token operator">*</span> Actor <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>
                <span class="token comment">// 返回找到的第一个符合条件的Actor</span>
                <span class="token keyword">return</span> Actor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果未找到符合条件的Actor，返回nullptr</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),T=o('<h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="getactorofclassvscast" tabindex="-1"><a class="header-anchor" href="#getactorofclassvscast" aria-hidden="true">#</a> <code>getactorofclass</code>vs<code>Cast</code></h3><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>',4),q={href:"https://forums.unrealengine.com/t/get-actor-of-class-vs-cast-to-class/597433",target:"_blank",rel:"noopener noreferrer"};function N(S,B){const t=c("ChatMessage"),l=c("GifWithButton"),p=c("ExternalLinkIcon");return r(),d("div",null,[f,g,a(t,{avatar:"../../assets/emoji/new1.png",avatarWidth:50,alignLeft:""},{default:e(()=>[s(" 是一个在世界中查找指定类第一个Actor的节点 ")]),_:1}),_,y,a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 新建两个要`通信`的actor放入场景。 ")]),_:1}),A,a(t,{avatar:"../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" actor1中新建test001函数"),C,s(" actor2中新建test002函数 ")]),_:1}),x,a(t,{avatar:"../../assets/emoji/new4.png",avatarWidth:40,alignLeft:""},{default:e(()=>[W]),_:1}),j,w,a(l,{src:"../../assets/unrealgif/refencecom.gif"}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[s(" 为什么不放在一个关卡会报错。 ")]),_:1}),a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 你把他理解成在地球上找人,如果人不在地球上又怎么找得到呢? ")]),_:1}),O,a(t,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" Baba还是带你康康 "),G,s("节点源码实现原理吧. ")]),_:1}),L,a(t,{avatar:"../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:e(()=>[U]),_:1}),a(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[s(" Baba我不懂什么叫创建类的实例！ ")]),_:1}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 给你举个例子吧！ ")]),_:1}),E,a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[I]),_:1}),M,a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 由此可见，getactorofclass的本质就是利用迭代器在世界中迭代查找指定类的第一个Actor。 关于迭代器，请参考我的Template[模板] ")]),_:1}),T,n("p",null,[n("a",q,[s("https://forums.unrealengine.com/t/get-actor-of-class-vs-cast-to-class/597433"),a(p)])])])}const D=i(h,[["render",N],["__file","2-Getactorofclass.html.vue"]]);export{D as default};
