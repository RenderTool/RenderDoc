import{_ as k}from"./cdosingleton-5a6b4b1c.js";import{_ as v,r as p,o as m,c as b,d as e,w as a,a as n,b as s,e as l}from"./app-0178eb15.js";const g="/RenderDoc/assets/sington-29a46655.jpg",h="/RenderDoc/assets/singletonc__-8c5e961e.png",f="/RenderDoc/assets/setsing-ef2ffd52.png",y="/RenderDoc/assets/setsingclass-4d74f761.png",_="/RenderDoc/assets/nullptr-19c50daa.jpg",w="/RenderDoc/assets/gameinstanceprint-05c6053e.png",S={},C=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>  
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Do Someting</span>
    <span class="token keyword">delete</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),j=l(`<ol><li><p><strong>默认构造函数 (Default Constructor):</strong> 如果你没有为类定义任何构造函数，编译器将生成一个无参的默认构造函数。它用于创建对象时的初始化，例如 <code>MyClass obj;</code>。</p></li><li><p><strong>析构函数 (Destructor):</strong> 如果你没有显式定义析构函数，编译器将生成一个默认的析构函数。它用于在对象生命周期结束时进行清理工作，例如释放动态分配的资源。析构函数的名称是类名前加上波浪号 <code>~</code>，如 <code>~MyClass()</code>。</p></li><li><p><strong>拷贝构造函数 (Copy Constructor):</strong> 如果你没有定义自己的拷贝构造函数，编译器将生成一个默认的拷贝构造函数。它用于通过复制另一个对象来初始化一个新对象，例如 <code>MyClass obj1; MyClass obj2 = obj1;</code>。</p></li><li><p><strong>拷贝赋值运算符 (Copy Assignment Operator):</strong> 如果你没有定义自己的拷贝赋值运算符，编译器将生成一个默认的拷贝赋值运算符。它用于将一个对象的值复制给另一个对象，例如 <code>MyClass obj1, obj2; obj2 = obj1;</code>。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),G=l(`<blockquote><p>类默认是私有的。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token punctuation">{</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    MyClass<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),U=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),I=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Singleton</span> 
<span class="token punctuation">{</span>

    <span class="token comment">// 将构造函数私有化</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token comment">// 静态成员函数，用于获取类的唯一实例</span>
<span class="token keyword">static</span> Singleton<span class="token operator">&amp;</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
<span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>
<span class="token keyword">return</span> instance <span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;testfunction&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 获取单例实例</span>
    Singleton<span class="token operator">&amp;</span> singletonInstance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singletonInstance<span class="token punctuation">.</span><span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Singleton</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 将构造函数私有化</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">&amp;</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;testfunction&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   
    <span class="token comment">// 获取单例实例</span>
    Singleton<span class="token operator">*</span> singletonInstance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singletonInstance<span class="token operator">-&gt;</span><span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>也可以改写成动态内存分配创建单例对象（懒汉式）,这也是智能指针管理内存的核心思想之一，用户无需关心指针释放时机。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">Singleton</span> 
<span class="token punctuation">{</span>
    <span class="token comment">// 将构造函数私有化</span>
    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">static</span> Singleton<span class="token operator">*</span> instance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> Singleton<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;testfunction&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token operator">~</span><span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 在析构函数中释放动态分配的内存</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> instance<span class="token punctuation">;</span>
            instance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   
    <span class="token comment">// 获取单例实例</span>
    Singleton<span class="token operator">*</span> singletonInstance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token double-colon punctuation">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    singletonInstance<span class="token operator">-&gt;</span><span class="token function">testfunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在程序结束时，析构函数会被调用，释放动态分配的内存</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),M=n("figure",null,[n("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),E=n("h3",{id:"经典模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#经典模式","aria-hidden":"true"},"#"),s(" 经典模式")],-1),O=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"pragma"),s(),n("span",{class:"token expression"},"once")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"CoreMinimal.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"UObject/ObjectMacros.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"GameSingleton.generated.h"')]),s(`

`),n("span",{class:"token function"},"UCLASS"),n("span",{class:"token punctuation"},"("),s("Blueprintable"),n("span",{class:"token punctuation"},","),s("BlueprintType"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EXORCIST_API"),s(" UGameSingleton "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"public"),s(` UObject
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"GENERATED_BODY"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
	
`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
	 `),n("span",{class:"token function"},"UGameSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
	`),n("span",{class:"token function"},"UFUNCTION"),n("span",{class:"token punctuation"},"("),s("BlueprintCallable"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token keyword"},"static"),s(" UGameSingleton"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
	`),n("span",{class:"token function"},"UPROPERTY"),n("span",{class:"token punctuation"},"("),s("BlueprintReadWrite"),n("span",{class:"token punctuation"},")"),s(`
	int32 InstanceCount `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"GameSingleton.h"')]),s(`

UGameSingleton`),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token class-name"},"UGameSingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"static"),s(" UGameSingleton"),n("span",{class:"token operator"},"*"),s(" instance"),n("span",{class:"token operator"},"="),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("instance"),n("span",{class:"token operator"},"=="),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		instance`),n("span",{class:"token operator"},"="),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"NewObject"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("UGameSingleton"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		instance`),n("span",{class:"token operator"},"->"),n("span",{class:"token function"},"AddToRoot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(" instance"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("figure",null,[n("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),L=n("h3",{id:"enginesingleton",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enginesingleton","aria-hidden":"true"},"#"),s(" EngineSingleton")],-1),T=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"pragma"),s(),n("span",{class:"token expression"},"once")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"CoreMinimal.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"UObject/ObjectMacros.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"GameSingleton.generated.h"')]),s(`

`),n("span",{class:"token function"},"UCLASS"),n("span",{class:"token punctuation"},"("),s("Blueprintable"),n("span",{class:"token punctuation"},","),s("BlueprintType"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"EXORCIST_API"),s(" UGameSingleton "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"public"),s(` UObject
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"GENERATED_BODY"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
	
`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
	 `),n("span",{class:"token function"},"UGameSingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
	`),n("span",{class:"token function"},"UFUNCTION"),n("span",{class:"token punctuation"},"("),s("BlueprintCallable"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token keyword"},"static"),s(" UGameSingleton"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
	`),n("span",{class:"token function"},"UPROPERTY"),n("span",{class:"token punctuation"},"("),s("BlueprintReadWrite"),n("span",{class:"token punctuation"},")"),s(`
	int32 InstanceCount `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`


`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"GameSingleton.h"')]),s(`

UGameSingleton`),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token class-name"},"UGameSingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("GEngine"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token punctuation"},"{"),s(`
		UGameSingleton`),n("span",{class:"token operator"},"*"),s(" Instance "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"Cast"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("UGameSingleton"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),s("GEngine"),n("span",{class:"token operator"},"->"),s("GameSingleton"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("Instance"),n("span",{class:"token punctuation"},")"),s(`
		`),n("span",{class:"token punctuation"},"{"),s(`
		    `),n("span",{class:"token keyword"},"return"),s(" Instance"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`

	`),n("span",{class:"token punctuation"},"}"),s(`
	`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"nullptr"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("figure",null,[n("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>UGameSingleton<span class="token operator">*</span> Instance <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UGameSingleton<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>GEngine<span class="token operator">-&gt;</span>GameSingleton<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//没有设置强转失败</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="cdosingleton" tabindex="-1"><a class="header-anchor" href="#cdosingleton" aria-hidden="true">#</a> CDOSingleton</h3>',3),R=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),N=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"pragma"),s(),n("span",{class:"token expression"},"once")]),s(`

`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"CoreMinimal.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"UObject/NoExportTypes.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"MySingleton.generated.h"')]),s(`

`),n("span",{class:"token function"},"UCLASS"),n("span",{class:"token punctuation"},"("),s("BlueprintType"),n("span",{class:"token punctuation"},","),s("Blueprintable"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UMySingleton"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token base-clause"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UObject")]),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
	`),n("span",{class:"token function"},"GENERATED_BODY"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
   `),n("span",{class:"token function"},"UMySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" FObjectInitializer"),n("span",{class:"token operator"},"&"),s(" ObjectInitializer"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
   
   `),n("span",{class:"token function"},"UFUNCTION"),n("span",{class:"token punctuation"},"("),s("BlueprintPure"),n("span",{class:"token punctuation"},","),s(" Category"),n("span",{class:"token operator"},"="),s("MySingleton"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token keyword"},"static"),s(" UMySingleton"),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
   
   `),n("span",{class:"token function"},"UFUNCTION"),n("span",{class:"token punctuation"},"("),s("BlueprintCallable"),n("span",{class:"token punctuation"},","),s(" Category"),n("span",{class:"token operator"},"="),s("MySingleton"),n("span",{class:"token punctuation"},")"),s(`
   `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"SetTestStr"),n("span",{class:"token punctuation"},"("),s("FString InStr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
   
   `),n("span",{class:"token function"},"UFUNCTION"),n("span",{class:"token punctuation"},"("),s("BlueprintCallable"),n("span",{class:"token punctuation"},","),s(" Category"),n("span",{class:"token operator"},"="),s("MySingleton"),n("span",{class:"token punctuation"},")"),s(`
   FString `),n("span",{class:"token function"},"GetTestStr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"private"),n("span",{class:"token operator"},":"),s(`
    FString TestStr`),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"Singleton.h"')]),s(`

`),n("span",{class:"token class-name"},"UMySingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"UMySingleton"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"const"),s(" FObjectInitializer"),n("span",{class:"token operator"},"&"),s(" ObjectInitializer"),n("span",{class:"token punctuation"},")"),s(`
	`),n("span",{class:"token operator"},":"),n("span",{class:"token function"},"Super"),n("span",{class:"token punctuation"},"("),s("ObjectInitializer"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

UMySingleton`),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token class-name"},"UMySingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"GetInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 大多数情况下CDO不应该被修改（使用GetDefault），这里使用GetMutableDefault返回的是可修改版本。"),s(`
   `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token generic-function"},[n("span",{class:"token function"},"GetMutableDefault"),n("span",{class:"token generic class-name"},[n("span",{class:"token operator"},"<"),s("UMySingleton"),n("span",{class:"token operator"},">")])]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token class-name"},"UMySingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"SetTestStr"),n("span",{class:"token punctuation"},"("),s("FString InStr"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    TestStr `),n("span",{class:"token operator"},"="),s(" InStr"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

FString `),n("span",{class:"token class-name"},"UMySingleton"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"GetTestStr"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" TestStr"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("h3",{id:"gameinstance",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gameinstance","aria-hidden":"true"},"#"),s(" GameInstance")],-1),P=n("figure",null,[n("img",{src:w,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),V=n("h3",{id:"subsystem-子系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#subsystem-子系统","aria-hidden":"true"},"#"),s(" Subsystem|子系统")],-1),Y=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">UGameUIManagerSubsystem</span><span class="token double-colon punctuation">::</span><span class="token function">ShouldCreateSubsystem</span><span class="token punctuation">(</span>UObject<span class="token operator">*</span> Outer<span class="token punctuation">)</span> <span class="token keyword">const</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token generic-function"><span class="token function">CastChecked</span><span class="token generic class-name"><span class="token operator">&lt;</span>UGameInstance<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Outer<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">IsDedicatedServerInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		TArray<span class="token operator">&lt;</span>UClass<span class="token operator">*</span><span class="token operator">&gt;</span> ChildClasses<span class="token punctuation">;</span>
		<span class="token function">GetDerivedClasses</span><span class="token punctuation">(</span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ChildClasses<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Only create an instance if there is no override implementation defined elsewhere</span>
		<span class="token keyword">return</span> ChildClasses<span class="token punctuation">.</span><span class="token function">Num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3>`,2),X=n("h3",{id:"扩展",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扩展","aria-hidden":"true"},"#"),s(" 扩展")],-1),H={href:"https://forums.unrealengine.com/t/singleton-pattern-in-c/430452",target:"_blank",rel:"noopener noreferrer"},J={href:"https://www.bilibili.com/video/BV1bR4y177Hp/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"};function K(Q,Z){const t=p("chatmessage"),d=p("RouterLink"),i=p("CodeTabs"),u=p("gifwithbutton"),r=p("ExternalLinkIcon");return m(),b("div",null,[e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 什么是单例? ")]),_:1}),e(t,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 不同的框架实现方法不同，在C++中单例一般是指确保一个类只有一个实例，并为其提供一个全局访问入口。 ")]),_:1}),e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:a(()=>[s(" 可是，怎么确保一个类只能有一个实例呢？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 你先回答我，定义一个类后你是通过什么办法来新建实例的？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:a(()=>[s(" 用new关键字，堆上新建一个对象。 ")]),_:1}),C,e(t,{avatar:"../../assets/emoji/bqb (5).png",avatarWidth:40},{default:a(()=>[s(" 可是，该怎么限制用户的new操作呢？我总不能和用户说你不能new一个新实例吧！ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 你可以先康康一个普通类初始化后默认会有哪些操作？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:a(()=>[s(" 这还不简单，一个类默认拥有bigfour,即四个初始化操作。 ")]),_:1}),j,e(t,{avatar:"../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:a(()=>[s(" 我们都知道构造函数默认写在public中，如果我强制将他移动到private会发生什么？ ")]),_:1}),G,e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:a(()=>[s(" 还能发生什么，编译器报错呗。 ")]),_:1}),U,e(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 但换个角度思考，我们已经成功限制了用户的new行为，问题也变成了怎么生成第一个实例！ 现在你思考一下什么情况下不需要新建实例就能访问某个对象成员？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/new3.png",avatarWidth:55},{default:a(()=>[s(" 我记得static关键字修饰的成员函数！不需要实例化对象。 ")]),_:1}),e(t,{avatar:"../../assets/emoji/new2.png",avatarWidth:55,alignLeft:""},{default:a(()=>[s(" 是的，现在new这条路已经不能走了，咱可以用static将他的提到静态区。 ")]),_:1}),I,e(t,{avatar:"../../assets/emoji/new3.png",avatarWidth:55},{default:a(()=>[s(" 妙啊！也就是说利用static函数和他沟通，让他自己创造自己！ ")]),_:1}),e(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 孺子可教！改成指针传递也是可以的 ")]),_:1}),x,e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[n("p",null,[e(d,{to:"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html"},{default:a(()=>[s("Language/c++Designer/Singleton|单例")]),_:1})])]),_:1}),e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 那么！UE中支持原生C++单例实现吗？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 支持！但官方不推荐使用！官方推荐我们使用subsystem ")]),_:1}),M,E,e(i,{id:"69",data:[{id:"GameSingleton.h"},{id:"GameSingleton.cpp"}],"tab-id":"language"},{title0:a(({value:o,isActive:c})=>[s("GameSingleton.h")]),title1:a(({value:o,isActive:c})=>[s("GameSingleton.cpp")]),tab0:a(({value:o,isActive:c})=>[O]),tab1:a(({value:o,isActive:c})=>[W]),_:1},8,["data"]),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 蓝图中通过实例指针修改成员变量，然后跳转关卡或者重新打开打印一下康康不就知道了！` ")]),_:1}),A,e(u,{src:"../../assets/unrealgif/ramdonsington.gif"}),e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 我发现他重写打开关卡后他设置的值依然是上一次！只有在引擎彻底重启后数值才恢复成30。 ")]),_:1}),e(u,{src:"../../assets/unrealgif/sington.gif"}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 没错，他的生命周期和引擎是一样的，意味着在编辑器模式中的GEngine没有销毁这个变量就一直存在。因此你可以看到另外一种写法： ")]),_:1}),L,e(i,{id:"90",data:[{id:"GameSingleton.h"},{id:"GameSingleton.cpp"}],"tab-id":"language"},{title0:a(({value:o,isActive:c})=>[s("GameSingleton.h")]),title1:a(({value:o,isActive:c})=>[s("GameSingleton.cpp")]),tab0:a(({value:o,isActive:c})=>[T]),tab1:a(({value:o,isActive:c})=>[B]),_:1},8,["data"]),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 两者生命周期都等同于GEngine，所以编辑器中停止游戏并不会释放内存。 ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 后面这种写法需要在设置中`项目设置`指定一下单例类。 ")]),_:1}),D,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 如果不设置呢？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 没有设置引擎会崩溃，因为他依赖GEngine的GameSingleton指针。 ")]),_:1}),z,e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 当然，还可以利用CDO来创建。 ")]),_:1}),R,e(i,{id:"116",data:[{id:"MySingleton.h"},{id:"MySingleton.cpp"}],"tab-id":"language"},{title0:a(({value:o,isActive:c})=>[s("MySingleton.h")]),title1:a(({value:o,isActive:c})=>[s("MySingleton.cpp")]),tab0:a(({value:o,isActive:c})=>[N]),tab1:a(({value:o,isActive:c})=>[q]),_:1},8,["data"]),F,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 好像和游戏实例差不多耶！ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 确实，他的表现确实很像我们的游戏实例，但游戏实例的生命周期却没有EngineSingleton长。 关卡结束运行就会执行析构。 ")]),_:1}),e(u,{src:"../../assets/unrealgif/gameinstancegif.gif"}),e(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 使用了open+level重新打开了这个关卡。 ")]),_:1}),P,V,e(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 严格意义上来说子系统并不是单例，但他的成员函数接口保证了只实例化一个子类，其中使用了一些高级C++特性和技巧，比如 引用计数、多态、重写等。后续的子系统篇会有详细介绍。 ")]),_:1}),Y,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 蓝图函数库是单例吗？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 蓝图函数库（Blueprint Function Library）并不是严格意义上的单例。蓝图函数库是一种特殊类型的类，通常用于存储一组静态函数，这些函数可供蓝图（Blueprint）图表中的蓝图调用。 ")]),_:1}),X,n("p",null,[n("a",H,[s("UE官方论坛"),e(r)])]),n("p",null,[n("a",J,[s("Cherno C++"),e(r)])])])}const sn=v(S,[["render",K],["__file","3-Singleton.html.vue"]]);export{sn as default};
