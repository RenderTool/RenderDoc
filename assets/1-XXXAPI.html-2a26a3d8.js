import{_ as c,r as p,o as l,c as r,d as s,w as t,b as n,a,e as i}from"./app-8a846373.js";const d="/RenderDoc/assets/api-4a7d1980.png",u="/RenderDoc/assets/UHTBUILD-d91bd951.png",v="/RenderDoc/assets/tetsfun-d15ce727.png",k="/RenderDoc/assets/okbuild-8cf8ea83.png",m="/RenderDoc/assets/testotherfun-4cde5d88.png",g="/RenderDoc/assets/buidfailvoidut-f57559ca.png",h={},_=a("figure",null,[a("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),b=a("span",{style:{color:"#c0392b"}},"模块（项目）名_API ",-1),f=a("h2",{id:"模块-项目-名-api",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#模块-项目-名-api","aria-hidden":"true"},"#"),n(" 模块（项目）名_API")],-1),y=a("p",null,[a("code",null,"模块（项目）名_API"),n(" 通常用于标记导出和导入规范，特别是在涉及到使用动态链接库（DLL）的情况下。"),a("br"),n(" 确保在使用该库的项目中，类和函数的声明和定义能够正确地导入和导出(控制代码对外的可见性)")],-1),w=i(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MYGame_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
<span class="token keyword">public</span><span class="token operator">:</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=i(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UTEST</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UBlueprintFunctionLibrary</span></span>
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
<span class="token keyword">public</span><span class="token operator">:</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),T=a("figure",null,[a("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),j=a("p",null,[n("别急，重点康康蓝图里去掉"),a("code",null,"MYGame_API"),n("还能不能用。")],-1),q=a("figure",null,[a("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),L=a("p",null,[n("继续测试，我们再新建一个其他类，并将没有"),a("code",null,"MYGame_API"),n("的"),a("code",null,"Test.h"),n("引入")],-1),W=i(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.h&quot;</span></span>

<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;TestOtherFun&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestOtherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token class-name">UExorcistFunctionLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">TestOtherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token class-name">UTEST</span><span class="token double-colon punctuation">::</span><span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),E=a("figure",null,[a("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),U=a("figure",null,[a("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),I=i("<ol><li><p><strong>不需要导入和导出：</strong> 对于一些类，特别是那些不涉及跨库边界的纯内部实现，可能没有必要使用这样的宏。如果一个类只在单一的项目中使用，而不需要在其他项目或库中导入，那么就不需要使用导入和导出规范。</p></li><li><p><strong>使用模板类或内联函数：</strong> 对于模板类或内联函数，它们的定义通常放在头文件中，这样编译器可以在每个使用它们的地方生成对应的代码，而不需要导入和导出。</p></li><li><p><strong>宏定义中已经包含：</strong> 在一些情况下，类的导出规范可能已经在其他宏定义中包含，因此没有必要重复定义。</p></li><li><p><strong>库或项目设计决策：</strong> 有时，项目或库的设计决策可能决定不使用导入和导出规范。这可能是因为项目的组织结构，构建过程，或者对于代码的特定要求。</p></li></ol>",1),C=i(`<ol><li>新建一个插件,并在我们项目对应的<code>build.cs</code>加入插件模块</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>PrivateDependencyModuleNames<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>
<span class="token keyword">new</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">{</span>
    <span class="token string">&quot;插件模块名&quot;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>此时插件中没写<code>插件名_API</code>，编译后发生链接错误。</li></ol><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),A=a("h2",{id:"参考链接",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),n(" 参考链接")],-1),B={href:"https://blog.csdn.net/xcinkey/article/details/129152652",target:"_blank",rel:"noopener noreferrer"},F={href:"https://zhuanlan.zhihu.com/p/367223779",target:"_blank",rel:"noopener noreferrer"};function S(D,N){const e=p("chatmessage"),o=p("ExternalLinkIcon");return l(),r("div",null,[s(e,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:45},{default:t(()=>[n(" Baba我真的快疯掉了！ ")]),_:1}),s(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 怎么了？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/kclr.png",avatarWidth:38},{default:t(()=>[n(' 在虚幻引擎中添加一个类，自动生成的代码中经常可以看到形如"模块（项目）名_API"的字样,具体是拿来干什么的？ ')]),_:1}),_,s(e,{avatar:"../../assets/emoji/new1.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 宏函数（Macro）知道吧，一种预处理器指令，用于在编译之前进行文本替换，UE中这种大写的一般就是宏函数。 ")]),_:1}),s(e,{avatar:"../../assets/emoji/new8.png",avatarWidth:60},{default:t(()=>[n(" 为什么要写这么多宏函数呢？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/new3.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 为了简化编码、提高性能、实现特定功能等。 ")]),_:1}),s(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 那我们能讲讲一些常用的宏以及用途吗？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/blzt.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 一口吃不成胖子，先来了解一下你提到的这个宏:"),b]),_:1}),f,s(e,{avatar:"../../assets/emoji/new4.png",avatarWidth:50,alignLeft:""},{default:t(()=>[y]),_:1}),s(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 我不理解！能举个例子吗？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 那就拿我们截图的蓝图函数库类为例吧 ")]),_:1}),s(e,{avatar:"../../assets/emoji/new7.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 新建一个蓝图函数库 ")]),_:1}),w,s(e,{avatar:"../../assets/emoji/new4.png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 去掉EXORCIST_API ")]),_:1}),x,s(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 编译后都没问题啊！ ")]),_:1}),T,s(e,{avatar:"../../assets/emoji/new5.png",avatarWidth:45,alignLeft:""},{default:t(()=>[j]),_:1}),q,s(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:45},{default:t(()=>[n(" Good!目前来说他不会影响反射到蓝图节点中。 ")]),_:1}),s(e,{avatar:"../../assets/emoji/new2.png",avatarWidth:55,alignLeft:""},{default:t(()=>[L]),_:1}),W,s(e,{avatar:"../../assets/emoji/new9.png",avatarWidth:45},{default:t(()=>[n(" 编译依然ok ")]),_:1}),E,s(e,{avatar:"../../assets/emoji/new3.png",avatarWidth:55},{default:t(()=>[n(" 项目中也一样正常使用 ")]),_:1}),U,s(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 这么说这东西可有可无？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 这得从他的作用说起了: ")]),_:1}),n(" 如果某个类没有使用 `xxx_api` 这样的宏，有几种可能的原因： "),I,s(e,{avatar:"../../assets/emoji/new5.png",avatarWidth:40},{default:t(()=>[n(" 按这个说法，需要导入和导出时也就是编写的引入自定义插件时才可能出现链接库错误？ ")]),_:1}),s(e,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 实践一下就知道了！ ")]),_:1}),C,s(e,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 看来确实是这么一回事。 ")]),_:1}),A,a("p",null,[a("a",B,[n("csdn"),s(o)]),a("a",F,[n('UE4 "private: static class UClass...'),s(o)])])])}const R=c(h,[["render",S],["__file","1-XXXAPI.html.vue"]]);export{R as default};
