import{_ as c,r as p,o as l,c as i,d as a,w as e,e as o,a as n,b as t}from"./app-89c110f4.js";const d="/RenderDoc/assets/ptrconst-03d51092.jpg",r={},u=o(`<h2 id="const-修饰符用于声明常量-只读-。" tabindex="-1"><a class="header-anchor" href="#const-修饰符用于声明常量-只读-。" aria-hidden="true">#</a> <code>const</code> 修饰符用于声明常量（只读）。</h2><ol><li><p><strong>常量成员函数：</strong> 当函数不修改对象的成员变量时，可以将函数声明为常量成员函数。这告诉编译器在函数体内部不允许修改对象的成员变量。这是为了确保调用常量对象上的这个函数时，不会修改对象的状态。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>参数为常量引用：</strong> 当函数不需要修改传递给它的参数时，可以将参数声明为常量引用。这有助于提高性能，避免复制大型对象，并表达了函数不会修改传递给它的对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>返回常量引用：</strong> 当函数返回一个引用时，将其声明为常量引用有助于确保调用者无法修改函数返回的对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="const-常量来代替-define-宏定义" tabindex="-1"><a class="header-anchor" href="#const-常量来代替-define-宏定义" aria-hidden="true">#</a> <code>const</code> 常量来代替 #define 宏定义</h2><blockquote><p>使用 <code>const</code> 常量提供了类型安全性，因为它们与变量一样有明确的数据类型。宏定义是简单的文本替换，没有类型检查，这可能导致不正确的类型使用。</p></blockquote>`,4),k=n("p",null,[n("code",null,"# define day 7")],-1),v=n("blockquote",null,[n("p",null,"此时打印他的sizeof(day) = 4")],-1),h=n("p",null,[n("code",null,"# define day 7.")],-1),m=n("blockquote",null,[n("p",null,"此时打印他的sizeof(day) = 8,也就是说我们无法保证数据安全。")],-1),b=o(`<h2 id="const-修饰指针" tabindex="-1"><a class="header-anchor" href="#const-修饰指针" aria-hidden="true">#</a> <code>const</code> 修饰指针</h2><h3 id="底层-const-low-level-const" tabindex="-1"><a class="header-anchor" href="#底层-const-low-level-const" aria-hidden="true">#</a> 底层 const（Low-level const）：</h3><h4 id="常量指针" tabindex="-1"><a class="header-anchor" href="#常量指针" aria-hidden="true">#</a> 常量指针</h4><p>底层 const 是指 const 修饰的是指针指向的值（指针所指向的内容），而不是指针本身。 这意味着指针可以指向不同的对象，但不能通过该指针修改所指向的对象的值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>      <span class="token comment">// 底层 const，ptr 指向的值是不可修改的</span>
<span class="token keyword">int</span> <span class="token keyword">const</span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>      <span class="token comment">// 与上一行等价，指针指向的值是不可修改的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="顶层-const-top-level-const-顶层-const-是指-const-修饰的是变量本身-表示该变量本身是不可修改的。" tabindex="-1"><a class="header-anchor" href="#顶层-const-top-level-const-顶层-const-是指-const-修饰的是变量本身-表示该变量本身是不可修改的。" aria-hidden="true">#</a> 顶层 const（Top-level const）：顶层 const 是指 const 修饰的是变量本身，表示该变量本身是不可修改的。</h3><p>这意味着变量的值不能被修改，但是如果该变量是指针，可以通过该指针修改所指向的对象的值。</p><h4 id="指针常量" tabindex="-1"><a class="header-anchor" href="#指针常量" aria-hidden="true">#</a> 指针常量</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> ptr<span class="token punctuation">;</span>      <span class="token comment">// 顶层 const，ptr 本身是不可修改的，但所指向的值可以修改</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>     <span class="token comment">// 顶层 const，value 本身是不可修改的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',10);function g(f,y){const s=p("ChatMessage");return l(),i("div",null,[a(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[t(" 为什么C++ 中推荐使用 const 常量？ ")]),_:1}),u,a(s,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40},{default:e(()=>[t(" 举个例子一周7天，写成代码为 ")]),_:1}),k,v,a(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[t(" 很好这没问题，如果我不小心多打了个点 ")]),_:1}),h,m,a(s,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40},{default:e(()=>[t(" 不行啊，你这没难度！上点难度！ ")]),_:1}),b])}const w=c(r,[["render",g],["__file","Modifiers-Constants.html.vue"]]);export{w as default};
