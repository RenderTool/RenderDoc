import{_ as l,r as p,o as i,c,d as t,w as e,a,b as n,e as o}from"./app-0178eb15.js";const r="/RenderDoc/assets/GASuse001-2ce104cf.png",u="/RenderDoc/assets/GASuse003-6d117d45.png",d="/RenderDoc/assets/GASuse004-1cc068d7.png",k="/RenderDoc/assets/GASuse005-44bafd8c.png",g="/RenderDoc/assets/zbxt1-ba7a9e2d.svg",v={},m=a("h2",{id:"第一印象",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#第一印象","aria-hidden":"true"},"#"),n(" 第一印象")],-1),b=a("ol",null,[a("li",null,"要有一个Actor类，用于承载药水"),a("li",null,"一个角色类。。。。")],-1),h=a("figure",null,[a("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),_=a("ol",null,[a("li",null,"角色碰到球形触发器显示对应的UI"),a("li",null,"可能存在同时触碰多个触发的情况，所以我设计了一个附近列表"),a("li",null,"用户拖拽附近列表或者交互按键直接拾取最近的触碰对象。"),a("li",null,"装备记录数据到背包组件中。")],-1),f=a("h2",{id:"数据结构",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#数据结构","aria-hidden":"true"},"#"),n(" 数据结构")],-1),T=a("h3",{id:"结构体",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#结构体","aria-hidden":"true"},"#"),n(" 结构体")],-1),q=a("figure",null,[a("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),y=a("h3",{id:"datatable-表格",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#datatable-表格","aria-hidden":"true"},"#"),n(" Datatable|表格")],-1),S=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>
<span class="token keyword">struct</span>  <span class="token class-name">FCharacterStruct</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FTableRowBase</span></span>
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span><span class="token operator">:</span>
	
	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	FString Name<span class="token punctuation">;</span>

	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;Icon&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	TObjectPtr<span class="token operator">&lt;</span>UTexture2D<span class="token operator">&gt;</span> Icon<span class="token punctuation">;</span>
	
	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalMesh&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	TObjectPtr<span class="token operator">&lt;</span>USkeletalMesh<span class="token operator">&gt;</span> SkeletalMesh<span class="token punctuation">;</span>
	
	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalAnim&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	TObjectPtr<span class="token operator">&lt;</span>UAnimSequence<span class="token operator">&gt;</span> SkeletalAnim<span class="token punctuation">;</span>

	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalAnimSpeed&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;1.000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">float</span> SkeletalAnimSpeed <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
	
	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	int32 id  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),P=a("figure",null,[a("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),U=a("h3",{id:"api",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#"),n(" API")],-1),x=a("div",{class:"hint-container note"},[a("p",{class:"hint-container-title"},"注"),a("p",null,"API（Application Programming Interface）是一组定义软件组件之间交互的规范。简而言之，API定义了不同软件之间如何通信、相互调用功能的方式。")],-1),D=a("figure",null,[a("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),I=a("h3",{id:"json",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),n(" Json")],-1),R=o(`<div class="hint-container note"><p class="hint-container-title">注</p><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它以易于阅读和编写的文本形式表示数据。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;key1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key2&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key3&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key4&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;item2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key5&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;nestedKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nestedValue&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;key6&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1),A=o('<ol><li><p><strong>TCP：</strong></p><ul><li><strong>阶段：</strong> TCP通常用于可靠的、有序的数据传输。在游戏中，TCP可以在游戏开始时用于建立连接和传输重要的游戏数据，例如玩家的位置、状态等。TCP适用于那些需要可靠性和顺序性的场景，如回合制游戏、棋类游戏等。</li></ul></li><li><p><strong>UDP：</strong></p><ul><li><strong>阶段：</strong> UDP更适合需要快速传输而可以容忍少量数据丢失的情况。在游戏中，UDP通常用于实时性要求高的场景，如多人在线游戏、射击游戏等。UDP的无连接性和低延迟特性使其适合用于及时更新玩家位置、动作等信息。</li></ul></li><li><p><strong>HTTP：</strong></p><ul><li><strong>阶段：</strong> HTTP通常用于在游戏启动时进行初始资源加载，例如下载游戏客户端、获取游戏配置文件等。在游戏进行过程中，HTTP可能用于在游戏内显示网页内容、获取更新或补丁等。HTTP是一种无状态协议，适合用于不需要实时通信的场景。</li></ul></li><li><p><strong>WebSocket：</strong></p><ul><li><strong>阶段：</strong> WebSocket通常在游戏中用于实现实时双向通信。它建立在单个TCP连接上，可以在客户端和服务器之间双向传输数据，适用于需要实时互动和更新的游戏，如聊天、实时多人游戏状态同步等。</li></ul></li></ol><p>通俗点：</p><ol><li><p><strong>保存行为：</strong> 当需要将游戏进度、用户设置或其他重要数据保存到服务器时，可以使用HTTP通信。例如，保存玩家的游戏进度、解锁的成就、收集的物品等。</p></li><li><p><strong>购买行为：</strong> 在进行虚拟商品购买、充值游戏币等交易时，通常需要与服务器进行安全的交互，以确保交易的可靠性和防止欺诈。这通常会使用HTTPS来保护数据传输的安全性。</p></li><li><p><strong>抽奖行为：</strong> 如果游戏中有抽奖、奖品领取等功能，这些行为可能需要与服务器进行通信，以确保公平性、防止作弊等。</p></li><li><p><strong>用户认证和授权：</strong> 登录、注册、用户身份验证等操作通常涉及到HTTP通信。使用HTTP可以向服务器发送用户凭证以进行身份验证，并获取授权信息。</p></li><li><p><strong>获取更新或补丁：</strong> 游戏启动时，可能需要检查服务器上是否有新的游戏版本、更新或补丁。这也可以通过HTTP通信来实现。</p></li></ol><h3 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h3>',4),j=o('<h2 id="进一步构思" tabindex="-1"><a class="header-anchor" href="#进一步构思" aria-hidden="true">#</a> 进一步构思</h2><blockquote><p>Table+子系统+资产实现配表驱动</p></blockquote><h3 id="构思图" tabindex="-1"><a class="header-anchor" href="#构思图" aria-hidden="true">#</a> 构思图</h3><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="核心思路" tabindex="-1"><a class="header-anchor" href="#核心思路" aria-hidden="true">#</a> 核心思路</h3><ol><li><p><strong>使用子系统UInventorySubsystem</strong></p><ul><li>引入专门的物品子系统，例如 <code>UInventorySubsystem</code>，用于处理物品的管理和交互。</li></ul></li><li><p><strong>暴露切换网络接口 (ENUM)</strong></p><ul><li>使用枚举类型（ENUM）定义网络切换的接口，确保系统在本地测试和网络测试时有不同的行为。</li><li>示例：<code>InventorySubsystem-&gt;SetNetworkMode(NetworkMode);</code></li></ul></li><li><p><strong>本地部分使用流程</strong></p><ul><li>在适当时机注册 <code>InventoryHUDLayout</code>，可参考Lyra的UIExtension。</li><li>示例：<code>InventorySubsystem-&gt;RegisteInventoryHUDLayout(InventoryHUDLayout);</code></li></ul></li><li><p><strong>在适当的位置注册总物品表 TotalItemTable 到物品子系统</strong></p><ul><li>示例：<code>InventorySubsystem-&gt;RegisterTotalTable(TotalItemTable);</code></li><li>例如： <ul><li>行名1（武器.近身.匕首）, UDataTable* SubTable</li><li>行名2（武器.近身.长剑）, UDataTable* SubTable</li><li>行名3（道具.血包）, UDataTable* SubTable</li></ul></li></ul></li><li><p><strong>准备Spawn的物体Actor中配置GameTag和Index</strong></p><ul><li>示例：<code>ItemActor-&gt;ConfigureItem(GameTag, Index);</code></li></ul></li><li><p><strong>Actor中Over事件调用子系统查表</strong></p><ul><li>获取子表格的引用，例如：<code>UDataTable* SubTable = InventorySubsystem-&gt;GetSubTableFromTotalTable(GameTag);</code></li><li>通过GameTag直接定位到总表格的对应行，获取子表格的引用。</li></ul></li><li><p><strong>子系统根据Fragments实例化内容</strong></p><ul><li>根据Fragments数组中的 <code>UInventoryItemFragment</code> 子类实例，配置对应的内容。</li><li>例如：基础 <code>TextureFrag</code>（Icon）、<code>AS</code>（属性）、<code>MeshComponent</code>（网格体）、<code>AddWidget</code>（比如根据 <code>HUD.Slot</code>、<code>UIClass</code> 配置要显示的 UI）等</li></ul></li><li><p><strong>子系统暴露交互键注册函数</strong></p><ul><li>子系统应当暴露接口，用于注册交互键，可能涉及 UI 的绑定以及信息更新。</li><li>示例：子系统接口<code>RegisterInteractionKey</code>。</li></ul></li></ol>',6);function W(N,E){const s=p("chatmessage");return i(),c("div",null,[m,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 你打算怎么开始设计你的背包？现在你捡到了一个药水，他通过什么来影响你的血条UI、和血量？ ")]),_:1}),t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 我的第一直觉是： ")]),_:1}),b,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 打住！我们不应该从细节开始考虑问题，我们应该从整体框架开始，然后再考虑实现细节。 ")]),_:1}),t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 我的第一直觉，整体框架应该是这样的（就背包系统来说） ")]),_:1}),h,_,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 很好，这已经具备我们平时玩游戏的背包系统雏形了！现在我们稍微深入讨论一下！ ")]),_:1}),f,T,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 第一个问题，你觉得你用什么数据结构承载你的数据？ ")]),_:1}),t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 结构体数组够简单也够暴力！配合Json转结构体插件还能网络数据同步。 ")]),_:1}),q,y,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 确实，结构体数组确实简单暴力！但数组类型还是过于简单了，我们可以继承Table类做成结构体表格 ")]),_:1}),S,t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 妙啊，这样就可以进行表操作了！ ")]),_:1}),P,t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 可是，有个问题！UE好像不支持游戏运行时读写表格吧！ ")]),_:1}),t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 蓝图确实无法实现，但我们可以用C++写啊！而且实际开发中一般是调用现成的API来获取对应数据。 ")]),_:1}),U,x,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 一般公司里会有前后端大佬负责编写服务端逻辑，同时会暴露一些地址给你，你通过HTTP请求可以获取到对应的数据。例如这样的： ")]),_:1}),D,I,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 获取到数据一般是Json格式加密数据，我们需要通过特定手段解析成我们的游戏数据。这些数据有可能是临时的、也可能是持久的！ ")]),_:1}),R,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 然而，游戏对战却不是使用这种方式，UE有几套优化过的网络框架。（后续章节会有介绍） ")]),_:1}),t(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" 确实，如果按一个按键还要向服务器请求一个API，黄花菜都要凉了！ ")]),_:1}),t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 是的，不同的阶段地方使用不同的方式通信。 ")]),_:1}),A,t(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 然而这些数据并非空穴来风，需要一个远程物理机器保存，比如百度网盘能够保存你的文件数据，这里我们有专门的数据库和存储空间保存用户的个人信息。 ")]),_:1}),j])}const L=l(v,[["render",W],["__file","1-Data.html.vue"]]);export{L as default};
