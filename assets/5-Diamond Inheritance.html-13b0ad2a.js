import{_ as o,a as l,b as c}from"./cdcodedircheck-70ea68da.js";import{_ as i,r as u,o as d,c as r,d as e,w as t,b as n,e as p,a as s}from"./app-0b08f077.js";const k="/RenderDoc/assets/lxjc-cc237288.png",v="/RenderDoc/assets/scopeslover-0403ad84.png",m="/RenderDoc/assets/scoped.b-b5cc1725.jpg",b="/RenderDoc/assets/viruald.a-477f8e18.jpg",g="/RenderDoc/assets/CLASSD-cf1e614c.png",h="/RenderDoc/assets/vbtable-4ff7feb1.png",f="/RenderDoc/assets/tujie-e63db063.png",y="/RenderDoc/assets/virualdtable-727a3bd7.png",_="/RenderDoc/assets/hellob4bit-2cd5e9f7.png",w="/RenderDoc/assets/over-affb9f26.png",A="/RenderDoc/assets/WITHOUTOUVER-b9f87b7e.png",x="/RenderDoc/assets/jcwithoutoverride-7301c88d.png",j="/RenderDoc/assets/mutb-ea3c459c.png",B={},W=p(`<h2 id="菱形继承" tabindex="-1"><a class="header-anchor" href="#菱形继承" aria-hidden="true">#</a> 菱形继承</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataA<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataB<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataC<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataD<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),D=s("br",null,null,-1),q=s("br",null,null,-1),C=s("h3",{id:"作用域运算符",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#作用域运算符","aria-hidden":"true"},"#"),n(" 作用域运算符"),s("code",null,"::")],-1),L=s("p",null,[n("使用 "),s("strong",null,[n("作用域运算符"),s("code",null,"::")]),n(" 可以解决菱形继承问题。")],-1),z=p('<figure><img src="'+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataA<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataB<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataC<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
<span class="token keyword">int</span> dataD<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    D <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>dataA<span class="token punctuation">;</span><span class="token comment">//通过作用域运算符解析B作用域范围dataA</span>
    D <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>dataA<span class="token punctuation">;</span><span class="token comment">//通过作用域运算符解析C作用域范围dataA</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="虚继承" tabindex="-1"><a class="header-anchor" href="#虚继承" aria-hidden="true">#</a> 虚继承</h3>`,3),R=s("p",null,[n("使用 "),s("strong",null,"虚继承（Virtual Inheritance）："),n(" 可以解决菱形继承问题。")],-1),S=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataA<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataB<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataC<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> dataD<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),H=s("p",null,"使用虚继承应该根据具体情况来考虑，确保在解决继承二义性的同时不引入其他问题。",-1),V=s("ul",null,[s("li",null,"虚继承可能会引入一些额外的开销。"),s("li",null,"构造函数和析构函数的调用顺序可能会受到影响，需要特别小心。")],-1),I=s("h3",{id:"问题分析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#问题分析","aria-hidden":"true"},"#"),n(" 问题分析")],-1),T=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    D d<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>dataA <span class="token operator">=</span><span class="token number">10</span> <span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>C<span class="token double-colon punctuation">::</span>dataA <span class="token operator">=</span><span class="token number">20</span> <span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span>d<span class="token punctuation">.</span>B<span class="token double-colon punctuation">::</span>dataA <span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$=s("figure",null,[s("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),E=s("figure",null,[s("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),N=p('<figure><img src="'+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>打开工具并且cd到你的代码目录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> D:<span class="token punctuation">\\</span>UE5PJ2<span class="token punctuation">\\</span>CodeTest<span class="token punctuation">\\</span>ConsoleApplication1<span class="token punctuation">\\</span>ConsoleApplication1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>使用dir检查目录文件</li></ol><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li>输入命令 即可列出对象模型。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>cl /d1 reportSingleClassLayout类名 文件名.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="作用域运算符访问" tabindex="0" loading="lazy"><figcaption>作用域运算符访问</figcaption></figure><figure><img src="'+h+'" alt="虚继承" tabindex="0" loading="lazy"><figcaption>虚继承</figcaption></figure>',10),U=p(`<ol><li><p><strong>虚继承（Virtual Inheritance）：</strong> 虚继承是一种通过在继承关系中使用 <code>virtual</code> 关键字来解决菱形继承（Diamond Inheritance）问题的技术。它确保在继承链中只有一个共享的基类子对象，从而避免了二义性。在虚继承中，最终派生类只保留一个基类子对象的实例。</p></li><li><p><strong>虚基类（Virtual Base Class）：</strong> 虚基类是在菱形继承中被声明为虚继承的基类。在上面的例子中，<code>A</code> 就是一个虚基类。虚基类用于确保只有一个实例被保留在继承体系中，从而解决了二义性问题。</p></li><li><p><strong>虚表（Virtual Table，或称为vtable）：</strong> 虚表是用于实现动态多态性的一种机制。对于包含虚函数的类，编译器会在该类的对象中插入一个指向虚表的指针。虚表是一个表格，其中包含了该类所有虚函数的地址。当通过基类指针或引用调用虚函数时，实际执行的是虚表中相应函数的地址。</p></li><li><p><strong>虚指针（Virtual Pointer，或称为vptr）：</strong> 虚指针是一个指向虚表的指针。对于包含虚函数的类，每个对象都有一个虚指针，指向该对象对应的虚表。通过虚指针，程序能够在运行时确定调用的是哪个版本的虚函数。</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>class D size<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span>:
        +---
 <span class="token number">0</span>      <span class="token operator">|</span> +--- <span class="token punctuation">(</span>base class B<span class="token punctuation">)</span>
 <span class="token number">0</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">{</span>vbptr<span class="token punctuation">}</span>
 <span class="token number">4</span>      <span class="token operator">|</span> <span class="token operator">|</span> dataB
        <span class="token operator">|</span> +---
 <span class="token number">8</span>      <span class="token operator">|</span> +--- <span class="token punctuation">(</span>base class C<span class="token punctuation">)</span>
 <span class="token number">8</span>      <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">{</span>vbptr<span class="token punctuation">}</span>
<span class="token number">12</span>      <span class="token operator">|</span> <span class="token operator">|</span> dataC
        <span class="token operator">|</span> +---
<span class="token number">16</span>      <span class="token operator">|</span> dataD
        +---
        +--- <span class="token punctuation">(</span>virtual base A<span class="token punctuation">)</span>
<span class="token number">20</span>      <span class="token operator">|</span> dataA
        +---

D::<span class="token variable">$vbtable</span>@B@:
 <span class="token number">0</span>      <span class="token operator">|</span> <span class="token number">0</span>
 <span class="token number">1</span>      <span class="token operator">|</span> <span class="token number">20</span> <span class="token punctuation">(</span>Dd<span class="token punctuation">(</span>B+0<span class="token punctuation">)</span>A<span class="token punctuation">)</span>

D::<span class="token variable">$vbtable</span>@C@:
 <span class="token number">0</span>      <span class="token operator">|</span> <span class="token number">0</span>
 <span class="token number">1</span>      <span class="token operator">|</span> <span class="token number">12</span> <span class="token punctuation">(</span>Dd<span class="token punctuation">(</span>C+0<span class="token punctuation">)</span>A<span class="token punctuation">)</span>
vbi:       class  offset o.vbptr  o.vbte fVtorDisp
               A      <span class="token number">20</span>       <span class="token number">0</span>       <span class="token number">4</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),O=s("figure",null,[s("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),K=s("figure",null,[s("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),M=s("h2",{id:"多态-虚函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#多态-虚函数","aria-hidden":"true"},"#"),n(" 多态-虚函数")],-1),P=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, A!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
     <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, B!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span>A <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    B b<span class="token punctuation">;</span>
    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),J=p('<h3 id="编译期" tabindex="-1"><a class="header-anchor" href="#编译期" aria-hidden="true">#</a> 编译期：</h3><ol><li><p><strong>词法分析和语法分析：</strong> 源代码首先被分析成令牌（Token）和语法结构。</p></li><li><p><strong>语义分析：</strong> 编译器检查代码的语义是否正确，包括类型检查等。</p></li><li><p><strong>生成中间代码：</strong> 编译器生成中间代码，这是一种与硬件无关的表示。</p></li><li><p><strong>优化：</strong> 编译器进行各种优化，包括但不限于死代码消除、循环展开、内联等。</p></li><li><p><strong>代码生成：</strong> 编译器将中间代码转换成目标机器的汇编代码。</p></li></ol><h3 id="链接期" tabindex="-1"><a class="header-anchor" href="#链接期" aria-hidden="true">#</a> 链接期：</h3><ol><li><p><strong>目标文件生成：</strong> 汇编代码被汇编器转换成目标文件。</p></li><li><p><strong>符号解析：</strong> 链接器解析符号，将函数和变量的引用与其定义关联起来。</p></li><li><p><strong>地址绑定：</strong> 将符号引用绑定到实际的内存地址。这是绑定的一个阶段。</p></li></ol><h3 id="关于绑定" tabindex="-1"><a class="header-anchor" href="#关于绑定" aria-hidden="true">#</a> 关于绑定：</h3><ul><li><p><strong>早绑定（静态绑定）：</strong> 在编译期或链接期就已经确定了调用的函数或变量的地址。这是在程序执行之前就完成的绑定。C++ 默认采用早绑定。</p></li><li><p><strong>晚绑定（动态绑定）：</strong> 在运行时确定调用的函数或变量的地址。这通常涉及虚函数和虚表的机制。在 C++ 中，使用 <code>virtual</code> 关键字声明的虚函数就是为了实现晚绑定。晚绑定是通过虚表和虚指针的机制来实现的。</p></li></ul>',6),F=s("p",null,[n("代码中，"),s("code",null,"speak"),n(" 函数的参数类型是 "),s("code",null,"A*"),n("，即一个指向 "),s("code",null,"A"),n(" 类对象的指针。 当你将 "),s("code",null,"B"),n(" 类的对象传递给 "),s("code",null,"speak"),n(" 函数时，尽管你传递的是 "),s("code",null,"B"),n(" 类对象的地址， 但是编译器在编译期就已经知道这是一个 "),s("code",null,"A"),n(" 类对象的指针，所以它会选择调用 "),s("code",null,"A"),n(" 类中的 "),s("code",null,"speak"),n(" 函数。 这就是早绑定的过程，因为在编译期就已经确定了调用的函数。")],-1),G=s("p",null,[n("不是已经说了吗！要实现晚绑定，需要在基类的虚函数声明中使用 "),s("code",null,"virtual"),n(" 关键字，并在派生类中使用 "),s("code",null,"override"),n(" 关键字， 这样在运行时将根据对象的实际类型来调用相应的虚函数，实现了动态多态性。")],-1),Q=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, A!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, B!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span>A <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    B b<span class="token punctuation">;</span>
    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;Hello, B!&quot;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),X=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, A!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, B!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span>A <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    B b<span class="token punctuation">;</span>
    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;Hello, B!&quot;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y=s("figure",null,[s("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),Z=s("figure",null,[s("img",{src:w,alt:"虚函数继承重写",tabindex:"0",loading:"lazy"}),s("figcaption",null,"虚函数继承重写")],-1),nn=s("figure",null,[s("img",{src:A,alt:"没有虚函数",tabindex:"0",loading:"lazy"}),s("figcaption",null,"没有虚函数")],-1),sn=s("figure",null,[s("img",{src:x,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),an=s("h2",{id:"多态-纯虚函数",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#多态-纯虚函数","aria-hidden":"true"},"#"),n(" 多态-纯虚函数")],-1),en=p(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//此时A类已经变成抽象类</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, B!&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token comment">//必须重写，否则也是抽象类</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span>A <span class="token operator">*</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        a<span class="token operator">-&gt;</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    A a<span class="token punctuation">;</span><span class="token comment">//报错，因为现在a是抽象类。 </span>
    B b<span class="token punctuation">;</span>
    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;Hello, B!&quot;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+j+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="多态总结" tabindex="-1"><a class="header-anchor" href="#多态总结" aria-hidden="true">#</a> 多态总结</h2>',3),tn=p(`<ol><li><p><strong>灵活性和可扩展性：</strong> 多态性使得代码更加灵活和可扩展。通过使用基类指针或引用调用派生类对象的虚函数，可以在运行时动态选择执行不同的函数实现。这样，在不修改已有代码的情况下，可以轻松地添加新的派生类，使得系统更具扩展性。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 基类的虚函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        <span class="token comment">// 派生类的虚函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Shape</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        <span class="token comment">// 另一个派生类的虚函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>隐藏细节：</strong> 多态性隐藏了对象的具体类型，使得程序员可以使用基类的接口来操作对象，而无需关心对象的实际类型。这种抽象和封装的特性使得代码更易于维护和理解。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">drawShape</span><span class="token punctuation">(</span>Shape<span class="token operator">*</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    shape<span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用虚函数，根据实际对象类型执行不同的绘制操作</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Circle circle<span class="token punctuation">;</span>
    Square square<span class="token punctuation">;</span>

    <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 Circle 的 draw 函数</span>
    <span class="token function">drawShape</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>square<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用 Square 的 draw 函数</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="多态分为两类" tabindex="-1"><a class="header-anchor" href="#多态分为两类" aria-hidden="true">#</a> 多态分为两类</h3><ul><li>静态多态：函数重载和运算符重载属于静态多态，复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><h3 id="静态多态和动态多态区别" tabindex="-1"><a class="header-anchor" href="#静态多态和动态多态区别" aria-hidden="true">#</a> 静态多态和动态多态区别：</h3><ul><li>静态多态的函数地址早绑定-编译阶段确定函数地址</li><li>动态多态的函数地址晚绑定-运行阶段确定函数地址</li></ul><h2 id="多态-虚析构-纯虚析构" tabindex="-1"><a class="header-anchor" href="#多态-虚析构-纯虚析构" aria-hidden="true">#</a> 多态-虚析构|纯虚析构</h2><h3 id="虚析构函数" tabindex="-1"><a class="header-anchor" href="#虚析构函数" aria-hidden="true">#</a> 虚析构函数：</h3><ol><li><p><strong>定义：</strong> 虚析构函数是在基类中声明为虚函数的析构函数。通过在基类中使用 <code>virtual</code> 关键字声明析构函数，可以实现在派生类对象销毁时调用正确的析构函数，确保释放派生类对象所占用的资源。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 基类的析构函数</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>多态性：</strong> 虚析构函数使得在通过基类指针或引用删除派生类对象时，会调用正确的派生类析构函数。这是通过运行时动态绑定实现的，确保正确释放对象的资源。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Base<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">;</span>  <span class="token comment">// 调用 Derived 类的析构函数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="纯虚析构函数" tabindex="-1"><a class="header-anchor" href="#纯虚析构函数" aria-hidden="true">#</a> 纯虚析构函数：</h3><ol><li><p><strong>定义：</strong> 纯虚析构函数是一个纯虚函数，且它是类的析构函数。通过在基类中声明纯虚析构函数，可以使基类成为抽象类，无法实例化对象。派生类必须实现该纯虚析构函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">AbstractBase</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">AbstractBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">AbstractBase</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">AbstractBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 纯虚析构函数的定义</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>抽象类：</strong> 含有纯虚析构函数的类成为抽象类，它不能被实例化。任何继承自抽象类的派生类都必须实现该纯虚析构函数，否则它们也会变成抽象类。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">AbstractBase</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token operator">~</span><span class="token function">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>
        <span class="token comment">// 派生类的析构函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>使用虚析构函数和纯虚析构函数的目的是确保在继承层次结构中正确释放资源，并在派生类中提供必要的析构函数实现。这样可以防止资源泄漏和确保正确的对象销毁。</p>`,11);function pn(on,ln){const a=u("ChatMessage");return d(),r("div",null,[e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" Baba我遇到了奇怪问题！但我用下面的代码中`D`访问 `dataA`编译器会报错！ ")]),_:1}),W,e(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 看来你这是遇到菱形继承（钻石继承）问题了！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 什么意思？什么是菱形继承？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 指一个派生类继承自两个直接或间接共同基类，形成了一个类似菱形的继承结构。"),D,n("你的D继承了B和C，他们都间接或直接继承A。"),q,n(" 这时候你去访问`dataA`，编译器会产生二义性，因为有两条路径可以到达 `A` 类，一条是通过 `B`，一条是通过 `C`。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 那该怎么解决呢？ ")]),_:1}),C,e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[L]),_:1}),z,e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[R]),_:1}),S,e(a,{avatar:"../../../assets/emoji/new5.png",avatarWidth:40,alignLeft:""},{default:t(()=>[H,V]),_:1}),I,e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 可是有个问题，方法1作用域运算符可以直接用为什么还用用方法2的虚继承呢？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 你试着打印先通过B和C访问修改dataA后再打印通过B访问dataA结果，告诉我发生了什么？ ")]),_:1}),T,e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 咦？为什么dataA没有变成20！ ")]),_:1}),$,e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 你再康康虚继承打印结果 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 变了！好神奇这是为什么？ ")]),_:1}),E,e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 可以借助编译器工具分析比对这两种写法区别。 ")]),_:1}),N,e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 普通继承函数好像每次都会独立继承dataA,而虚继为什么dataA不见了？出现了一个vbptr? ")]),_:1}),e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 这些其实是多态继承中的一个虚表概念。 ")]),_:1}),U,e(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 我开始晕了！完全看不懂！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 首先你应该搞懂一个概念，指针是一个存储地址的变量。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 这个我明白！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" OK,那么这里的vbptr就是一个虚表指针，指向虚表 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 这个我也明白了！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 上图中，是类D的内存分布，他的基类是B和C，他的虚基类是A。每个基类都有一个虚表指针 vbptr，指向相应的虚表。 ")]),_:1}),O,K,e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 虚指针都在修改指向的dataA的值，意味着无论通过B还是C去修改都已经操作修改了dataA,这和普通的继承多次复制出现了本质区别。 ")]),_:1}),M,e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" oK！现在我们已经通过虚继承解决了菱形多继承问题，现在我们我们来思考另外一个问题前，我们先移除菱形结构中的D类，然后在所有父子类中都添加一个同名函数。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 别了吧！我懒得思考。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 问题很简单，A和B都有一个speak函数，B继承自A。此时调用全局的speak写的参数列表中是A的对象引用，但我实际参数传入B对象，你觉得最终会打印什么？ ")]),_:1}),P,e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(' 这还用想，肯定是打印B的 "Hello, B!"咯。 ')]),_:1}),e(a,{avatar:"../../../assets/emoji/new2.png",avatarWidth:55,alignLeft:""},{default:t(()=>[n(" 回答错误，请认真思考！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(' 为什么打印的是A的"Hello, A!" ')]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 由于 speak 函数的参数类型是 A*，这是一个指向 A 类对象的指针， 所以编译器在编译时会选择调用 A 类中的 speak 函数。属于早绑定的情况。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 您能不能别总是很突兀的冒出新的专业术语？什么叫早绑定？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 看来咱们需要补一下编译方面的知识，编译流程包括了源代码到可执行文件的多个阶段，其中和绑定有关的是编译期和链接期。 ")]),_:1}),J,e(a,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:t(()=>[F]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 那么是不是改成晚绑定就行了？怎么做呢？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/new2.png",avatarWidth:55,alignLeft:""},{default:t(()=>[G]),_:1}),Q,e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[n(" 不严谨！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb01.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 为什么不严谨？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[n(" 你没判断空指针的情况。 ")]),_:1}),X,e(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 有进步！那么你觉得现在class B的sizeof是多少？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" B是一个类，函数和类分开存储，也就是说这是一个空类只占1个字节。 ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 你打印康康！ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 为什么32下运行是4? ")]),_:1}),Y,e(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 还记得之前咱们虚继承中说的虚指针的概念嘛？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 我明白了！意味着这里用了 virtual函数，也拥有了一个虚指针？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 用开发者编译工具康康不就行知道了! ")]),_:1}),Z,nn,e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 现在这个虚指针好像不再指向vbtable，而是vftable莫非是虚函数表？ ")]),_:1}),e(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 是的。不过要注意的是，一旦父类使用了虚函数，你继承后无论重写不重写都会有虚指针。 ")]),_:1}),sn,an,e(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 父类中，虚函数很多时候往往只需要一个声明，而不需要定义，这时候可以改成纯虚函数的写法来优化。 但要注意，这时候这个类就变成了抽象类，无法实例化。这也是UE中接口重要的实现方法。 ")]),_:1}),en,e(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 如果说virtual关键字在虚继承解决了菱形继承问题，那么virtual关键字在多态的时候解决了更多的问题！ ")]),_:1}),n(" 多态性解决了在继承层次结构中的两个主要问题： "),tn])}const dn=i(B,[["render",pn],["__file","5-Diamond Inheritance.html.vue"]]);export{dn as default};
