import{_ as e,r as a,o as s,c as o,d as c,w as n,a as t,b as d,e as i}from"./app-cfb3cdd8.js";const h={},l=t("h3",{id:"stl",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#stl","aria-hidden":"true"},"#"),d(" STL")],-1),_=i('<h3 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件" aria-hidden="true">#</a> 核心组件</h3><table><thead><tr><th>类别</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>容器（Containers）</td><td>vector</td><td>动态数组，支持快速随机访问和尾部插入操作。</td></tr><tr><td></td><td>list</td><td>双向链表，支持在任意位置插入和删除操作。</td></tr><tr><td></td><td>deque</td><td>双端队列，支持在两端快速插入和删除操作。</td></tr><tr><td></td><td>queue</td><td>队列，先进先出（FIFO）数据结构。</td></tr><tr><td></td><td>stack</td><td>栈，后进先出（LIFO）数据结构。</td></tr><tr><td></td><td>set</td><td>集合，元素唯一，有序。</td></tr><tr><td></td><td>map</td><td>映射，键-值对的集合，键唯一，有序。</td></tr><tr><td></td><td>unordered_set</td><td>无序集合，元素唯一。</td></tr><tr><td></td><td>unordered_map</td><td>无序映射，键-值对的集合，键唯一。</td></tr><tr><td></td><td>stack</td><td>栈，后进先出（LIFO）数据结构。</td></tr><tr><td>迭代器（Iterators）</td><td>input_iterator</td><td>用于遍历序列的输入迭代器。</td></tr><tr><td></td><td>output_iterator</td><td>用于向序列写入的输出迭代器。</td></tr><tr><td></td><td>forward_iterator</td><td>单向遍历序列的迭代器，支持逐个增加。</td></tr><tr><td></td><td>bidirectional_iterator</td><td>双向遍历序列的迭代器，支持逐个增加或逐个减少。</td></tr><tr><td></td><td>random_access_iterator</td><td>随机访问序列的迭代器，支持直接跳跃访问。</td></tr><tr><td>算法（Algorithms）</td><td>sort</td><td>对序列进行排序。</td></tr><tr><td></td><td>find</td><td>在序列中查找特定元素。</td></tr><tr><td></td><td>transform</td><td>对序列进行变换操作。</td></tr><tr><td></td><td>accumulate</td><td>计算序列元素的累积值。</td></tr><tr><td></td><td>for_each</td><td>对序列的每个元素执行指定操作。</td></tr><tr><td>适配器（Adapters）</td><td>stack</td><td>适配器，将栈的操作添加到其他容器上。</td></tr><tr><td></td><td>queue</td><td>适配器，将队列的操作添加到其他容器上。</td></tr><tr><td></td><td>priority_queue</td><td>适配器，将优先队列的操作添加到其他容器上。</td></tr><tr><td>仿函数（Functors）</td><td>less</td><td>二元谓词，用于比较两个元素。</td></tr><tr><td></td><td>greater</td><td>二元谓词，用于比较两个元素。</td></tr><tr><td></td><td>plus</td><td>二元函数对象，实现加法。</td></tr><tr><td></td><td>minus</td><td>二元函数对象，实现减法。</td></tr><tr><td></td><td>negate</td><td>一元函数对象，实现取反。</td></tr><tr><td>空间配置器（Allocators）</td><td>allocator</td><td>分配和释放内存的对象。</td></tr><tr><td></td><td>allocator_traits</td><td>提供对分配器属性和操作的访问。</td></tr></tbody></table>',2);function u(m,f){const r=a("chatmessage");return s(),o("div",null,[l,c(r,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:n(()=>[d(" C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。 ")]),_:1}),_])}const b=e(h,[["render",u],["__file","2-stl.html.vue"]]);export{b as default};
