import{_ as c,a as p}from"./gamemodeinclue-310fc6c6.js";import{_ as u,r as o,o as h,c as m,d as e,w as s,a as n,b as a,e as l}from"./app-fe20462d.js";const _="/RenderDoc/assets/helloworldUE-41c43e32.jpg",b="/RenderDoc/assets/newcppclass-9d55c7f1.png",d="/RenderDoc/assets/actorpublicobject-cd1e639f.jpg",v="/RenderDoc/assets/UEpakage-0c99c34e.jpg",g="/RenderDoc/assets/slate-9b7fdbc4.jpg",k="/RenderDoc/assets/GameFramework-d1ad3780.jpg",f="/RenderDoc/assets/UEComponent-d7ede08e.png",y="/RenderDoc/assets/subsystems-fbfd5b27.jpg",U="/RenderDoc/assets/carbagecollection-1f23cf87.png",C="/RenderDoc/assets/libexpcpp-2f87f6af.jpg",E="/RenderDoc/assets/IDEgenerate def-9b5715a4.jpg",q="/RenderDoc/assets/ideaicode2-14207711.jpg",S="/RenderDoc/assets/testhelloworld-e6cf4ebe.png",w="/RenderDoc/assets/testfunlist-a2d85ff2.jpg",x="/RenderDoc/assets/successhelloworld-884e34d3.png",T={},j=n("h2",{id:"实现目标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实现目标","aria-hidden":"true"},"#"),a(" 实现目标")],-1),A=n("h2",{id:"开始实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开始实践","aria-hidden":"true"},"#"),a(" 开始实践")],-1),P=n("h2",{id:"_1-新建一个cpp工程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-新建一个cpp工程","aria-hidden":"true"},"#"),a(" 1. 新建一个CPP工程")],-1),W=n("figure",null,[n("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),R=n("blockquote",null,[n("p",null,"如果你不会CPP建议你去下方查考链接观看CPP基础教程，或者等我的CPP入门介绍篇。")],-1),B=n("h2",{id:"_2-等待编译并启动项目-点击工具-新建c-类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-等待编译并启动项目-点击工具-新建c-类","aria-hidden":"true"},"#"),a(" 2. 等待编译并启动项目，点击工具-新建C++类")],-1),D=n("figure",null,[n("img",{src:b,alt:"newcppclass.png",tabindex:"0",loading:"lazy"}),n("figcaption",null,"newcppclass.png")],-1),I=n("blockquote",null,[n("p",null,"然后你可以看到：")],-1),G=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),z=n("hr",null,null,-1),M=n("h2",{id:"upk-ue包文件组成",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#upk-ue包文件组成","aria-hidden":"true"},"#"),a(" UPK|UE包文件组成")],-1),H=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O=n("blockquote",null,[n("p",null,"从Unreal Engine 4（UE4）开始，UPK 文件被替代为更先进的Unreal Asset文件格式（.uasset）和Unreal Asset Registry（.uassetregistry）等。 UPK 文件仍然存在于早期版本的Unreal Engine中。")],-1),N=n("h2",{id:"uobject-ue对象",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uobject-ue对象","aria-hidden":"true"},"#"),a(" UObject|UE对象")],-1),V=n("ul",null,[n("li",null,"在 Unreal Engine 中，几乎所有的对象都继承自 UObject，包括角色、物体、组件、纹理、材质等等。"),n("li",null,"UObject 提供了许多基本的功能和特性，例如内存管理、反射（Reflection）、属性系统、蓝图扩展等。")],-1),F=n("figure",null,[n("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),L=n("figure",null,[n("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),K=n("h2",{id:"ue-gameplay框架",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue-gameplay框架","aria-hidden":"true"},"#"),a(" UE-GamePlay框架")],-1),X=n("span",{style:{color:"red"}},[n("a",{href:"#_1gameplay框架-gamemode"},"游戏规则 ①-②"),a(" +"),n("a",{href:"#_3-camera-游戏相机"},"3C③-⑤"),a(" +"),n("a",{href:"#_6-gameui-游戏ui"},"界面⑥"),a(" = GamePlay")],-1),Y=n("figure",null,[n("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),J=n("p",null,"摘自官方文档：",-1),$=n("blockquote",null,[n("p",null,[a("此流程图演示了这些核心Gameplay类彼此之间的关系。 "),n("br"),a("一个游戏由一个GameMode和一个GameState构成。 "),n("br"),a("加入游戏的人类玩家与PlayerController关联。 "),n("br"),a("这些PlayerController允许玩家持有游戏中的Pawn，以便在关卡中有物理表示。 "),n("br"),a("PlayerController还为玩家提供了输入功能按钮、平视显示器（简称HUD）和用于处理摄像机视图的PlayerCameraManager。")])],-1),Q=n("span",{style:{color:"orangered"}},"Character（角色）、Control（控制）和Camera（摄像机）",-1),Z=n("h3",{id:"_1gameplay框架-gamemode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1gameplay框架-gamemode","aria-hidden":"true"},"#"),a(" ①GamePlay框架/GameMode")],-1),nn=n("ul",null,[n("li",null,[a("AGameModeBase (public AInfo) "),n("ul",null,[n("li",null,[a("AInfo (public AActor) "),n("ul",null,[n("li",null,"AActor (public UObject)")])])])])],-1),an=l('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>生成的类打开后</p></blockquote><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>类别</th><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>APawn class</td><td>游戏中的角色</td><td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td></tr><tr><td>AHUD class</td><td>Heads-Up Display (HUD)</td><td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td></tr><tr><td>APlayerController class</td><td>玩家控制器</td><td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td></tr><tr><td>AGameState class</td><td>游戏状态</td><td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td></tr><tr><td>APlayerState class</td><td>玩家状态</td><td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td></tr><tr><td>ASpectatorPawn class</td><td>观察者角色</td><td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td></tr></tbody></table>',4),en=n("hr",null,null,-1),sn=n("h3",{id:"_2-gamestate-游戏状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-gamestate-游戏状态","aria-hidden":"true"},"#"),a(" ② GameState|游戏状态")],-1),tn=n("ul",null,[n("li",null,[a("AGameStateBase (public AInfo) "),n("ul",null,[n("li",null,[a("AInfo (public AActor) "),n("ul",null,[n("li",null,"AActor (public UObject)")])])])])],-1),ln=n("hr",null,null,-1),on=n("h3",{id:"_3-camera-游戏相机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-camera-游戏相机","aria-hidden":"true"},"#"),a(" ③ Camera|游戏相机")],-1),rn=n("hr",null,null,-1),dn=n("h3",{id:"_4-character-游戏角色",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-character-游戏角色","aria-hidden":"true"},"#"),a(" ④ Character|游戏角色")],-1),cn=n("hr",null,null,-1),pn=n("h3",{id:"_5-controller-控制器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-controller-控制器","aria-hidden":"true"},"#"),a(" ⑤ Controller|控制器")],-1),un=n("hr",null,null,-1),hn=n("h3",{id:"_6-gameui-游戏ui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-gameui-游戏ui","aria-hidden":"true"},"#"),a(" ⑥ GameUI|游戏UI")],-1),mn=n("hr",null,null,-1),_n=n("h3",{id:"component-组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#component-组件","aria-hidden":"true"},"#"),a(" Component|组件")],-1),bn=l('<figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>组件类型</th><th>功能和用途</th></tr></thead><tbody><tr><td>UStaticMeshComponent</td><td>渲染静态网格模型，如墙、地板等</td></tr><tr><td>USkeletalMeshComponent</td><td>渲染有骨骼的网格模型，适用于角色和生物</td></tr><tr><td>UCameraComponent</td><td>创建摄像机视图，用于玩家或观察</td></tr><tr><td>ULightComponentBase</td><td>创建不同类型的光源，如点光源、聚光灯等</td></tr><tr><td>UParticleSystemComponent</td><td>播放粒子系统，创建特效如火焰、爆炸等</td></tr><tr><td>UAudioComponent</td><td>播放声音，附加到物体上产生音效</td></tr><tr><td>UCollisionComponent</td><td>处理碰撞和触发事件，可以是基本碰撞体或区域</td></tr><tr><td>UInputComponent</td><td>处理玩家输入，如按键和鼠标事件</td></tr><tr><td>USceneComponent</td><td>在场景中构建组件层次结构，可作为父组件</td></tr><tr><td>UWidgetComponent</td><td>将2D UI嵌入3D世界，显示UMG部件</td></tr></tbody></table>',2),vn=n("a",{href:"./2-UE_Blueprint2CPP.html"},"几种查看蓝图节点对应C++类的几种方法！",-1),gn=n("h2",{id:"subsystem-子系统",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#subsystem-子系统","aria-hidden":"true"},"#"),a(" Subsystem|子系统")],-1),kn=l('<table><thead><tr><th>子系统</th><th>继承自的类</th></tr></thead><tbody><tr><td>引擎子系统</td><td>UEngineSubsystem 类</td></tr><tr><td>编辑器子系统</td><td>UEditorSubsystem 类</td></tr><tr><td>游戏实例子系统</td><td>UGameInstanceSubsystem 类</td></tr><tr><td>本地玩家子系统</td><td>ULocalPlayerSubsystem 类</td></tr></tbody></table><blockquote><p>当引擎子系统的模块加载时，子系统将在模块的 Startup() 函数返回后执行 Initialize()，子系统将在模块的 Shutdown() 函数返回后执行 Deinitialize()。</p></blockquote><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>目录：Engine\\Source\\Runtime\\Engine\\Public\\Subsystems\\</p></blockquote>',4),fn=n("strong",null,"延展阅读|单例（Singleton）",-1),yn=n("blockquote",null,[n("p",null,[a("在UE中，子系统（Subsystem）通常是以单例（Singleton）的形式存在的。 "),n("br"),a("这意味着在游戏或编辑器的运行过程中，每个子系统只会有一个实例存在，而不会创建多个相同类型的实例。")])],-1),Un=n("h2",{id:"ue-refection-ue反射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue-refection-ue反射","aria-hidden":"true"},"#"),a(" UE-Refection|UE反射")],-1),Cn=n("blockquote",null,[n("p",null,"篇幅限制，这里不做反射的深入，具体可以看后续的反射机制篇。")],-1),En={href:"https://docs.unrealengine.com/5.3/zh-CN/reflection-system-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},qn=n("blockquote",null,[n("p",null,"不会吧不会吧！还有人不知道宏是什么？自行百度吧！")],-1),Sn=n("h2",{id:"uht-unreal-header-tool-虚幻头文件工具",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#uht-unreal-header-tool-虚幻头文件工具","aria-hidden":"true"},"#"),a(" UHT|Unreal Header Tool（虚幻头文件工具）")],-1),wn=l(`<div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 源代码
    <span class="token list punctuation">-</span> 用户编写包含特定宏和标记的UE4 C++ 代码。

<span class="token list punctuation">2.</span> UHT扫描
    <span class="token list punctuation">-</span> UHT在构建项目时扫描头文件，寻找特定的宏和标记。

<span class="token list punctuation">3.</span> 生成反射信息
    <span class="token list punctuation">-</span> UHT使用找到的宏和标记生成反射信息，包括类的成员变量和成员函数。

<span class="token list punctuation">4.</span> 生成代码框架
    <span class="token list punctuation">-</span> 除了反射信息，UHT也可以根据宏和标记生成一些代码框架，以辅助实现类的功能。

<span class="token list punctuation">5.</span> 传递给编译器
    <span class="token list punctuation">-</span> 生成的反射信息和代码框架将传递给C++编译器，它们会被合并到最终的编译过程中。

<span class="token list punctuation">6.</span> 构建项目
    <span class="token list punctuation">-</span> 编译器将所有的源代码和生成的代码一起编译成可执行文件。

<span class="token list punctuation">7.</span> 运行游戏
    <span class="token list punctuation">-</span> 最终生成的可执行文件可以在UE4引擎中运行，实现用户在代码中定义的功能。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常会在一个类的头文件中包含一个以 .generated.h 结尾的文件， 例如 MyClass.generated.h。</li><li>这个文件包含了由UHT生成的代码，通常用于实现反射信息、蓝图节点以及其他与类相关的元数据。</li><li>默认情况下，UE会使用Microsoft Visual C++(MSVC)作为主要的编译工具,这里我们用Rider连接MSVC（IDE自动完成）。</li></ul><figure><img src="`+U+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),xn={href:"https://www.bilibili.com/video/BV1EM411U7PX?p=36&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},Tn=n("h3",{id:"ue-specifiers-ue类说明符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ue-specifiers-ue类说明符","aria-hidden":"true"},"#"),a(" UE-Specifiers|UE类说明符")],-1),jn={href:"https://docs.unrealengine.com/5.3/zh-CN/gameplay-classes-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},An=n("h2",{id:"_3-选择蓝图函数库类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-选择蓝图函数库类","aria-hidden":"true"},"#"),a(" 3. 选择蓝图函数库类")],-1),Pn=l('<figure><img src="'+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>因为我们只是想打印一条简单的HelloWorld,又不想挂载在Actor上，最终决定先写在蓝图函数库中。</p></blockquote><h2 id="_4-分析系统生成的cpp文件。" tabindex="-1"><a class="header-anchor" href="#_4-分析系统生成的cpp文件。" aria-hidden="true">#</a> 4. 分析系统生成的cpp文件。</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token comment">/**
 * 
 */</span>
<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开TEST.generated.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 版权归 Epic Games, Inc. 所有。保留所有权利。</span>
<span class="token comment">/*===========================================================================
	从UnrealHeaderTool导出的生成代码。
	请勿手动修改！请编辑相应的.h文件！
===========================================================================*/</span>

<span class="token comment">// IWYU pragma: private, include &quot;TEST.h&quot;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ObjectMacros.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ScriptMacros.h&quot;</span></span>

PRAGMA_DISABLE_DEPRECATION_WARNINGS
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXORCIST_TEST_generated_h</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;TEST.generated.h 已经被包含，TEST.h 中缺少 &#39;#pragma once&#39;&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXORCIST_TEST_generated_h</span></span>

<span class="token comment">//后续省略.....</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Wn=l(`<h2 id="_5-新建一个helloworld函数" tabindex="-1"><a class="header-anchor" href="#_5-新建一个helloworld函数" aria-hidden="true">#</a> 5. 新建一个HelloWorld函数</h2><blockquote><p>TEST.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>

<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	
	<span class="token comment">//测试函数打印HelloWorld</span>
	
	<span class="token comment">//使用UFUNCTION红标记，BlueprintCallable让UE反射系统能够反射成蓝图调用。</span>
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>
	
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>具体的宏标记请<a href="#ue-specifiers-ue%E7%B1%BB%E8%AF%B4%E6%98%8E%E7%AC%A6">阅读我的</a></p></blockquote><h2 id="_6-对应的函数实现输出helloworld" tabindex="-1"><a class="header-anchor" href="#_6-对应的函数实现输出helloworld" aria-hidden="true">#</a> 6. 对应的函数实现输出HelloWorld</h2><blockquote><p>可以借助IDE生成对应函数定义。</p></blockquote><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>TEST.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token class-name">UTEST</span><span class="token double-colon punctuation">::</span><span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	GEngine<span class="token operator">-&gt;</span><span class="token function">AddOnScreenDebugMessage</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5.f</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+q+'" alt="ideaicode2.jpg" tabindex="0" loading="lazy"><figcaption>ideaicode2.jpg</figcaption></figure>',10),Rn=n("h2",{id:"_6-编译-在关卡蓝图检验。",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-编译-在关卡蓝图检验。","aria-hidden":"true"},"#"),a(" 6. 编译，在关卡蓝图检验。")],-1),Bn=n("figure",null,[n("img",{src:S,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Dn=n("figure",null,[n("img",{src:w,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),In=n("blockquote",null,[n("p",null,"因为我们的函数中没有加入参数，所以对应生成的蓝图节点也没有输入输出节点。")],-1),Gn=n("h2",{id:"_7-运行查看成果",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-运行查看成果","aria-hidden":"true"},"#"),a(" 7.运行查看成果！")],-1),zn=n("figure",null,[n("img",{src:x,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),Mn=n("h2",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),a(" 参考链接")],-1),Hn=n("thead",null,[n("tr",null,[n("th",null,"课程名"),n("th",null,"类型"),n("th",null,"链接")])],-1),On=n("td",null,"2023最新版C++",-1),Nn=n("td",null,"C++基础",-1),Vn={href:"https://www.bilibili.com/video/BV1eL41187JS/?spm_id_from=333.999.0.0&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},Fn=n("td",null,"【Cherno C++】",-1),Ln=n("td",null,"C++基础",-1),Kn={href:"https://www.bilibili.com/video/BV1fP4y1w7iE/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},Xn=n("td",null,"为游戏编程学习C++",-1),Yn=n("td",null,"C++基础",-1),Jn={href:"https://www.bilibili.com/video/BV1Dd4y1R7VS/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},$n=n("td",null,"字节跳动最新打造的C++教程",-1),Qn=n("td",null,"C++基础",-1),Zn={href:"https://www.bilibili.com/video/BV1ps4y1k7d7/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},na=n("td",null,"Udemy宝藏数据结构与算法课",-1),aa=n("td",null,"C++算法",-1),ea={href:"https://www.bilibili.com/video/BV1Ba411Y71K/?spm_id_from=333.337.top_right_bar_window_custom_collection.content.click",target:"_blank",rel:"noopener noreferrer"};function sa(ta,ia){const t=o("ChatMessage"),r=o("RouterLink"),i=o("ExternalLinkIcon");return h(),m("div",null,[j,e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:s(()=>[a(" 了解基本UE基础概念，并尝试第一个使用CPP写的蓝图节点在屏幕上输出HelloWorld! ")]),_:1}),A,P,e(t,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40},{default:s(()=>[a(" 什么你不会CPP!巧了我也不会！ ")]),_:1}),W,R,B,e(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" BABA用了Rider已经回不去了,如果你用VS这里是将是刷新VS项目。 ")]),_:1}),D,I,e(t,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:s(()=>[a(" 看不懂，根本看不懂。 ")]),_:1}),G,e(t,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40},{default:s(()=>[a(" 很好！下一步之前需要搞清楚几个基本概念 ")]),_:1}),z,M,e(t,{avatar:"../../assets/emoji/bqb (7).png",avatarWidth:40},{default:s(()=>[a(" Unreal Package 文件，它是Unreal Engine（虚幻引擎）中用于存储游戏资源和数据的一种文件格式。 ")]),_:1}),H,O,N,e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[a(" UObject 是 Unreal Engine 中所有对象的基类。 ")]),_:1}),V,e(t,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:s(()=>[a(" 例如：actor继承自UObject ")]),_:1}),F,e(t,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:s(()=>[a(" 对比蓝图版，C++类中多了许多类，这也是C++比蓝图自由度更高的原因。 ")]),_:1}),L,K,e(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" 字面翻译来说是玩法，也就是所谓的规则（GameMode），更深入点 "),X]),_:1}),Y,J,$,e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:s(()=>[a(" 3C也就是所谓的"),Q]),_:1}),Z,nn,e(t,{avatar:"../../assets/emoji/bqb02.png",avatarWidth:40},{default:s(()=>[a(" GameMode（游戏模式）是一个非常重要的类，它决定了游戏的规则、逻辑和行为。 ")]),_:1}),an,n("p",null,[e(r,{to:"/src/unreal/unrealcpp/3-UE_CPP_GameMode.html"},{default:s(()=>[a("cpp中绑定GameMode")]),_:1})]),en,sn,tn,e(t,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:s(()=>[a(" Game State 就是指游戏状态。它管理了所有已连接的客户端，并且实时追踪游戏层面的属性并把它们分发给远程客户端。 ")]),_:1}),ln,on,e(t,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40},{default:s(()=>[a(" 3C之一Camera ")]),_:1}),rn,dn,e(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:s(()=>[a(" 3C之一Character ")]),_:1}),cn,pn,e(t,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40},{default:s(()=>[a(" 3C之一Controller ")]),_:1}),un,hn,e(t,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:s(()=>[a(" 比如血条、切枪图标等。 ")]),_:1}),mn,_n,e(t,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:s(()=>[a(" 组件 是一种特殊类型的 对象，Actor 可以将组件作为子对象附加到自身。组件适用于共享相同的行为，例如显示视觉表现、播放声音 ")]),_:1}),bn,e(t,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:s(()=>[a(" 记不住根本记不住！这里BABA推荐你"),vn]),_:1}),gn,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:s(()=>[a(" 子系统是一组在整个引擎中提供特定功能的类和接口，它们可以独立于Gameplay框架存在并提供额外的功能和服务。后续会有实践篇，更加深入体验一下。 ")]),_:1}),kn,n("p",null,[e(r,{to:"/unreal/unrealcpp/4-UE_CPP_Singleton.html"},{default:s(()=>[fn]),_:1})]),yn,Un,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:s(()=>[a(" C++中并没有类似JAVA的反射机制，但EpicBABA的UE引擎已经帮我们实现了。 ")]),_:1}),Cn,n("p",null,[a("可以先参考"),n("a",En,[a("官方文档"),e(i)])]),e(t,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:s(()=>[a(" 简单来说虚幻引擎反射系统 使用宏为提供引擎和编辑器各种功，封装你的类。在使用 虚幻引擎（UE） 时，可以使用标准的C++类、函数和变量。 ")]),_:1}),qn,Sn,e(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:s(()=>[a(" UHT是一个用于生成C++类和相关代码的预处理器工具，它将特定的宏和标记解析成C++代码，以便在编译时构建项目。大致流程如下： ")]),_:1}),wn,n("p",null,[a("图片截取自"),n("a",xn,[a("图片截取自ARRG从入门到进阶P36"),e(i)])]),Tn,e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[a(" 是 Unreal Engine 中用于声明和定义类、变量、函数等的一组宏标记（macros）。 ")]),_:1}),n("blockquote",null,[n("p",null,[a("具体可以参考"),n("a",jn,[a("官方文档"),e(i)]),a("或者我写的unreal-Specifiers")])]),An,e(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" 是不是已经快要忘记咱们的主线任务啦！ ")]),_:1}),Pn,e(t,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:s(()=>[a(" 之前我们已经介绍过UHT,通过观察，UHT确实将一些宏标记”翻译“成具体代码提交给了编译器。 ")]),_:1}),Wn,e(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[a(" 再次安利一波AI补全插件，只需记住类的开头基本都能补出来！ ")]),_:1}),Rn,Bn,e(t,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:s(()=>[a(" 我们之前命名为TESTFUNC，分组在TEST已经成功映射到蓝图中了！ ")]),_:1}),Dn,In,Gn,e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:s(()=>[a(" 点击播放后，窗口中也成功打印红色的hello world! ")]),_:1}),zn,Mn,n("table",null,[Hn,n("tbody",null,[n("tr",null,[On,Nn,n("td",null,[n("a",Vn,[a("链接"),e(i)])])]),n("tr",null,[Fn,Ln,n("td",null,[n("a",Kn,[a("链接"),e(i)])])]),n("tr",null,[Xn,Yn,n("td",null,[n("a",Jn,[a("链接"),e(i)])])]),n("tr",null,[$n,Qn,n("td",null,[n("a",Zn,[a("链接"),e(i)])])]),n("tr",null,[na,aa,n("td",null,[n("a",ea,[a("链接"),e(i)])])])])])])}const ra=u(T,[["render",sa],["__file","1-UE_Blueprint_HelloWorld.html.vue"]]);export{ra as default};
