import{_ as c,r as i,o as l,c as r,d as n,w as e,e as t,a as o,b as s}from"./app-56b913e7.js";const u="/RenderDoc/assets/referenceorvalue-1bb960f0.png",d="/RenderDoc/assets/valueblueprint-bc08dc59.png",k="/RenderDoc/assets/referenceblueprint-c7553af2.png",m="/RenderDoc/assets/runreference-490553ac.gif",v="/RenderDoc/assets/referenceerrorcpp-b6753960.png",g="/RenderDoc/assets/runvaluegif-08148b9a.gif",b="/RenderDoc/assets/runreferencegif-f6962dec.gif",f={},h=t(`<h3 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递" aria-hidden="true">#</a> 值传递</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的值复制给形式参数，函数得到的是实际数据的副本。</p></li><li><p><strong>对实参的影响：</strong> 在函数内对形式参数的修改不会影响实际参数的值。</p></li><li><p><strong>内存开销：</strong> 由于复制了实际参数的值，可能会产生额外的内存开销，尤其是对于大型对象或数据结构。</p></li><li><p><strong>使用时机：</strong> 适用于简单的数据类型或对象，或者当函数不需要修改实际参数的值时。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//值传递</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),_=t(`<h3 id="引用传递" tabindex="-1"><a class="header-anchor" href="#引用传递" aria-hidden="true">#</a> 引用传递</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的地址传递给形式参数，函数得到的是实际数据的引用。</p></li><li><p><strong>对实参的影响：</strong> 在函数内对形式参数的修改会影响实际参数的值。</p></li><li><p><strong>内存开销：</strong> 不会产生额外的内存开销，因为没有进行值的复制。</p></li><li><p><strong>使用时机：</strong> 适用于需要修改实际参数的值或希望避免复制大型对象的情况。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//引用传递</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印6</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印7</span>
    cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//打印8因为实际参数被改变了</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),y=t(`<h3 id="const引用传递" tabindex="-1"><a class="header-anchor" href="#const引用传递" aria-hidden="true">#</a> Const引用传递</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的引用传递给形式参数，函数得到的是实际数据的引用。使用<code>const</code>关键字表示在函数内不能修改实际参数的值。</p></li><li><p><strong>对实参的影响：</strong> 在函数内不允许对形式参数的值进行修改，以保持实际参数的不变性。</p></li><li><p><strong>内存开销：</strong> 传递的是引用而不是值的副本，因此相比于值传递，内存开销较小。但在函数内部无法修改实际参数的值。</p></li><li><p><strong>使用时机：</strong> 适用于需要访问实际参数的值但不需要修改的情况，同时希望减小内存开销。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// const引用传递</span>
<span class="token keyword">int</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 返回x递增后的值</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    num <span class="token operator">=</span> <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将新值赋给num</span>
    cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 打印递增后的值</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),w=t(`<p>在上述示例中，const引用传递避免了对实际参数的复制，同时限制了函数内部对实际参数的修改。</p><h3 id="指针传递" tabindex="-1"><a class="header-anchor" href="#指针传递" aria-hidden="true">#</a> 指针传递</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的地址传递给形式参数，函数得到的是实际数据的地址，可以通过该地址直接访问和修改实际参数的值。</p></li><li><p><strong>对实参的影响：</strong> 在函数内对形式参数所指向的地址的内容进行修改会影响实际参数的值。</p></li><li><p><strong>内存开销：</strong> 传递的是地址而不是值的副本，因此通常比值传递更节省内存，尤其对于大型对象或数据结构。</p></li><li><p><strong>使用时机：</strong> 适用于需要在函数内修改实际参数的值，或者当希望减小内存开销的情况。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//指针传递</span>
<span class="token keyword">void</span> <span class="token function">incrementByPointer</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出实际参数的值</span>
      <span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 通过指针修改实际参数的值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">incrementByPointer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传递实际参数的地址</span>
    cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 输出修改后的实际参数的值，结果为6</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="深浅拷贝" tabindex="-1"><a class="header-anchor" href="#深浅拷贝" aria-hidden="true">#</a> 深浅拷贝</h2>`,5),x=t('<ol><li><strong>值传递（Pass by Value）：</strong></li></ol><ul><li>在值传递中，函数参数是原始值的拷贝，即创建了一个局部变量并将原始值的内容复制到局部变量中。</li><li>这确实涉及到拷贝原始值，但这并不一定是深拷贝。对于基本数据类型（如整数、浮点数），这是深拷贝，因为整个值被复制。</li><li>对于复杂对象（如数组、结构体、类），可能是浅拷贝，因为只是复制对象的内容，而不是对象本身的复制。</li></ul><ol start="2"><li><strong>引用传递（Pass by Reference）：</strong></li></ol><ul><li>在引用传递中，函数参数是原始值的引用，即创建了一个别名或引用，直接指向原始值的内存地址。</li><li>引用传递通常被认为是一种浅拷贝，因为它不涉及对值的复制，而是共享同一块内存。修改引用传递的参数会影响原始值。</li></ul>',4),R=o("span",{style:{color:"#c0392b","font-size":"1.2rem"}},"深浅拷贝",-1),P=o("h2",{id:"正片",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#正片","aria-hidden":"true"},"#"),s(" 正片")],-1),V=t('<h3 id="_1-创建" tabindex="-1"><a class="header-anchor" href="#_1-创建" aria-hidden="true">#</a> 1.创建</h3><blockquote><p>对应的蓝图节点</p></blockquote><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+'" alt="默认值传递" tabindex="0" loading="lazy"><figcaption>默认值传递</figcaption></figure><figure><img src="'+k+'" alt="值引用" tabindex="0" loading="lazy"><figcaption>值引用</figcaption></figure><h3 id="_2-运行" tabindex="-1"><a class="header-anchor" href="#_2-运行" aria-hidden="true">#</a> 2.运行</h3>',6),z=t('<figure><img src="'+m+'" alt="默认参数是1" tabindex="0" loading="lazy"><figcaption>默认参数是1</figcaption></figure><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-debug" tabindex="-1"><a class="header-anchor" href="#_3-debug" aria-hidden="true">#</a> 3.Debug</h3><figure><img src="'+g+'" alt="值传递" tabindex="0" loading="lazy"><figcaption>值传递</figcaption></figure><figure><img src="'+b+'" alt="值引用" tabindex="0" loading="lazy"><figcaption>值引用</figcaption></figure>',5);function D(j,W){const a=i("chatmessage"),p=i("gifwithbutton");return l(),r("div",null,[n(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:e(()=>[s(" 值传递（Pass by Value）和引用传递（Pass by Reference）以及指针传递（Pass by Pointer） ")]),_:1}),h,n(p,{src:"../../../assets/unrealgif/vyy.gif"}),_,n(p,{src:"../../../assets/unrealgif/vyy2.gif"}),y,n(p,{src:"../../../assets/unrealgif/vyy3.gif"}),w,n(a,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:e(()=>[s(" 按你这么说也就是说值传递是深拷贝？引用传递是浅拷贝喽？ ")]),_:1}),n(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 不完全正确！，我们还是得根据实际情况判断是什么拷贝。 ")]),_:1}),x,n(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[s(" 我不理解！我只是经常听他们提到"),R,s("。 ")]),_:1}),n(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 后续文章再做讨论吧。 ")]),_:1}),P,n(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 贴心Baba在UE中用蓝图节点模拟了一下值传递和值引用 ")]),_:1}),V,n(a,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 如果用+=则需要重新对原始数据赋值操作，而++对变量进行自增的操作。至于用++i还是i++在这里没什么区别，我们后续文章也会讨论。 ")]),_:1}),z])}const B=c(f,[["render",D],["__file","4-VariablePassbyValue _ Reference.html.vue"]]);export{B as default};
