import{_ as o}from"./replicate011-149a4561.js";import{_ as l,r as p,o as d,c as r,d as n,w as t,a,b as s,e as c}from"./app-ba1c65b0.js";const u="/RenderDoc/assets/replicate012-21881826.png",m="/RenderDoc/assets/replicate013-57eb0c80.png",v="/RenderDoc/assets/replicate014-adf9effb.png",k="/RenderDoc/assets/replicate023-0502406a.jpg",b="/RenderDoc/assets/replicate015-dfc69d05.png",h="/RenderDoc/assets/replicate017-f34df7af.jpg",f="/RenderDoc/assets/replicate019-dd43dcd4.png",g="/RenderDoc/assets/replicate018-d0148d36.png",_="/RenderDoc/assets/replicate022-4c2f12b4.jpg",y="/RenderDoc/assets/replicate020-e3663f37.png",O="/RenderDoc/assets/replicate021-ed5d129e.png",R={},x=a("h2",{id:"前情提要",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#前情提要","aria-hidden":"true"},"#"),s(" 前情提要")],-1),N=a("h2",{id:"bp",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#bp","aria-hidden":"true"},"#"),s(" BP")],-1),M=a("figure",null,[a("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),I=a("h2",{id:"c",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#c","aria-hidden":"true"},"#"),s(" C++")],-1),C=c(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>   <span class="token comment">// .h</span>
   <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>
   <span class="token keyword">void</span> <span class="token function">ServerSetHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// .cpp</span>
   <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerSetHealth_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
     <span class="token comment">//spawn的代码</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本章导读" tabindex="-1"><a class="header-anchor" href="#本章导读" aria-hidden="true">#</a> 本章导读</h2>`,2),L=a("figure",null,[a("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),D=a("figure",null,[a("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),P=a("h2",{id:"bp-multicast",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#bp-multicast","aria-hidden":"true"},"#"),s(" BP|Multicast")],-1),E=a("figure",null,[a("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),A=a("figure",null,[a("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),w=c(`<h2 id="c-multicast" tabindex="-1"><a class="header-anchor" href="#c-multicast" aria-hidden="true">#</a> C++|Multicast</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>   <span class="token comment">// .h</span>
   <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>
   <span class="token keyword">void</span> <span class="token function">ServerSetHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token comment">// .cpp</span>
   <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerSetHealth_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
     <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
    <span class="token comment">// 在 .h </span>
    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>NetMulticast<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在 .cpp </span>
    <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">MulticastFunction_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
    <span class="token comment">//实现移动逻辑。</span>
    <span class="token punctuation">}</span>
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量复制" tabindex="-1"><a class="header-anchor" href="#变量复制" aria-hidden="true">#</a> 变量复制</h3>`,3),S=a("figure",null,[a("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),T=a("figure",null,[a("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),j=a("figure",null,[a("img",{src:f,alt:"变量没有复制",tabindex:"0",loading:"lazy"}),a("figcaption",null,"变量没有复制")],-1),W=c('<h2 id="bp-1" tabindex="-1"><a class="header-anchor" href="#bp-1" aria-hidden="true">#</a> BP</h2><h3 id="变量-replicated" tabindex="-1"><a class="header-anchor" href="#变量-replicated" aria-hidden="true">#</a> 变量|Replicated</h3><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),q=a("h3",{id:"变量-repnotify",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#变量-repnotify","aria-hidden":"true"},"#"),s(" 变量|RepNotify")],-1),V=a("figure",null,[a("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),F=a("p",null,[s("至于RepNotify,是指该变量发生"),a("code",null,"变化"),s("时会触发一个回调函数，同时在服务器和客户端机器上执行此函数。")],-1),z=a("figure",null,[a("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),U=c(`<h2 id="c-1" tabindex="-1"><a class="header-anchor" href="#c-1" aria-hidden="true">#</a> C++</h2><h3 id="c-replicated" tabindex="-1"><a class="header-anchor" href="#c-replicated" aria-hidden="true">#</a> C++|Replicated</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>
<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Replicated<span class="token punctuation">)</span>
<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中设置变量同步</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-repnotify-onrep" tabindex="-1"><a class="header-anchor" href="#c-repnotify-onrep" aria-hidden="true">#</a> C++|RepNotify|OnRep</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>
<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>ReplicatedUsing <span class="token operator">=</span> OnRep_MyVariable<span class="token punctuation">)</span>
<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中设置变量同步，并声明 OnRep_MyVariable 函数</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
   <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// OnRep_MyVariable 函数将在 MyVariable 发生变化时被调用</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_MyVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 在这里添加在变量改变时执行的逻辑</span>
   <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;MyVariable changed to: %f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-doreplifetime变量的复制规则" tabindex="-1"><a class="header-anchor" href="#c-doreplifetime变量的复制规则" aria-hidden="true">#</a> C++|<code>DOREPLIFETIME</code>变量的复制规则</h3><h4 id="doreplifetime" tabindex="-1"><a class="header-anchor" href="#doreplifetime" aria-hidden="true">#</a> DOREPLIFETIME:</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏用于声明一个类的变量需要在网络上进行复制。它会自动生成必要的复制代码。</p><h4 id="doreplifetime-condition" tabindex="-1"><a class="header-anchor" href="#doreplifetime-condition" aria-hidden="true">#</a> DOREPLIFETIME_CONDITION:</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">,</span> ReplicationCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏也用于声明一个类的变量需要在网络上进行复制，但允许添加一个额外的条件。<code>ReplicationCondition</code> 是一个用于判断是否进行复制的布尔表达式。只有在这个表达式为真时，复制才会发生。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>条件标签</th><th>描述</th></tr></thead><tbody><tr><td><code>COND_InitialOnly</code></td><td>仅在初始数据组尝试发送</td></tr><tr><td><code>COND_OwnerOnly</code></td><td>仅发送至 actor 的所有者</td></tr><tr><td><code>COND_SkipOwner</code></td><td>发送至除所有者之外的每个连接</td></tr><tr><td><code>COND_SimulatedOnly</code></td><td>仅发送至模拟 actor</td></tr><tr><td><code>COND_AutonomousOnly</code></td><td>仅发送给自治 actor</td></tr><tr><td><code>COND_SimulatedOrPhysics</code></td><td>发送至模拟或 <code>bRepPhysics</code> actor</td></tr><tr><td><code>COND_InitialOrOwner</code></td><td>发送初始数据包，或者发送至 actor 所有者</td></tr><tr><td><code>COND_Custom</code></td><td>没有特定条件，但需要通过 <code>SetCustomIsActiveOverride</code> 开启/关闭能力</td></tr></tbody></table><h3 id="官方aplayerstate" tabindex="-1"><a class="header-anchor" href="#官方aplayerstate" aria-hidden="true">#</a> 官方APlayerState</h3><figure><img src="`+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',17);function G(B,H){const e=p("chatmessage"),i=p("gifwithbutton");return d(),r("div",null,[x,n(e,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 前文，咱们已经解决了客户端SpawnActor服务端不显示的问题。 ")]),_:1}),N,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 搞一个在服务器上调用的事件，并确保Actor本身可以复制。 ")]),_:1}),M,n(i,{src:"../../assets/unrealgif/hpup12.gif"}),I,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 无论它咱们变，始终逃不开对象、类、函数调用这个框架，UE中有只需要在函数名中加入对应的宏标记即可 ")]),_:1}),C,n(e,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[s(" 很显然，咱们解决了一个全局物体生成问题，比如生成道具、子弹等Actor的行为。 现在问题来了，我修改了角色的速度，也调用了服务器上执行我发现为什么客户端上一卡一卡的？ ")]),_:1}),L,n(i,{src:"../../assets/unrealgif/hpup13.gif"}),n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 首先，咱们要清楚速度是咱们的角色移动组件的属性 ")]),_:1}),D,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 挺奇怪的是官方并没有个速度这个变量搞成可复制的。虽然你现在RunOnServer，但这个行为只在服务器上运行 ，你可以看到服务器上的客户端行为是正常的。所以。。。。 ")]),_:1}),n(i,{src:"../../assets/unrealgif/hpup14.gif"}),P,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 意味着，如果其他客户端想要看到同样的动作，想要服务器广播一遍告诉所有客户端。 ")]),_:1}),n(e,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[s(" 也就是说，RPC申请在服务器上调用，然后广播给所有客户端是吗？ ")]),_:1}),E,A,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 没错，一般来说到最终阶段才会封装这些高频修改行为到C++中。 ")]),_:1}),w,n(e,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[s(" 这里的速度不复制也能正常运行？ ")]),_:1}),n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 因为相对于所有端口来说，速度改变的值的区间都是一样的 ")]),_:1}),S,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 如果我们把其中一个变量提取出来，设置成所谓MaxSpeed,然后用一个按键改变速度，你就会发现猫腻。 ")]),_:1}),n(e,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[s(" 可以肯定的是这个行为一定是服务器上执行改变的，因为客户端压根没有权限，即便是设置了变量复制。 ")]),_:1}),T,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 那是必须的，我们前面已经讲过了只有服务器才有权威。 ")]),_:1}),j,n(i,{src:"../../assets/unrealgif/hpup15.gif"}),n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 可以看到虽然客户端速度降下来了，但还是一抽一抽的。现在我们开启变量的复制功能，可以看到变量右上角会出现两个泡泡。 ")]),_:1}),W,n(i,{src:"../../assets/unrealgif/hpup16.gif"}),n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 可以看到抽搐消失了，请忽略我们的动作还是跑步，因为目前的角色并不是速度驱动动作的。 ")]),_:1}),q,V,n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[F]),_:1}),z,n(e,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[s(" 一定是变化时才会调用是吧，平时是服务器上执行。 ")]),_:1}),n(i,{src:"../../assets/unrealgif/hpup17.gif"}),n(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 记住!要考的，后面OnRep_PlayerState变化时初始化GAS组件起着关键作用，同时要记住C++中只会在客户端执行。 ")]),_:1}),U])}const J=l(R,[["render",G],["__file","2.1.-GamePlayNetWork.html.vue"]]);export{J as default};
