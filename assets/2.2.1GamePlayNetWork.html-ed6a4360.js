import{_ as u,r as c,o as r,c as d,d as t,w as s,a,b as n}from"./app-a94ef497.js";const h="/RenderDoc/assets/inv041-103ce637.png",_="/RenderDoc/assets/inv042-88c5639a.png",g="/RenderDoc/assets/inv043-8e1d1f43.png",m="/RenderDoc/assets/inv044-2db42c8e.png",v="/RenderDoc/assets/inv046-0c9af386.png",f="/RenderDoc/assets/inv045-f3f6759c.png",b="/RenderDoc/assets/inv047-6eab9a58.png",k="/RenderDoc/assets/inv048-aecb0118.png",x={},y=a("figure",null,[a("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),R=a("figure",null,[a("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),M=a("h3",{id:"rpc可靠性",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#rpc可靠性","aria-hidden":"true"},"#"),n(" RPC可靠性")],-1),W=a("figure",null,[a("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),j=a("figure",null,[a("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),C=a("blockquote",null,[a("p",null,"SkeletalMeshComponent（继承自 SkinnedMeshComponent）及其 SkeletalMesh 都不会复制。")],-1),N=a("h3",{id:"repnotify",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#repnotify","aria-hidden":"true"},"#"),n(" RepNotify")],-1),w=a("p",null,"用一个复制变量通知即可.",-1),A=a("figure",null,[a("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),z=a("p",null,[n("这个"),a("code",null,"子组件"),n("并不需要设置复制。但要保证这个父Actor要启用复制！")],-1),D=a("figure",null,[a("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),O=a("h3",{id:"has-authority",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#has-authority","aria-hidden":"true"},"#"),n(" Has Authority")],-1),S=a("figure",null,[a("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),q=a("p",null,"事实上，你可以依托某些同生命周期的变量去实现这个，例如一些服务器生成的道具，假设我们设定道具品质一般生成什么样就是什么样。 借用这个品质的等级Int32变量同步时触发初始化函数。当然直接网格物体本身改成OnRep也是可以的",-1),L=a("figure",null,[a("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),P=a("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[a("pre",{class:"language-cpp"},[a("code",null,[a("span",{class:"token function"},"UPROPERTY"),a("span",{class:"token punctuation"},"("),n("ReplicatedUsing"),a("span",{class:"token operator"},"="),n("OnRep_Mesh"),a("span",{class:"token punctuation"},")"),n(`
USkeletalMesh`),a("span",{class:"token operator"},"*"),n(" Mesh"),a("span",{class:"token punctuation"},";"),n(`

`),a("span",{class:"token function"},"UFUNCTION"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),n(`
`),a("span",{class:"token keyword"},"void"),n(),a("span",{class:"token function"},"OnRep_Mesh"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`

`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),U=a("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[a("pre",{class:"language-cpp"},[a("code",null,[n(`
`),a("span",{class:"token keyword"},"void"),n(),a("span",{class:"token class-name"},"AMyCharacter"),a("span",{class:"token double-colon punctuation"},"::"),a("span",{class:"token function"},"SetMesh"),a("span",{class:"token punctuation"},"("),n("USkeletalMesh"),a("span",{class:"token operator"},"*"),n(" NewMesh"),a("span",{class:"token punctuation"},")"),n(`
`),a("span",{class:"token punctuation"},"{"),n(`
    Mesh `),a("span",{class:"token operator"},"="),n(" NewMesh"),a("span",{class:"token punctuation"},";"),n(`
    `),a("span",{class:"token function"},"OnRep_Mesh"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`

`),a("span",{class:"token keyword"},"void"),n(),a("span",{class:"token class-name"},"AMyCharacter"),a("span",{class:"token double-colon punctuation"},"::"),a("span",{class:"token function"},"OnRep_Mesh"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),n(`
`),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token function"},"GetMesh"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token operator"},"->"),a("span",{class:"token function"},"SetSkeletalMesh"),a("span",{class:"token punctuation"},"("),n("Mesh"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`

`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1);function T(B,G){const e=c("chatmessage"),l=c("gifwithbutton"),p=c("CodeTabs");return r(),d("div",null,[t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 静态网格物体，我在服务器上执行生成行为，只要Actor组件和这个子组件设置同步就能同步。 ")]),_:1}),y,t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 为什么同样的方法却骨骼网格物体看不到同步结果？ ")]),_:1}),R,M,t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 然后我用了RPC去实现 ")]),_:1}),W,t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 依然没有同步！ ")]),_:1}),j,C,t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[n(" 这个问题其实和延迟有关系。虽然你同时启用了服务端和客户端，但他们始终有个创建和加入的先后顺序。 ")]),_:1}),t(l,{src:"../../assets/unrealgif/hpup31.gif"}),t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[n(" 更何况真实情况中的中途加入/断线重连等。 ")]),_:1}),t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 那该怎么解决？ ")]),_:1}),N,t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[w]),_:1}),A,t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[z]),_:1}),D,t(l,{src:"../../assets/unrealgif/hpup32.gif"}),t(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[n(" 这和我们上一篇强化认知中的OnRep异曲同工！ ")]),_:1}),O,t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[n(" 对于非玩家物体，甚至可以直接用是否拥有权限来过滤远程 ")]),_:1}),S,t(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:s(()=>[q]),_:1}),L,t(p,{id:"66",data:[{id:".h"},{id:".cpp"}],"tab-id":"language"},{title0:s(({value:i,isActive:o})=>[n(".h")]),title1:s(({value:i,isActive:o})=>[n(".cpp")]),tab0:s(({value:i,isActive:o})=>[P]),tab1:s(({value:i,isActive:o})=>[U]),_:1},8,["data"])])}const E=u(x,[["render",T],["__file","2.2.1GamePlayNetWork.html.vue"]]);export{E as default};
