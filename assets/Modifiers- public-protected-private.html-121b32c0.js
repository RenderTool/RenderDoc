import{_ as c,r as o,o as p,c as l,d as e,w as t,a as s,b as n,e as i}from"./app-5b14dec3.js";const d="/RenderDoc/assets/publicchat-d264fb40.png",r={},u=s("h3",{id:"访问控制和继承",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#访问控制和继承","aria-hidden":"true"},"#"),n(" 访问控制和继承")],-1),k=s("figure",null,[s("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),s("figcaption")],-1),v=s("blockquote",null,[s("p",null,[s("strong",null,"Private自己可见|Protected自己和好友可见|Public所有人可见")])],-1),m=s("hr",null,null,-1),b=i(`<table><thead><tr><th>访问</th><th>同一个类</th><th>派生类</th><th>外部的类</th></tr></thead><tbody><tr><td>Public</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Protected</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Private</td><td>Yes</td><td>No</td><td>No</td></tr></tbody></table><h2 id="类-class-中" tabindex="-1"><a class="header-anchor" href="#类-class-中" aria-hidden="true">#</a> 类(class)中</h2><ol><li><strong>Public（公共）:</strong><ul><li>成员声明为 <code>public</code> 的，可以在类的内部和外部访问。</li><li>对于类的用户来说，<code>public</code> 成员是可见的，可以直接访问。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> publicVar<span class="token punctuation">;</span>  <span class="token comment">// 公共变量</span>
    <span class="token keyword">void</span> <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 公共方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Protected（受保护的）:</strong><ul><li>成员声明为 <code>protected</code> 的，可以在类的内部访问，也可以在派生类中访问，但不能在类的外部访问。</li><li><code>protected</code> 成员对类的用户是不可见的，只有类的派生类能够访问。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyBaseClass</span> <span class="token punctuation">{</span>
<span class="token keyword">protected</span><span class="token operator">:</span>
    <span class="token keyword">int</span> protectedVar<span class="token punctuation">;</span>  <span class="token comment">// 受保护的变量</span>
    <span class="token keyword">void</span> <span class="token function">protectedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 受保护的方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MyDerivedClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MyBaseClass</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">void</span> <span class="token function">accessProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        protectedVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 在派生类中可以访问受保护的变量</span>
        <span class="token function">protectedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在派生类中可以调用受保护的方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Private（私有的）:</strong><ul><li>成员声明为 <code>private</code> 的，只能在类的内部访问，对于类的用户和派生类都是不可见的。</li><li><code>private</code> 成员对类的用户和派生类都是不可见的。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> privateVar<span class="token punctuation">;</span>  <span class="token comment">// 私有变量</span>
    <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 私有方法</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结构体-struct-中" tabindex="-1"><a class="header-anchor" href="#结构体-struct-中" aria-hidden="true">#</a> 结构体(struct)中</h2>`,9);function h(_,g){const a=o("ChatMessage");return p(),l("div",null,[e(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:t(()=>[n(" 在面向对象编程中，`public`、`protected` 和 `private` 是访问控制修饰符，用于控制类的成员（属性和方法）对外的可见性。 ")]),_:1}),u,e(a,{avatar:"../../../assets/emoji/ybk.png",avatarWidth:40},{default:t(()=>[n(" 很简单，拿朋友圈举例： ")]),_:1}),k,v,m,e(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40},{default:t(()=>[n(" 为此Baba总结了一个表格 ")]),_:1}),b,e(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[n(" 默认都是Public ")]),_:1})])}const f=c(r,[["render",h],["__file","Modifiers- public-protected-private.html.vue"]]);export{f as default};
