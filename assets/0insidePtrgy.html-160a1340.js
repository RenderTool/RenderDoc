const n=JSON.parse('{"key":"v-1f9cc682","path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html","title":"c++inside指针纲要","lang":"zh-CN","frontmatter":{"title":"c++inside指针纲要","order":1,"category":["c++"],"description":"inside指针 纲要 指针基础： 指针的概念和语法。 指针和数组的关系。 指针和函数的关系，函数指针的使用。 指针和数组： 指针和数组的关系。 指针和多维数组。 动态内存分配： new 和 delete 操作符的使用。 动态内存分配和释放的原理。 内存泄漏和悬挂指针的问题。 指针和函数： 指针和函数的关系。 函数指针的使用。 指针和类： 类中的指针成员变量。 对象指针和对象引用。 智能指针： std::shared_ptr、std::unique_ptr 和 std::weak_ptr 的概念和使用。 智能指针的底层实现和引用计数机制。 智能指针的优势和使用场景。 内存管理和RAII： 资源获取即初始化（Resource Acquisition Is Initialization，RAII）的概念。 使用智能指针进行资源管理。 自定义智能指针。 指针和多线程： 多线程环境下的指针操作。 指针和线程安全的数据结构。 指针和性能： 指针操作对性能的影响。 避免指针操作的常见技巧。 深入理解内存模型： 栈内存和堆内存的概念。 内存布局和对齐。 内存模型和内存屏障。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++inside指针纲要"}],["meta",{"property":"og:description","content":"inside指针 纲要 指针基础： 指针的概念和语法。 指针和数组的关系。 指针和函数的关系，函数指针的使用。 指针和数组： 指针和数组的关系。 指针和多维数组。 动态内存分配： new 和 delete 操作符的使用。 动态内存分配和释放的原理。 内存泄漏和悬挂指针的问题。 指针和函数： 指针和函数的关系。 函数指针的使用。 指针和类： 类中的指针成员变量。 对象指针和对象引用。 智能指针： std::shared_ptr、std::unique_ptr 和 std::weak_ptr 的概念和使用。 智能指针的底层实现和引用计数机制。 智能指针的优势和使用场景。 内存管理和RAII： 资源获取即初始化（Resource Acquisition Is Initialization，RAII）的概念。 使用智能指针进行资源管理。 自定义智能指针。 指针和多线程： 多线程环境下的指针操作。 指针和线程安全的数据结构。 指针和性能： 指针操作对性能的影响。 避免指针操作的常见技巧。 深入理解内存模型： 栈内存和堆内存的概念。 内存布局和对齐。 内存模型和内存屏障。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-23T11:15:30.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-11-23T11:15:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++inside指针纲要\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-23T11:15:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"inside指针","slug":"inside指针","link":"#inside指针","children":[{"level":3,"title":"纲要","slug":"纲要","link":"#纲要","children":[]}]}],"git":{"createdTime":1700738130000,"updatedTime":1700738130000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.12,"words":337},"filePathRelative":"language/cpp/BaseGuide[基础概念]/ptr[指针]/0insidePtrgy.md","localizedDate":"2023年11月23日","excerpt":"<h2> inside指针</h2>\\n<h3> 纲要</h3>\\n<ol>\\n<li>\\n<p><strong>指针基础：</strong></p>\\n<ul>\\n<li>指针的概念和语法。</li>\\n<li>指针和数组的关系。</li>\\n<li>指针和函数的关系，函数指针的使用。</li>\\n<li></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>指针和数组：</strong></p>\\n<ul>\\n<li>指针和数组的关系。</li>\\n<li>指针和多维数组。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>动态内存分配：</strong></p>\\n<ul>\\n<li><code>new</code> 和 <code>delete</code> 操作符的使用。</li>\\n<li>动态内存分配和释放的原理。</li>\\n<li>内存泄漏和悬挂指针的问题。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>指针和函数：</strong></p>\\n<ul>\\n<li>指针和函数的关系。</li>\\n<li>函数指针的使用。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>指针和类：</strong></p>\\n<ul>\\n<li>类中的指针成员变量。</li>\\n<li>对象指针和对象引用。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>智能指针：</strong></p>\\n<ul>\\n<li><code>std::shared_ptr</code>、<code>std::unique_ptr</code> 和 <code>std::weak_ptr</code> 的概念和使用。</li>\\n<li>智能指针的底层实现和引用计数机制。</li>\\n<li>智能指针的优势和使用场景。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>内存管理和RAII：</strong></p>\\n<ul>\\n<li>资源获取即初始化（Resource Acquisition Is Initialization，RAII）的概念。</li>\\n<li>使用智能指针进行资源管理。</li>\\n<li>自定义智能指针。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>指针和多线程：</strong></p>\\n<ul>\\n<li>多线程环境下的指针操作。</li>\\n<li>指针和线程安全的数据结构。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>指针和性能：</strong></p>\\n<ul>\\n<li>指针操作对性能的影响。</li>\\n<li>避免指针操作的常见技巧。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>深入理解内存模型：</strong></p>\\n<ul>\\n<li>栈内存和堆内存的概念。</li>\\n<li>内存布局和对齐。</li>\\n<li>内存模型和内存屏障。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{n as data};
