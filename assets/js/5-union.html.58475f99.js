"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3199],{22951:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>l});var t=a(20641);const p=(0,t.Fv)('<h3 id="联合类型的定义与使用" tabindex="-1"><a class="header-anchor" href="#联合类型的定义与使用"><span>联合类型的定义与使用</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">union</span> MyUnion <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> intValue<span class="token punctuation">;</span>\n    <span class="token keyword">float</span> floatValue<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> charValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyUnion u<span class="token punctuation">;</span>\n    u<span class="token punctuation">.</span>intValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;intValue: &quot;</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>intValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    u<span class="token punctuation">.</span>floatValue <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;floatValue: &quot;</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>floatValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    u<span class="token punctuation">.</span>charValue <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;charValue: &quot;</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>charValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token comment">// 注意：因为联合只能同时存储一种类型的值，所以只会打印最后一次赋值的内容</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;intValue: &quot;</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>intValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 不再有效</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;floatValue: &quot;</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>floatValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 不再有效</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合类型的局限性" tabindex="-1"><a class="header-anchor" href="#联合类型的局限性"><span>联合类型的局限性</span></a></h3><ol><li><p><strong>同一时间只能存储一种类型的数据</strong>：</p><ul><li>由于联合类型共享相同的存储空间，因此在给联合类型的某个成员赋值后，之前存储在该联合中的其他成员的数据将被覆盖。</li></ul></li><li><p><strong>类型安全问题</strong>：</p><ul><li>联合类型没有内置的机制来跟踪当前存储的数据类型，这可能会导致访问错误类型的数据，从而引发未定义行为。</li></ul></li><li><p><strong>复杂数据类型的限制</strong>：</p><ul><li>联合类型的成员不能是包含非平凡析构函数、非平凡拷贝构造函数或非平凡拷贝赋值运算符的复杂数据类型，例如C++标准库中的某些容器类。</li><li>C++11之前，联合类型的成员不能是具有构造函数、析构函数或拷贝赋值运算符的类类型。C++11引入了受限联合类型（restricted unions），允许成员具有非平凡的默认构造函数，但依然不支持非平凡的析构函数或拷贝赋值运算符。</li></ul></li><li><p><strong>对齐和填充问题</strong>：</p><ul><li>由于不同数据类型的对齐要求，联合类型可能会导致内存填充，从而无法充分节省内存。</li></ul></li></ol><h3 id="现代c-中的改进" tabindex="-1"><a class="header-anchor" href="#现代c-中的改进"><span>现代C++中的改进</span></a></h3><p>在C++11及之后的标准中（C++ 17），引入了一些特性来增强联合类型的功能：</p><ol><li><p><strong>匿名联合类型</strong>：</p><ul><li>匿名联合类型可以直接在类中定义，不需要显式命名，从而更简洁。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">union</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> intValue<span class="token punctuation">;</span>\n        <span class="token keyword">float</span> floatValue<span class="token punctuation">;</span>\n        <span class="token keyword">char</span> charValue<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>类型安全联合类型</strong>：</p><ul><li>使用 <code>std::variant</code> 替代传统的联合类型来获得类型安全的多态存储。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;variant&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>variant<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>\n    v <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;int value: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    v <span class="token operator">=</span> <span class="token number">3.14f</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;float value: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    v <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;char value: &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><code>std::variant</code> 提供了类型安全的接口和更多的功能，比如类型访问和异常处理，从而避免了传统联合类型的许多局限性。</p><h2 id="平凡类型和非平凡类型" tabindex="-1"><a class="header-anchor" href="#平凡类型和非平凡类型"><span>平凡类型和非平凡类型</span></a></h2><p>平凡类型（trivial type）和非平凡类型（non-trivial type）。这些概念主要涉及对象的创建、销毁、复制和赋值的复杂性。</p><h3 id="平凡类型-trivial-type" tabindex="-1"><a class="header-anchor" href="#平凡类型-trivial-type"><span>平凡类型（Trivial Type）</span></a></h3><p>平凡类型是指那些具有简单特性并且可以直接通过二进制复制进行创建、销毁、复制和赋值的类型。具体来说，一个类型如果满足以下条件，则称为平凡类型：</p><ol><li><p><strong>平凡默认构造函数</strong>：</p><ul><li>默认构造函数不执行任何操作，并且可以通过简单的内存分配完成对象的初始化。</li></ul></li><li><p><strong>平凡拷贝构造函数</strong>：</p><ul><li>拷贝构造函数只执行简单的内存复制，不涉及任何复杂操作。</li></ul></li><li><p><strong>平凡拷贝赋值运算符</strong>：</p><ul><li>拷贝赋值运算符只执行简单的内存复制，不涉及任何复杂操作。</li></ul></li><li><p><strong>平凡析构函数</strong>：</p><ul><li>析构函数</li></ul></li></ol>',13),e={},o=(0,a(66262).A)(e,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(a,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 什么是联合类型？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 联合类型（union）是C++中的一种数据结构，它允许在同一存储空间内存储不同类型的数据， 但只能在一个时间点存储其中的一种类型。联合类型提供了一种节省内存的方式，但也有其局限性和使用注意事项。 ")])),_:1}),(0,t.bF)(a,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 和结构体很像啊！不过联合体更像是共享单车！ ")])),_:1}),p])}]]),l=JSON.parse('{"path":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html","title":"c++5.联合类型局限","lang":"zh-CN","frontmatter":{"title":"c++5.联合类型局限","order":5,"category":["c++"],"description":"联合类型的定义与使用 联合类型的局限性 同一时间只能存储一种类型的数据： 由于联合类型共享相同的存储空间，因此在给联合类型的某个成员赋值后，之前存储在该联合中的其他成员的数据将被覆盖。 类型安全问题： 联合类型没有内置的机制来跟踪当前存储的数据类型，这可能会导致访问错误类型的数据，从而引发未定义行为。 复杂数据类型的限制： 联合类型的成员不能是包含非平...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++5.联合类型局限"}],["meta",{"property":"og:description","content":"联合类型的定义与使用 联合类型的局限性 同一时间只能存储一种类型的数据： 由于联合类型共享相同的存储空间，因此在给联合类型的某个成员赋值后，之前存储在该联合中的其他成员的数据将被覆盖。 类型安全问题： 联合类型没有内置的机制来跟踪当前存储的数据类型，这可能会导致访问错误类型的数据，从而引发未定义行为。 复杂数据类型的限制： 联合类型的成员不能是包含非平..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-03T22:22:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-08-03T22:22:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++5.联合类型局限\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-03T22:22:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"联合类型的定义与使用","slug":"联合类型的定义与使用","link":"#联合类型的定义与使用","children":[]},{"level":3,"title":"联合类型的局限性","slug":"联合类型的局限性","link":"#联合类型的局限性","children":[]},{"level":3,"title":"现代C++中的改进","slug":"现代c-中的改进","link":"#现代c-中的改进","children":[]},{"level":2,"title":"平凡类型和非平凡类型","slug":"平凡类型和非平凡类型","link":"#平凡类型和非平凡类型","children":[{"level":3,"title":"平凡类型（Trivial Type）","slug":"平凡类型-trivial-type","link":"#平凡类型-trivial-type","children":[]}]}],"git":{"createdTime":1722723732000,"updatedTime":1722723732000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.44,"words":1032},"filePathRelative":"language/cpp/new[新特性]/5-union.md","localizedDate":"2024年8月3日","excerpt":"\\n\\n\\n<h3>联合类型的定义与使用</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">union</span> MyUnion <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> intValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">float</span> floatValue<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">char</span> charValue<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    MyUnion u<span class=\\"token punctuation\\">;</span>\\n    u<span class=\\"token punctuation\\">.</span>intValue <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"intValue: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> u<span class=\\"token punctuation\\">.</span>intValue <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    u<span class=\\"token punctuation\\">.</span>floatValue <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3.14</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"floatValue: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> u<span class=\\"token punctuation\\">.</span>floatValue <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    u<span class=\\"token punctuation\\">.</span>charValue <span class=\\"token operator\\">=</span> <span class=\\"token char\\">\'a\'</span><span class=\\"token punctuation\\">;</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"charValue: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> u<span class=\\"token punctuation\\">.</span>charValue <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 注意：因为联合只能同时存储一种类型的值，所以只会打印最后一次赋值的内容</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"intValue: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> u<span class=\\"token punctuation\\">.</span>intValue <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 不再有效</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"floatValue: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> u<span class=\\"token punctuation\\">.</span>floatValue <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 不再有效</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);