"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4771],{7861:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>g,data:()=>y});var t=a(20641);const p=a.p+"assets/img/struct.50df0f14.png",e=a.p+"assets/img/cprimer.cea09cd2.png",o=a.p+"assets/img/classptr.e41ad3a2.png",c=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"语法：struct 结构体名称 { 成员列表 };")],-1),l=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),i=(0,t.Lk)("h2",{id:"结构体指针",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#结构体指针"},[(0,t.Lk)("span",null,"结构体指针")])],-1),u=(0,t.Lk)("span",{style:{color:"#c0392b"}},"指针",-1),r=(0,t.Fv)('<blockquote><p>语法： struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</p></blockquote><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="结构体指针定义方法" tabindex="-1"><a class="header-anchor" href="#结构体指针定义方法"><span>结构体指针定义方法</span></a></h3><hr><h4 id="_1-struct-结构体名称-指针变量名-结构体对象" tabindex="-1"><a class="header-anchor" href="#_1-struct-结构体名称-指针变量名-结构体对象"><span><strong>1. struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</strong></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;汪汪汪&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">//new 堆上执行</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token operator">*</span>pDog <span class="token operator">=</span> <span class="token keyword">new</span> Dog<span class="token punctuation">;</span>\n    pDog<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">//栈上执行，程序控制生命周期</span>\n    Dog dog2<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Dog</span><span class="token operator">*</span> pDog2 <span class="token operator">=</span> <span class="token operator">&amp;</span>dog2<span class="token punctuation">;</span><span class="token comment">//</span>\n    pDog2<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">delete</span> pDog<span class="token punctuation">;</span><span class="token comment">//释放内存</span>\n    pDog <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token comment">//指针置空</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>堆上分配内存：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token operator">*</span>pDog <span class="token operator">=</span> <span class="token keyword">new</span> Dog<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码在堆上动态分配了一个 <code>Dog</code> 对象，并将其地址赋给了 <code>pDog</code> 指针。在这种情况下，需要记得使用 <code>delete</code> 来释放这块内存。</p></li><li><p>栈上分配内存：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Dog dog2<span class="token punctuation">;</span>\n<span class="token keyword">struct</span> <span class="token class-name">Dog</span><span class="token operator">*</span> pDog2 <span class="token operator">=</span> <span class="token operator">&amp;</span>dog2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>创建了一个 <code>Dog</code> 对象 <code>dog2</code>，并用 <code>&amp;dog2</code> 将其地址赋给了 <code>pDog2</code> 指针。在这种情况下，对象的生命周期受限于其所在的作用域，不需要手动释放内存。</p></li><li><p>释放内存：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> pDog<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>',7),d=(0,t.Lk)("br",null,null,-1),k=(0,t.Fv)('<hr><h4 id="_2-在定义结构体时直接定义成指针" tabindex="-1"><a class="header-anchor" href="#_2-在定义结构体时直接定义成指针"><span><strong>2. 在定义结构体时直接定义成指针</strong></span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Dog</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;汪汪汪&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token operator">*</span> pDog<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    pDog<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体数组" tabindex="-1"><a class="header-anchor" href="#结构体数组"><span>结构体数组</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span>  <span class="token comment">// 使用 std::vector 代替数组</span></span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;汪汪汪&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用 std::vector 代替数组</span>\n    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Dog<span class="token operator">&gt;</span> dogs <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;大黄&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;大白&quot;</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 修改第二只狗的年龄</span>\n    dogs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用 new 创建堆上的对象，而不是栈上的数组</span>\n    Dog<span class="token operator">*</span> pDog <span class="token operator">=</span> <span class="token keyword">new</span> Dog<span class="token punctuation">;</span>\n    pDog<span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    pDog<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token string">&quot;大黄&quot;</span><span class="token punctuation">;</span>\n    pDog<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用 std::vector 管理动态分配的对象</span>\n    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Dog<span class="token operator">*</span><span class="token operator">&gt;</span> dogPointers<span class="token punctuation">;</span>\n    dogPointers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">new</span> Dog<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&quot;小黑&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dogPointers<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">new</span> Dog<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;小白&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 遍历 vector，并释放动态分配的对象</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>Dog<span class="token operator">*</span> p <span class="token operator">:</span> dogPointers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        p<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">delete</span> p<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    dogPointers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结构体嵌套" tabindex="-1"><a class="header-anchor" href="#结构体嵌套"><span>结构体嵌套</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Cat</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">catbark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;m~m~m&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Dog</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">dogbark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;w~w~w&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">struct</span> <span class="token class-name">Cat</span> myCat<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">printstruct</span><span class="token punctuation">(</span><span class="token keyword">const</span> Dog<span class="token operator">*</span> d<span class="token punctuation">,</span> <span class="token keyword">const</span> Cat<span class="token operator">*</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;我的小狗名叫:&quot;</span> <span class="token operator">&lt;&lt;</span> d<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot;今年&quot;</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">-&gt;</span>age<span class="token operator">&lt;&lt;</span><span class="token string">&quot;岁,快跟大家打招呼!&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> d<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot;：&quot;</span><span class="token punctuation">;</span>\n    d<span class="token operator">-&gt;</span><span class="token function">dogbark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;小狗&quot;</span> <span class="token operator">&lt;&lt;</span> d<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;的朋友叫：&quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot;今年&quot;</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">-&gt;</span>age<span class="token operator">&lt;&lt;</span><span class="token string">&quot;岁,快跟大家打招呼!&quot;</span><span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span><span class="token string">&quot;：&quot;</span><span class="token punctuation">;</span>\n    c<span class="token operator">-&gt;</span><span class="token function">catbark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Dog myDog<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Dog</span><span class="token operator">*</span> PDog <span class="token operator">=</span> <span class="token operator">&amp;</span>myDog<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">Cat</span><span class="token operator">*</span> PCat <span class="token operator">=</span> <span class="token operator">&amp;</span>PDog<span class="token operator">-&gt;</span>myCat<span class="token punctuation">;</span>\n    \n    PDog<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token string">&quot;小白&quot;</span><span class="token punctuation">;</span>\n    PDog<span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    \n    PCat<span class="token operator">-&gt;</span>name <span class="token operator">=</span> <span class="token string">&quot;小咪&quot;</span><span class="token punctuation">;</span>\n    PCat<span class="token operator">-&gt;</span>age <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n    <span class="token function">printstruct</span><span class="token punctuation">(</span>PDog<span class="token punctuation">,</span> PCat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类指针" tabindex="-1"><a class="header-anchor" href="#类指针"><span>类指针</span></a></h2>',8),v=(0,t.Fv)('<figure><img src="'+o+'" alt="类默认私有" tabindex="0" loading="lazy"><figcaption>类默认私有</figcaption></figure><blockquote><p>语法 ：class 类名称 * 指针变量名 = new 类对象;</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token comment">// 类定义</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value: &quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 结构体定义</span>\n<span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> y<span class="token punctuation">;</span>\n\n    <span class="token function">MyStruct</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">y</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value: &quot;</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类指针</span>\n    MyClass<span class="token operator">*</span> ptrClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ptrClass<span class="token operator">-&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">delete</span> ptrClass<span class="token punctuation">;</span>\n\n    <span class="token comment">// 结构体指针</span>\n    MyStruct<span class="token operator">*</span> ptrStruct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyStruct</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ptrStruct<span class="token operator">-&gt;</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">delete</span> ptrStruct<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明前置" tabindex="-1"><a class="header-anchor" href="#声明前置"><span>声明前置</span></a></h3>',4),m=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token operator">*</span>Pdog<span class="token punctuation">;</span><span class="token comment">//声明前置</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> age<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;汪汪汪&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Pdog<span class="token operator">-&gt;</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),b={},g=(0,a(66262).A)(b,[["render",function(n,s){const a=(0,t.g2)("chatmessage"),p=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(a,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 说完了数组指针和指针数组随便讲讲结构体指针和类指针吧 ")])),_:1}),(0,t.bF)(a,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 在讲结构体指针前先来复习一下结构体咱们定义吧 ")])),_:1}),c,l,i,(0,t.bF)(a,{avatar:"../../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 顾名思义，是一个结构体类型的"),u,(0,t.eW)("指向某个结构体。 ")])),_:1}),r,(0,t.bF)(p,{src:"../../../../assets/unrealgif/structptr.gif"}),(0,t.bF)(a,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果不delete会怎么样？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果动态分配内存后，没有正确释放该内存，意味着这部分内存无法再被程序访问。"),d,(0,t.eW)(" 但系统仍然认为这部分内存被程序占用，从而造成内存资源的浪费。也就是我们常常说的内存泄漏。 ")])),_:1}),k,(0,t.bF)(a,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 类指针和结构体指针在概念上非常相似，因为类（class）和结构体（struct）在 C++ 中都是用户自定义的数据类型。 只不过需要注意的是类默认是私有的,需要用pulic关键字修饰 ")])),_:1}),v,(0,t.bF)(a,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 当然结构体/类指针声明前置都是可以的 ")])),_:1}),m])}]]),y=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html","title":"c++结构体指针|类指针","lang":"zh-CN","frontmatter":{"title":"c++结构体指针|类指针","order":5,"category":["c++"],"description":"语法：struct 结构体名称 { 成员列表 }; 结构体指针 语法： struct 结构体名称 * 指针变量名 = & 结构体对象; 结构体指针定义方法 1. struct 结构体名称 * 指针变量名 = & 结构体对象; 堆上分配内存： 这行代码在堆上动态分配了一个 Dog 对象，并将其地址赋给了 pDog 指针。在这种情况下，需要记得使用 del...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++结构体指针|类指针"}],["meta",{"property":"og:description","content":"语法：struct 结构体名称 { 成员列表 }; 结构体指针 语法： struct 结构体名称 * 指针变量名 = & 结构体对象; 结构体指针定义方法 1. struct 结构体名称 * 指针变量名 = & 结构体对象; 堆上分配内存： 这行代码在堆上动态分配了一个 Dog 对象，并将其地址赋给了 pDog 指针。在这种情况下，需要记得使用 del..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++结构体指针|类指针\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"结构体指针","slug":"结构体指针","link":"#结构体指针","children":[{"level":3,"title":"结构体指针定义方法","slug":"结构体指针定义方法","link":"#结构体指针定义方法","children":[]},{"level":3,"title":"结构体数组","slug":"结构体数组","link":"#结构体数组","children":[]},{"level":3,"title":"结构体嵌套","slug":"结构体嵌套","link":"#结构体嵌套","children":[]}]},{"level":2,"title":"类指针","slug":"类指针","link":"#类指针","children":[{"level":3,"title":"声明前置","slug":"声明前置","link":"#声明前置","children":[]}]}],"git":{"createdTime":1701100984000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1073},"filePathRelative":"language/cpp/BaseGuide[基础概念]/ptr[指针]/4-Ptr-Struct.md","localizedDate":"2023年11月27日","excerpt":"\\n\\n<blockquote>\\n<p>语法：struct 结构体名称 { 成员列表 };</p>\\n</blockquote>\\n<figure><figcaption></figcaption></figure>\\n<h2>结构体指针</h2>\\n\\n<blockquote>\\n<p>语法： struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</p>\\n</blockquote>\\n<figure><figcaption></figcaption></figure>\\n<h3>结构体指针定义方法</h3>\\n<hr>\\n<h4><strong>1. struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</strong></h4>","autoDesc":true}')}}]);