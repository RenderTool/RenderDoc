"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[5232],{69672:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>r,data:()=>u});var t=a(20641);const e=a.p+"assets/img/bubble.bef9ca3c.jpg",p=(0,t.Lk)("h2",{id:"冒泡排序-bubble-sort",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#冒泡排序-bubble-sort"},[(0,t.Lk)("span",null,"冒泡排序 (Bubble Sort)")])],-1),o=(0,t.Lk)("h3",{id:"实现步骤",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#实现步骤"},[(0,t.Lk)("span",null,"实现步骤")])],-1),l=(0,t.Lk)("ol",null,[(0,t.Lk)("li",null,"第一次，左边开始两两对比,如果左边的值大于右边的值,就交换它们，对比结束时末尾是最大数字"),(0,t.Lk)("li",null,"第二次，剔除末尾，重复步骤1。"),(0,t.Lk)("li",null,"依此类推，进行第三次、第四次，直到整个数组有序。")],-1),c=(0,t.Fv)('<figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token comment">//引入之前的模板</span>\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    T temp <span class="token operator">=</span> a<span class="token punctuation">;</span>\n    a <span class="token operator">=</span> b<span class="token punctuation">;</span>\n    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//冒泡排序</span>\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>T<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">bool</span> tag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token function">swap</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                tag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tag<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//打印数组</span>\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">showArray</span><span class="token punctuation">(</span>T<span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//主函数</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">showArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),i={},r=(0,a(66262).A)(i,[["render",function(n,s){const a=(0,t.g2)("chatmessage"),e=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[p,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 冒泡排序的基本思想是通过重复遍历要排序的列表， 比较每对相邻的元素，并且如果它们的顺序错误就交换它们。 遍历列表的工作是重复地的，直到无需交换为止，这意味着列表已经排序完成。 ")])),_:1}),o,l,(0,t.bF)(a,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 冒泡排序的时间复杂度是O(n^2)，其中n是数组的长度，意味着要一共循环n^2次。 ")])),_:1}),(0,t.bF)(e,{src:"../../assets/algorithmgif/bubblesort.gif"}),c])}]]),u=JSON.parse('{"path":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html","title":"Sort|冒泡排序 (Bubble Sort)","lang":"zh-CN","frontmatter":{"title":"Sort|冒泡排序 (Bubble Sort)","order":2,"category":["algorithm"],"description":"冒泡排序 (Bubble Sort) 实现步骤 第一次，左边开始两两对比,如果左边的值大于右边的值,就交换它们，对比结束时末尾是最大数字 第二次，剔除末尾，重复步骤1。 依此类推，进行第三次、第四次，直到整个数组有序。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"Sort|冒泡排序 (Bubble Sort)"}],["meta",{"property":"og:description","content":"冒泡排序 (Bubble Sort) 实现步骤 第一次，左边开始两两对比,如果左边的值大于右边的值,就交换它们，对比结束时末尾是最大数字 第二次，剔除末尾，重复步骤1。 依此类推，进行第三次、第四次，直到整个数组有序。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sort|冒泡排序 (Bubble Sort)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"冒泡排序 (Bubble Sort)","slug":"冒泡排序-bubble-sort","link":"#冒泡排序-bubble-sort","children":[{"level":3,"title":"实现步骤","slug":"实现步骤","link":"#实现步骤","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.23,"words":370},"filePathRelative":"algorithm/sort[排序]/02bubbleSort.md","localizedDate":"2023年11月23日","excerpt":"<h2>冒泡排序 (Bubble Sort)</h2>\\n\\n<h3>实现步骤</h3>\\n<ol>\\n<li>第一次，左边开始两两对比,如果左边的值大于右边的值,就交换它们，对比结束时末尾是最大数字</li>\\n<li>第二次，剔除末尾，重复步骤1。</li>\\n<li>依此类推，进行第三次、第四次，直到整个数组有序。</li>\\n</ol>\\n\\n","autoDesc":true}')}}]);