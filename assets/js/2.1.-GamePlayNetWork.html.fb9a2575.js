"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[7468],{871:(n,a,s)=>{n.exports=s.p+"assets/img/replicate011.9a5468e1.png"},75128:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>S,data:()=>q});var e=s(20641),t=s(871);const i=s.p+"assets/img/replicate012.ad620c7a.png",p=s.p+"assets/img/replicate013.d828562f.png",l=s.p+"assets/img/replicate014.a3c528f3.png",c=s.p+"assets/img/replicate023.9dcffe26.jpg",o=s.p+"assets/img/replicate015.79e246da.png",d=s.p+"assets/img/replicate017.96f7bbaf.jpg",r=s.p+"assets/img/replicate019.beaec376.png",u=s.p+"assets/img/replicate018.95d8cb97.png",k=s.p+"assets/img/replicate022.0155f5df.jpg",m=s.p+"assets/img/replicate020.91dfcc72.png",v=s.p+"assets/img/replicate021.862f1315.png",b=(0,e.Lk)("h2",{id:"前情提要",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#前情提要"},[(0,e.Lk)("span",null,"前情提要")])],-1),g=(0,e.Lk)("h2",{id:"解决流程",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#解决流程"},[(0,e.Lk)("span",null,"解决流程")])],-1),h=(0,e.Lk)("h3",{id:"bp",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#bp"},[(0,e.Lk)("span",null,"BP")])],-1),f=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),y=(0,e.Fv)('<h3 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>   <span class="token comment">// .h</span>\n   <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>\n   <span class="token keyword">void</span> <span class="token function">ServerSetHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// .cpp</span>\n   <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerSetHealth_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token punctuation">{</span>\n     <span class="token comment">//spawn的代码</span>\n   <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="本章导读" tabindex="-1"><a class="header-anchor" href="#本章导读"><span>本章导读</span></a></h2>',3),L=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),O=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),R=(0,e.Lk)("h2",{id:"bp-multicast",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#bp-multicast"},[(0,e.Lk)("span",null,"BP|Multicast")])],-1),_=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:l,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),N=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),F=(0,e.Fv)('<h2 id="c-multicast" tabindex="-1"><a class="header-anchor" href="#c-multicast"><span>C++|Multicast</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>   <span class="token comment">// .h</span>\n   <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>\n   <span class="token keyword">void</span> <span class="token function">ServerSetHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// .cpp</span>\n   <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerSetHealth_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token punctuation">{</span>\n     <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n    <span class="token comment">// 在 .h </span>\n    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>NetMulticast<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 在 .cpp </span>\n    <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">MulticastFunction_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n    <span class="token punctuation">{</span>\n    <span class="token comment">//实现移动逻辑。</span>\n    <span class="token punctuation">}</span>\n   \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="变量复制" tabindex="-1"><a class="header-anchor" href="#变量复制"><span>变量复制</span></a></h3>',3),C=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),M=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),P=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:r,alt:"变量没有复制",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption",null,"变量没有复制")],-1),x=(0,e.Fv)('<h2 id="bp-1" tabindex="-1"><a class="header-anchor" href="#bp-1"><span>BP</span></a></h2><h3 id="变量-replicated" tabindex="-1"><a class="header-anchor" href="#变量-replicated"><span>变量|Replicated</span></a></h3><blockquote><p>开启复制后，变量右上角会出现两个泡泡。</p></blockquote><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),E=(0,e.Lk)("h3",{id:"变量-repnotify",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#变量-repnotify"},[(0,e.Lk)("span",null,"变量|RepNotify")])],-1),I=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),W=(0,e.Lk)("p",null,[(0,e.eW)("至于RepNotify,是指该变量发生"),(0,e.Lk)("code",null,"变化"),(0,e.eW)("时会触发一个回调函数，同时在服务器和客户端机器上执行此函数。")],-1),T=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),D=(0,e.Fv)('<figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="c-1" tabindex="-1"><a class="header-anchor" href="#c-1"><span>C++</span></a></h2><div class="hint-container note"><p class="hint-container-title">注</p><p>C++：在服务器中更改 OnRep 变量时，仅当变量的值发生更改时，才会在客户端上触发 OnRep 行为。 服务器不会触发 OnRep，这意味着如果我们希望在服务器中执行 OnRep 行为，我们必须从服务器显式调用它。</p><p>蓝图：当我们在服务器中设置 OnRep 变量时，OnRep 行为将始终在服务器上触发（即使变量的值没有更改）。 但是，仅当 OnRep 的变量发生更改时，才会在客户端上触发 OnRep 行为。此外，无法显式调用由 OnRep 变量创建的 OnRep 函数。</p></div><h3 id="c-replicated" tabindex="-1"><a class="header-anchor" href="#c-replicated"><span>C++|Replicated</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Replicated<span class="token punctuation">)</span>\n<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>\n\n<span class="token comment">// 在 .cpp 文件中设置变量同步</span>\n<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-repnotify-onrep" tabindex="-1"><a class="header-anchor" href="#c-repnotify-onrep"><span>C++|RepNotify|OnRep</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>ReplicatedUsing <span class="token operator">=</span> OnRep_MyVariable<span class="token punctuation">)</span>\n<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>\n\n<span class="token comment">// 在 .cpp 文件中设置变量同步，并声明 OnRep_MyVariable 函数</span>\n<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n   <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// OnRep_MyVariable 函数将在 MyVariable 发生变化时被调用</span>\n<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_MyVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 在这里添加在变量改变时执行的逻辑</span>\n   <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;MyVariable changed to: %f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="c-doreplifetime变量的复制规则" tabindex="-1"><a class="header-anchor" href="#c-doreplifetime变量的复制规则"><span>C++|<code>DOREPLIFETIME</code>变量的复制规则</span></a></h3><h4 id="doreplifetime" tabindex="-1"><a class="header-anchor" href="#doreplifetime"><span>DOREPLIFETIME:</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏用于声明一个类的变量需要在网络上进行复制。它会自动生成必要的复制代码。</p><h4 id="doreplifetime-condition" tabindex="-1"><a class="header-anchor" href="#doreplifetime-condition"><span>DOREPLIFETIME_CONDITION:</span></a></h4>',12),w=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">,</span> ReplicationCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏也用于声明一个类的变量需要在网络上进行复制，但允许添加一个额外的条件。<code>ReplicationCondition</code> 是一个用于判断是否进行复制的布尔表达式。只有在这个表达式为真时，复制才会发生。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>条件标签</th><th>描述</th></tr></thead><tbody><tr><td><code>COND_InitialOnly</code></td><td>仅在初始数据组尝试发送</td></tr><tr><td><code>COND_OwnerOnly</code></td><td>仅发送至 actor 的所有者</td></tr><tr><td><code>COND_SkipOwner</code></td><td>发送至除所有者之外的每个连接</td></tr><tr><td><code>COND_SimulatedOnly</code></td><td>仅发送至模拟 actor</td></tr><tr><td><code>COND_AutonomousOnly</code></td><td>仅发送给自治 actor</td></tr><tr><td><code>COND_SimulatedOrPhysics</code></td><td>发送至模拟或 <code>bRepPhysics</code> actor</td></tr><tr><td><code>COND_InitialOrOwner</code></td><td>发送初始数据包，或者发送至 actor 所有者</td></tr><tr><td><code>COND_Custom</code></td><td>没有特定条件，但需要通过 <code>SetCustomIsActiveOverride</code> 开启/关闭能力</td></tr></tbody></table>',5),A={},S=(0,s(66262).A)(A,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("gifwithbutton");return(0,e.uX)(),(0,e.CE)("div",null,[b,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 前文，咱们已经解决了客户端SpawnActor服务端不显示的问题。 ")])),_:1}),g,h,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 定义一个在服务器上调用的事件，并确保Actor本身可以复制。 ")])),_:1}),f,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup12.gif"}),y,(0,e.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我修改了角色的速度，也调用了服务器上执行。为什么客户端上一卡一卡的？ ")])),_:1}),L,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup13.gif"}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 速度是角色移动组件的属性 ")])),_:1}),O,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 官方并没有个速度这个变量搞成可复制的。虽然你现在RunOnServer，并没有同步给其他客户端。 ")])),_:1}),(0,e.bF)(t,{src:"../../assets/unrealgif/hpup14.gif"}),R,(0,e.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 也就是说，RPC申请在服务器上调用，还需要广播给所有客户端？ ")])),_:1}),_,N,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 没错。 ")])),_:1}),F,(0,e.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 为什么这里的速度不复制也能正常运行？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 速度虽然没有同步，但在所有端的变化量是一致的。 ")])),_:1}),C,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 现在可以将其中一个变量提取出来，设置成所谓MaxSpeed。用一个按键改变速度，你就会发现猫腻。 ")])),_:1}),M,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 服务器才有权威，没毛病。 ")])),_:1}),P,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup15.gif"}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 可以看到虽然客户端速度降下来了，但还是一抽一抽的。现在我们开启变量的复制功能， ")])),_:1}),x,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup16.gif"}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 可以看到抽搐消失了，请忽略我们的动作还是跑步，因为目前的角色并不是速度驱动动作的。 ")])),_:1}),E,I,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[W])),_:1}),T,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup17.gif"}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 例如OnRep_PlayerState这种就是RepNotify ")])),_:1}),D,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 当然，这里的通知可以限定一些行为，比如谁才能收到。 ")])),_:1}),w])}]]),q=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html","title":"NT-2.1|变量复制","lang":"zh-CN","frontmatter":{"title":"NT-2.1|变量复制","order":21,"category":["unreal"],"description":"前情提要 解决流程 BP","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.1|变量复制"}],["meta",{"property":"og:description","content":"前情提要 解决流程 BP"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T14:42:56.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-03-20T14:42:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.1|变量复制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T14:42:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"前情提要","slug":"前情提要","link":"#前情提要","children":[]},{"level":2,"title":"解决流程","slug":"解决流程","link":"#解决流程","children":[{"level":3,"title":"BP","slug":"bp","link":"#bp","children":[]},{"level":3,"title":"C++","slug":"c","link":"#c","children":[]}]},{"level":2,"title":"本章导读","slug":"本章导读","link":"#本章导读","children":[]},{"level":2,"title":"BP|Multicast","slug":"bp-multicast","link":"#bp-multicast","children":[]},{"level":2,"title":"C++|Multicast","slug":"c-multicast","link":"#c-multicast","children":[{"level":3,"title":"变量复制","slug":"变量复制","link":"#变量复制","children":[]}]},{"level":2,"title":"BP","slug":"bp-1","link":"#bp-1","children":[{"level":3,"title":"变量|Replicated","slug":"变量-replicated","link":"#变量-replicated","children":[]},{"level":3,"title":"变量|RepNotify","slug":"变量-repnotify","link":"#变量-repnotify","children":[]}]},{"level":2,"title":"C++","slug":"c-1","link":"#c-1","children":[{"level":3,"title":"C++|Replicated","slug":"c-replicated","link":"#c-replicated","children":[]},{"level":3,"title":"C++|RepNotify|OnRep","slug":"c-repnotify-onrep","link":"#c-repnotify-onrep","children":[]},{"level":3,"title":"C++|DOREPLIFETIME变量的复制规则","slug":"c-doreplifetime变量的复制规则","link":"#c-doreplifetime变量的复制规则","children":[]}]}],"git":{"createdTime":1709675291000,"updatedTime":1710945776000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":4}]},"readingTime":{"minutes":4.12,"words":1237},"filePathRelative":"unreal/network[网络]/2.1.-GamePlayNetWork.md","localizedDate":"2024年3月5日","excerpt":"<h2>前情提要</h2>\\n\\n<h2>解决流程</h2>\\n<h3>BP</h3>\\n\\n<figure><figcaption></figcaption></figure>\\n","autoDesc":true}')}}]);