"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[972],{48326:(n,a,s)=>{n.exports=s.p+"assets/img/libexpcpp.073f8f1d.jpg"},84050:(n,a,s)=>{n.exports=s.p+"assets/img/uparam-ref.fc6045b6.jpg"},9279:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>u,data:()=>k});var t=s(20641),p=s(48326);const e=s.p+"assets/img/UEvaluepass.abc71b54.jpg";var o=s(84050);const c=(0,t.Lk)("h2",{id:"实践",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#实践"},[(0,t.Lk)("span",null,"实践")])],-1),l=(0,t.Lk)("h3",{id:"_1-新建一个蓝图函数库类",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_1-新建一个蓝图函数库类"},[(0,t.Lk)("span",null,"1. 新建一个蓝图函数库类")])],-1),i=(0,t.Fv)('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-const控制" tabindex="-1"><a class="header-anchor" href="#_2-const控制"><span>2. Const控制</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值传递&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyValue</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span>Camera<span class="token punctuation">,</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyConstReference</span><span class="token punctuation">(</span><span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span> <span class="token keyword">const</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;const修饰的值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    \t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span>int32 <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-uparam-ref" tabindex="-1"><a class="header-anchor" href="#_3-uparam-ref"><span>3. <code>UPARAM(ref)</code></span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">FillDogInfo</span><span class="token punctuation">(</span>FDogInfo<span class="token operator">&amp;</span> OutResult<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">UseAndFillDogInfo</span><span class="token punctuation">(</span>\n    <span class="token function">UPARAM</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> FDogInfo<span class="token operator">&amp;</span> SearchParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">UseDogInfo</span><span class="token punctuation">(</span><span class="token keyword">const</span> FDogInfo<span class="token operator">&amp;</span> SearchParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><h3 id="蓝图中数组只能用引用传递。" tabindex="-1"><a class="header-anchor" href="#蓝图中数组只能用引用传递。"><span>蓝图中数组只能用引用传递。</span></a></h3>',9),r={},u=(0,s(66262).A)(r,[["render",function(n,a){const s=(0,t.g2)("chatmessage"),p=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 测试不同传参方法对应的蓝图节点结果 ")])),_:1}),c,l,(0,t.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 蓝图函数库是一个静态函数的合集，便于测试 ")])),_:1}),i,(0,t.bF)(p,{src:"../../assets/unrealgif/defalutreference.gif"})])}]]),k=JSON.parse('{"path":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html","title":"EXP3.C++控制蓝图节点输入输出","lang":"zh-CN","frontmatter":{"title":"EXP3.C++控制蓝图节点输入输出","order":3,"category":["u++"],"description":"实践 1. 新建一个蓝图函数库类 2. Const控制 3. UPARAM(ref) 其他 蓝图中数组只能用引用传递。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"EXP3.C++控制蓝图节点输入输出"}],["meta",{"property":"og:description","content":"实践 1. 新建一个蓝图函数库类 2. Const控制 3. UPARAM(ref) 其他 蓝图中数组只能用引用传递。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EXP3.C++控制蓝图节点输入输出\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[{"level":3,"title":"1. 新建一个蓝图函数库类","slug":"_1-新建一个蓝图函数库类","link":"#_1-新建一个蓝图函数库类","children":[]},{"level":3,"title":"2. Const控制","slug":"_2-const控制","link":"#_2-const控制","children":[]},{"level":3,"title":"3. UPARAM(ref)","slug":"_3-uparam-ref","link":"#_3-uparam-ref","children":[]}]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"蓝图中数组只能用引用传递。","slug":"蓝图中数组只能用引用传递。","link":"#蓝图中数组只能用引用传递。","children":[]}]}],"git":{"createdTime":1701100984000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":4},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":0.64,"words":192},"filePathRelative":"unreal/exp[经验]/3-Blueprint2CPP-1.md","localizedDate":"2023年11月27日","excerpt":"\\n<h2>实践</h2>\\n<h3>1. 新建一个蓝图函数库类</h3>\\n\\n<figure><figcaption></figcaption></figure>\\n<h3>2. Const控制</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>\\t<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span>BlueprintCallable<span class=\\"token punctuation\\">,</span> Category <span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"TEST\\"</span><span class=\\"token punctuation\\">,</span>meta <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span> tooltip <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"值传递\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">PassbyValue</span><span class=\\"token punctuation\\">(</span>TArray<span class=\\"token operator\\">&lt;</span>ACameraActor<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span>Camera<span class=\\"token punctuation\\">,</span> int32 test<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span>BlueprintCallable<span class=\\"token punctuation\\">,</span> Category <span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"TEST\\"</span><span class=\\"token punctuation\\">,</span>meta <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span> tooltip <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"值引用\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">PassbyConstReference</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> TArray<span class=\\"token operator\\">&lt;</span>ACameraActor<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> Camera<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> int32 test<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span>BlueprintCallable<span class=\\"token punctuation\\">,</span> Category <span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"TEST\\"</span><span class=\\"token punctuation\\">,</span>meta <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span> tooltip <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"const修饰的值引用\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n    \\t<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">PassbyReference</span><span class=\\"token punctuation\\">(</span>TArray<span class=\\"token operator\\">&lt;</span>ACameraActor<span class=\\"token operator\\">*</span><span class=\\"token operator\\">&gt;</span><span class=\\"token operator\\">&amp;</span> Camera<span class=\\"token punctuation\\">,</span>int32 <span class=\\"token operator\\">&amp;</span>test<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);