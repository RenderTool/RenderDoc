"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2475],{36391:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>O,data:()=>P});var t=s(20641);const e=s.p+"assets/img/Option001.0cb075b0.jpg",p=s.p+"assets/img/Option002.31222945.jpg",o=s.p+"assets/img/Option003.20a20308.png",i=(0,t.Lk)("h2",{id:"玩转uproperty",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#玩转uproperty"},[(0,t.Lk)("span",null,"玩转UPROPERTY")])],-1),c=(0,t.Lk)("h3",{id:"getoptions",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#getoptions"},[(0,t.Lk)("span",null,"GetOptions")])],-1),l=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UENUM</span><span class="token punctuation">(</span>Meta <span class="token operator">=</span> <span class="token punctuation">(</span>Bitflags<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EColorBits</span>\n<span class="token punctuation">{</span>\n    ECB_Red<span class="token punctuation">,</span>\n    ECB_Green<span class="token punctuation">,</span>\n    ECB_Blue\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),r=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span>VisibleAnywhere<span class="token punctuation">)</span>\nFName Name<span class="token punctuation">;</span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditDefaultsOnly<span class="token punctuation">,</span> BlueprintReadOnly<span class="token punctuation">)</span>\nTMap<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> TObjectPtr<span class="token operator">&lt;</span>UXXXX<span class="token operator">&gt;&gt;</span> NameMap<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),u=(0,t.Lk)("div",{class:"hint-container note"},[(0,t.Lk)("p",{class:"hint-container-title"},"注"),(0,t.Lk)("p",null,"GetOptions"),(0,t.Lk)("p",null,[(0,t.eW)('使得 FString 和 FName 类型的属性能够动态生成一组有限的选项，例如使用 meta=(GetOptions="FuncName")。'),(0,t.Lk)("br"),(0,t.eW)(' 同时它支持通过 "Module.Class.Function" 这种语法引用外部的静态函数。')])],-1),d=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code> TArray<span class="token operator">&lt;</span>FString<span class="token operator">&gt;</span> <span class="token function">GetNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;牛逼&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不牛逼&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>GetOptions <span class="token operator">=</span> <span class="token string">&quot;GetNames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n FName Names<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),k=(0,t.Lk)("h3",{id:"配合udevelopersettingsbackedbycvars",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#配合udevelopersettingsbackedbycvars"},[(0,t.Lk)("span",null,"配合UDeveloperSettingsBackedByCVars")])],-1),v=(0,t.Lk)("h3",{id:"函数调用",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#函数调用"},[(0,t.Lk)("span",null,"函数调用")])],-1),m=(0,t.Lk)("h4",{id:"_1-引用外部的静态函数",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_1-引用外部的静态函数"},[(0,t.Lk)("span",null,"1. 引用外部的静态函数")])],-1),g=(0,t.Lk)("p",null,[(0,t.Lk)("code",null," Module.Class.Function"),(0,t.eW)(" 以官方的"),(0,t.Lk)("code",null,"UColorInputDeviceProperty"),(0,t.eW)("为例")],-1),b=(0,t.Fv)('<figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-类内可直接调用" tabindex="-1"><a class="header-anchor" href="#_2-类内可直接调用"><span>2.类内可直接调用</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code> TArray<span class="token operator">&lt;</span>FString<span class="token operator">&gt;</span> <span class="token function">GetNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;牛逼&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不牛逼&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>GetOptions <span class="token operator">=</span> <span class="token string">&quot;GetNames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n FName Names<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),y=(0,t.Lk)("p",null,[(0,t.eW)("爹地带你玩点花的，例如你的资产类中需要配置一些资产片段(TMap),并且希望根据"),(0,t.Lk)("code",null,"PrimaryAssetType"),(0,t.eW)("指定一套片段规则")],-1),f=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\n<span class="token comment">/**\n*UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category=Display, Instanced, meta = (GetOptions = &quot;GetFragmentNameOptions&quot;))\n*TMap&lt;FName, TObjectPtr&lt;UDataFragmentBase&gt;&gt; FragmentMap;\n*/</span>\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> <span class="token function">GetFragmentNameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\t\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>\t<span class="token comment">// WITH_EDITOR</span></span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditDefaultsOnly<span class="token punctuation">,</span> BlueprintReadOnly<span class="token punctuation">,</span> Category<span class="token operator">=</span> Fragment<span class="token punctuation">,</span> Instanced<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>GetOptions <span class="token operator">=</span> <span class="token string">&quot;GetFragmentNameOptions&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nTMap<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> TObjectPtr<span class="token operator">&lt;</span>UDataFragmentBase<span class="token operator">&gt;&gt;</span> FragmentMap<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\nTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> <span class="token class-name">UDataDefinition</span><span class="token double-colon punctuation">::</span><span class="token function">GetFragmentNameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\tTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> Options<span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> UDataSystemSettings<span class="token operator">*</span> Settings <span class="token operator">=</span> <span class="token generic-function"><span class="token function">GetDefault</span><span class="token generic class-name"><span class="token operator">&lt;</span>UDataSystemSettings<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Settings<span class="token punctuation">)</span> <span class="token keyword">return</span> Options<span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span><span class="token punctuation">(</span>bUseGlobalConfig<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tOptions <span class="token operator">=</span> Settings<span class="token operator">-&gt;</span>GlobalFragmentKeys<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">else</span>\n\t<span class="token punctuation">{</span>\n\t\tOptions <span class="token operator">=</span> Settings<span class="token operator">-&gt;</span>FragmentKeyPresets<span class="token punctuation">.</span><span class="token function">FindRef</span><span class="token punctuation">(</span><span class="token function">GetPrimaryAssetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>PrimaryAssetType<span class="token punctuation">)</span><span class="token punctuation">.</span>PresetKeys<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token keyword">return</span> Options<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span>\t<span class="token comment">// WITH_EDITOR</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UCLASS</span><span class="token punctuation">(</span>config<span class="token operator">=</span>Game<span class="token punctuation">,</span> defaultconfig<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;DataSystemSettings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">DATASYSTEM_API</span> UDataSystemSettings <span class="token operator">:</span> <span class="token keyword">public</span> UDeveloperSettingsBackedByCVars\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token comment">/** \n\t * 按 `PrimaryAssetType` 分类的 Fragment Key 预设映射\n\t * - 主要用于不同类型的 `UDataDefinition` 具有不同的 `FragmentMap` Key 下拉选项\n\t * - 例如：`装备` 可能有 `PickUp`, `BaseInfo`, `Skin` 等\n\t */</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Config<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Fragment Key Presets&quot;</span><span class="token punctuation">)</span>\n\tTMap<span class="token operator">&lt;</span>FPrimaryAssetType<span class="token punctuation">,</span> FFragmentKeyPreset<span class="token operator">&gt;</span> FragmentKeyPresets<span class="token punctuation">;</span>\n\n\t<span class="token comment">/** \n\t * 全局 Fragment Key 预设（适用于所有 `UDataDefinition`）\n\t * - 如果人工勾选bUseGlobalConfig为true，则直接使用这些通用 Key\n\t * - 如果 `FragmentKeyPresets` 中没有匹配的 `PrimaryAssetType`，则使用这些通用 Key\n\t */</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Config<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;Fragment Key Presets&quot;</span><span class="token punctuation">)</span>\n\tTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> GlobalFragmentKeys<span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),h=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),F={},O=(0,s(66262).A)(F,[["render",function(n,a){const s=(0,t.g2)("chatmessage"),e=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[i,c,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 爹地带你玩点高级刺激的东西 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 什么东西！ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你是否使用过Enum? ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 用过怎么了！ ")])),_:1}),l,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没怎么，我接着问你，你是否使用过FName或FString？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 用过怎么了？ ")])),_:1}),r,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 那我问你，Enum是不是可以在编辑器中下拉选择某一项？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 对啊！难不成FName或FString也能下拉选择某一项？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 有的，哥们有的！ ")])),_:1}),u,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 不明觉厉！ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 给你整个例子： ")])),_:1}),d,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 也就是说这样FName/FString也可以像枚举那样使用预设了！可是,这有个屌用，我总不能写在代码中吧！ ")])),_:1}),k,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 年轻人，你可还记得之前说过怎么在设置配置一些默认配置？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 搜得寺内！你的意思是可以预设一些规则在默认配置中，然后调用获取？可是该怎么跨类调用呢？ ")])),_:1}),v,m,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[g])),_:1}),b,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[y])),_:1}),f,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 卧槽！这样就可以配置一些片段规则了！我之前还发愁如果用了FName怎么像枚举一样配置规则！ ")])),_:1}),h,(0,t.bF)(e,{src:"../../assets/unrealgif/hpup48.gif"})])}]]),P=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/5.1-UPROPERTY.html","title":"F5.1 玩转UPROPERTY-GetOptions","lang":"zh-CN","frontmatter":{"title":"F5.1 玩转UPROPERTY-GetOptions","order":6,"category":["u++"],"tag":["Specifiers"],"description":"玩转UPROPERTY GetOptions 注 GetOptions 使得 FString 和 FName 类型的属性能够动态生成一组有限的选项，例如使用 meta=(GetOptions=\\"FuncName\\")。 同时它支持通过 \\"Module.Class.Function\\" 这种语法引用外部的静态函数。 配合UDeveloperSettingsB...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/5.1-UPROPERTY.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F5.1 玩转UPROPERTY-GetOptions"}],["meta",{"property":"og:description","content":"玩转UPROPERTY GetOptions 注 GetOptions 使得 FString 和 FName 类型的属性能够动态生成一组有限的选项，例如使用 meta=(GetOptions=\\"FuncName\\")。 同时它支持通过 \\"Module.Class.Function\\" 这种语法引用外部的静态函数。 配合UDeveloperSettingsB..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-24T18:51:18.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"Specifiers"}],["meta",{"property":"article:modified_time","content":"2025-03-24T18:51:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F5.1 玩转UPROPERTY-GetOptions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-24T18:51:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"玩转UPROPERTY","slug":"玩转uproperty","link":"#玩转uproperty","children":[{"level":3,"title":"GetOptions","slug":"getoptions","link":"#getoptions","children":[]},{"level":3,"title":"配合UDeveloperSettingsBackedByCVars","slug":"配合udevelopersettingsbackedbycvars","link":"#配合udevelopersettingsbackedbycvars","children":[]},{"level":3,"title":"函数调用","slug":"函数调用","link":"#函数调用","children":[]}]}],"git":{"createdTime":1742842278000,"updatedTime":1742842278000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.67,"words":800},"filePathRelative":"unreal/function[函数]/5.1-UPROPERTY.md","localizedDate":"2025年3月24日","excerpt":"<h2>玩转UPROPERTY</h2>\\n<h3>GetOptions</h3>\\n\\n\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UENUM</span><span class=\\"token punctuation\\">(</span>Meta <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Bitflags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">enum</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">EColorBits</span>\\n<span class=\\"token punctuation\\">{</span>\\n    ECB_Red<span class=\\"token punctuation\\">,</span>\\n    ECB_Green<span class=\\"token punctuation\\">,</span>\\n    ECB_Blue\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);