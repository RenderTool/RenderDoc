"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[5892],{33136:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>r});var t=s(20641);const e=(0,t.Lk)("h3",{id:"概念",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#概念"},[(0,t.Lk)("span",null,"概念")])],-1),p=(0,t.Lk)("p",null,"浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。",-1),o=(0,t.Lk)("p",null,"而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。",-1),l=(0,t.Fv)('<h4 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝"><span>浅拷贝：</span></a></h4><ul><li><p><strong>定义：</strong> 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。</p></li><li><p><strong>判断：</strong> 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。</p></li><li><p><strong>示例：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">ShallowCopyExample</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>\n\n    <span class="token function">ShallowCopyExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShallowCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">=</span> other<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 浅拷贝，只复制指针值，不复制内容</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝"><span>深拷贝：</span></a></h4><ul><li><p><strong>定义：</strong> 深拷贝是指对对象进行复制，不仅复制对象的值，还复制对象所指向的内容。</p></li><li><p><strong>判断：</strong> 当类中包含动态分配内存的成员变量时，需要手动编写复制构造函数和赋值操作符重载来实现深拷贝。</p></li><li><p><strong>示例：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">DeepCopyExample</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>\n\n    <span class="token function">DeepCopyExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> DeepCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 深拷贝，复制内容</span>\n    <span class="token punctuation">}</span>\n\n    DeepCopyExample<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> DeepCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">delete</span> data<span class="token punctuation">;</span>  <span class="token comment">// 释放原有的动态内存</span>\n            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 深拷贝，复制内容</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h2><p>这两种拷贝方式各有优缺点，具体使用取决于程序的需求和设计。</p><p>浅拷贝通常更高效，但需要小心避免意外修改原始数据。 深拷贝则更安全，但可能涉及到更多的资源开销，特别是对于大型数据结构。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><table><thead><tr><th>行为</th><th>深拷贝（Deep Copy）</th><th>浅拷贝（Shallow Copy）</th></tr></thead><tbody><tr><td>复制基本数据类型</td><td>创建独立的副本</td><td>创建副本，共享相同的值</td></tr><tr><td>复制数组（静态或动态）</td><td>复制所有元素，创建独立副本</td><td>复制数组对象，共享元素</td></tr><tr><td>复制对象（自定义类）</td><td>递归复制所有成员，创建独立副本</td><td>复制对象，共享引用类型的成员</td></tr><tr><td>复制嵌套对象</td><td>深度复制所有嵌套对象</td><td>复制外层对象，共享内部对象</td></tr></tbody></table>',9),c={},i=(0,s(66262).A)(c,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 深拷贝和浅拷贝是什么？ ")])),_:1}),e,p,(0,t.bF)(s,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 浅拷贝中，传递的是引用，所以对引用的修改会反映在原始数据上。 ")])),_:1}),o,(0,t.bF)(s,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 深拷贝中，创建了一个新的数据副本，对其的修改不会影响原始数据。 ")])),_:1}),l])}]]),r=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html","title":"c++6.浅拷贝|深拷贝","lang":"zh-CN","frontmatter":{"title":"c++6.浅拷贝|深拷贝","order":6,"category":["c++"],"description":"概念 浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。 而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。 浅拷贝： 定义： 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。 判断： 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。 示例： 深拷贝： 定义： 深拷贝是指对对...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++6.浅拷贝|深拷贝"}],["meta",{"property":"og:description","content":"概念 浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。 而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。 浅拷贝： 定义： 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。 判断： 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。 示例： 深拷贝： 定义： 深拷贝是指对对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++6.浅拷贝|深拷贝\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":3},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"language/cpp/BaseGuide[基础概念]/5-copymode.md","localizedDate":"2023年11月23日","excerpt":"\\n<h3>概念</h3>\\n<p>浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。</p>\\n\\n<p>而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。</p>\\n\\n<h4>浅拷贝：</h4>\\n<ul>\\n<li>\\n<p><strong>定义：</strong> 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。</p>\\n</li>\\n<li>\\n<p><strong>判断：</strong> 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。</p>\\n</li>\\n<li>\\n<p><strong>示例：</strong></p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ShallowCopyExample</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> data<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">ShallowCopyExample</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> ShallowCopyExample<span class=\\"token operator\\">&amp;</span> other<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        data <span class=\\"token operator\\">=</span> other<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 浅拷贝，只复制指针值，不复制内容</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n</ul>","autoDesc":true}')}}]);