"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[7802],{20551:(e,n,a)=>{a.r(n),a.d(n,{comp:()=>r,data:()=>p});var s=a(20641);const i=a.p+"assets/img/ide.493cc2ff.png",t=a.p+"assets/img/idegitignore.d6e45bb7.png",l=(0,s.Fv)('<h2 id="忽略规则" tabindex="-1"><a class="header-anchor" href="#忽略规则"><span>忽略规则</span></a></h2><blockquote><p>首先你需要在项目根目录下新建一个 <code>.gitignore</code> 文件</p></blockquote><ul><li>空格不匹配任何文件，可以作为分隔符号</li><li>以 <code>#</code> 开始的为注释</li><li><code>\\</code> 表示转义符</li><li><code>!</code> 开始的表示否定，也就是开启跟踪</li><li><code>/</code> 开始的表示项目根目录</li><li><code>/</code> 结尾的表示某个文件夹，但是不匹配该文件</li><li><code>**</code> 表示多级，其位置可在开始，中间，结束</li><li><code>?</code> 表示单个字符</li><li><code>[]</code> 表示单个字符列表</li></ul><h2 id="忽略示例" tabindex="-1"><a class="header-anchor" href="#忽略示例"><span>忽略示例</span></a></h2><h3 id="_1-文件" tabindex="-1"><a class="header-anchor" href="#_1-文件"><span>1. 文件</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 忽略 所有 a.txt 文件</span>\na.txt\n<span class="token comment"># 仅忽略根目录下的 a.txt 文件</span>\n/a.txt\n<span class="token comment"># 忽略 config 目录下的 secret.json</span>\nconfig/secret.json\n<span class="token comment"># 忽略 所有的 .env 结尾的文件</span>\n*.env\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-目录" tabindex="-1"><a class="header-anchor" href="#_2-目录"><span>2. 目录</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 忽略 node_modules 目录</span>\nnode_modules/\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-取反" tabindex="-1"><a class="header-anchor" href="#_3-取反"><span>3. 取反</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 跟踪 public 目录下的 .env 文件</span>\n<span class="token operator">!</span>public/.env\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-组合" tabindex="-1"><a class="header-anchor" href="#_4-组合"><span>4. 组合</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 忽略 docs 下的所有 .md 文件</span>\ndocs/*.md <span class="token comment"># 这是错误的，因为不能忽略 `docs/git/` 目录下的文件</span>\ndocs/**/*.md <span class="token comment"># 正确结果</span>\n\n<span class="token comment"># 忽略以 .a 、.b 或 .c 结尾的文件</span>\n*.<span class="token punctuation">[</span>abc<span class="token punctuation">]</span> <span class="token comment"># 正确</span>\n*.<span class="token punctuation">[</span>a-c<span class="token punctuation">]</span> <span class="token comment"># 也正确</span>\n\n<span class="token comment"># 忽略 docs 下的除 secret 命名的所有文件</span>\ndocs/\n<span class="token operator">!</span>docs/secret.*\n\n<span class="token comment">## 忽略 src 下的所有 index.js 文件</span>\nsrc/**/index.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="规则不生效" tabindex="-1"><a class="header-anchor" href="#规则不生效"><span>规则不生效</span></a></h2><p><code>.gitignore</code> 指定的是未跟踪文件，已经跟踪的（tracked）不受影响。</p><p>解决方法就是清除本地缓存再提交：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span>\n\n<span class="token comment"># 示例 -- 取消某个文件</span>\n<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> a.txt\n<span class="token comment"># 示例 -- 取消某个文件夹</span>\n<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> a/\n<span class="token comment"># 示例 -- 取消所有文件</span>\n<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2>',17),c=(0,s.Fv)('<blockquote><p>以rider为例,通过界面可以设置哪些文件进行管理排除，简直不要太方便。</p></blockquote><figure><img src="'+i+'" alt="ide.png" tabindex="0" loading="lazy"><figcaption>ide.png</figcaption></figure><blockquote><p>并非凭空排除，依然使用<code>.gitignore</code></p></blockquote><figure><img src="'+t+'" alt="idegitignore.png" tabindex="0" loading="lazy"><figcaption>idegitignore.png</figcaption></figure><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2>',5),d={href:"https://www.jetbrains.com/zh-cn/rider/",target:"_blank",rel:"noopener noreferrer"},o={},r=(0,a(66262).A)(o,[["render",function(e,n){const a=(0,s.g2)("chatmessage"),i=(0,s.g2)("RouteLink"),t=(0,s.g2)("ExternalLinkIcon");return(0,s.uX)(),(0,s.CE)("div",null,[l,(0,s.bF)(a,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,s.k6)((()=>[(0,s.eW)(" 人生苦短，用IDE吧。 ")])),_:1}),c,(0,s.Lk)("p",null,[(0,s.eW)("如果你阅读本文有点吃力，或者对其中的git操作不太清楚，我强烈建议你看看我写的git基本操作篇。🤦‍♂️ "),(0,s.bF)(i,{to:"/tools/git/"},{default:(0,s.k6)((()=>[(0,s.eW)("1.git基本操作")])),_:1})]),(0,s.Lk)("p",null,[(0,s.Lk)("a",d,[(0,s.eW)("2.Rider"),(0,s.bF)(t)])])])}]]),p=JSON.parse('{"path":"/tools/git/1-gitignore.html","title":"Git-1.忽略跟踪的文件","lang":"zh-CN","frontmatter":{"title":"Git-1.忽略跟踪的文件","order":1,"category":["Git"],"description":"忽略规则 首先你需要在项目根目录下新建一个 .gitignore 文件 空格不匹配任何文件，可以作为分隔符号 以 # 开始的为注释 \\\\ 表示转义符 ! 开始的表示否定，也就是开启跟踪 / 开始的表示项目根目录 / 结尾的表示某个文件夹，但是不匹配该文件 ** 表示多级，其位置可在开始，中间，结束 ? 表示单个字符 [] 表示单个字符列表 忽略示例 1....","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/tools/git/1-gitignore.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"Git-1.忽略跟踪的文件"}],["meta",{"property":"og:description","content":"忽略规则 首先你需要在项目根目录下新建一个 .gitignore 文件 空格不匹配任何文件，可以作为分隔符号 以 # 开始的为注释 \\\\ 表示转义符 ! 开始的表示否定，也就是开启跟踪 / 开始的表示项目根目录 / 结尾的表示某个文件夹，但是不匹配该文件 ** 表示多级，其位置可在开始，中间，结束 ? 表示单个字符 [] 表示单个字符列表 忽略示例 1...."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git-1.忽略跟踪的文件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"忽略规则","slug":"忽略规则","link":"#忽略规则","children":[]},{"level":2,"title":"忽略示例","slug":"忽略示例","link":"#忽略示例","children":[{"level":3,"title":"1. 文件","slug":"_1-文件","link":"#_1-文件","children":[]},{"level":3,"title":"2. 目录","slug":"_2-目录","link":"#_2-目录","children":[]},{"level":3,"title":"3. 取反","slug":"_3-取反","link":"#_3-取反","children":[]},{"level":3,"title":"4. 组合","slug":"_4-组合","link":"#_4-组合","children":[]}]},{"level":2,"title":"规则不生效","slug":"规则不生效","link":"#规则不生效","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1698994095000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":8},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.68,"words":503},"filePathRelative":"tools/git/1-gitignore.md","localizedDate":"2023年11月3日","excerpt":"<h2>忽略规则</h2>\\n<blockquote>\\n<p>首先你需要在项目根目录下新建一个 <code>.gitignore</code> 文件</p>\\n</blockquote>\\n<ul>\\n<li>空格不匹配任何文件，可以作为分隔符号</li>\\n<li>以 <code>#</code> 开始的为注释</li>\\n<li><code>\\\\</code> 表示转义符</li>\\n<li><code>!</code> 开始的表示否定，也就是开启跟踪</li>\\n<li><code>/</code> 开始的表示项目根目录</li>\\n<li><code>/</code> 结尾的表示某个文件夹，但是不匹配该文件</li>\\n<li><code>**</code> 表示多级，其位置可在开始，中间，结束</li>\\n<li><code>?</code> 表示单个字符</li>\\n<li><code>[]</code> 表示单个字符列表</li>\\n</ul>","autoDesc":true}')}}]);