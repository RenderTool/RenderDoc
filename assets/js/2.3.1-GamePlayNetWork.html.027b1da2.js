"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[9909],{38764:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>b,data:()=>m});var e=s(20641);const t=s.p+"assets/img/us001.94014d40.png",p=s.p+"assets/img/us.1a55dc7e.png",o=(0,e.Lk)("h3",{id:"本章概要",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#本章概要"},[(0,e.Lk)("span",null,"本章概要")])],-1),c=(0,e.Lk)("p",null,"非Actor对象，比如原生的UObject如何实现同步？以及调用RPC",-1),l=(0,e.Lk)("h2",{id:"问题",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#问题"},[(0,e.Lk)("span",null,"问题")])],-1),i=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"服务端上查看客户端显示正常",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption",null,"服务端上查看客户端显示正常")],-1),r=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:p,alt:"客户端上可以看到UObject为未知",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption",null,"客户端上可以看到UObject为未知")],-1),u=(0,e.Fv)('<h2 id="变量同步" tabindex="-1"><a class="header-anchor" href="#变量同步"><span>变量同步</span></a></h2><h3 id="_1-重写-issupportedfornetworking" tabindex="-1"><a class="header-anchor" href="#_1-重写-issupportedfornetworking"><span>1. 重写 <code>IsSupportedForNetworking</code></span></a></h3><p>在自定义 <code>UObject</code> 类中重写 <code>IsSupportedForNetworking</code> 函数，使其返回 <code>true</code>，标记该对象支持网络复制。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">YOURGAME_API</span> UInventoryPickUpData <span class="token operator">:</span> <span class="token keyword">public</span> UObject\n<span class="token punctuation">{</span>\n    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsSupportedForNetworking</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Replicated<span class="token punctuation">)</span>\n    int32 ItemID<span class="token punctuation">;</span>\n\n    <span class="token comment">// 添加其他需要复制的属性</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-标记属性为-replicated" tabindex="-1"><a class="header-anchor" href="#_2-标记属性为-replicated"><span>2. 标记属性为 <code>Replicated</code></span></a></h3><p>确保复制的属性被标记为 <code>UPROPERTY(Replicated)</code> 或者使用 <code>ReplicateUsing</code>。</p><h3 id="_3-实现复制支持" tabindex="-1"><a class="header-anchor" href="#_3-实现复制支持"><span>3. 实现复制支持</span></a></h3><p>在拥有 <code>UObject</code> 子对象的类中，使用 <code>GetLifetimeReplicatedProps</code> 函数实现复制支持：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AYourActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 添加需要复制的子对象</span>\n    <span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>AYourActor<span class="token punctuation">,</span> InventoryItem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-调用-replicatesubobject" tabindex="-1"><a class="header-anchor" href="#_4-调用-replicatesubobject"><span>4. 调用 <code>ReplicateSubobject</code></span></a></h3><p>确保在 <code>AActor</code> 的 <code>GetSubobjectsWithStableNamesForNetworking</code> 或 <code>ReplicateSubobjects</code> 函数中调用 <code>ReplicateSubobject</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">AYourActor</span><span class="token double-colon punctuation">::</span><span class="token function">ReplicateSubobjects</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">UActorChannel</span><span class="token operator">*</span> Channel<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">FOutBunch</span><span class="token operator">*</span> Bunch<span class="token punctuation">,</span> FReplicationFlags<span class="token operator">*</span> RepFlags<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">bool</span> WroteSomething <span class="token operator">=</span> <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">ReplicateSubobjects</span><span class="token punctuation">(</span>Channel<span class="token punctuation">,</span> Bunch<span class="token punctuation">,</span> RepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>InventoryItem<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        WroteSomething <span class="token operator">|=</span> Channel<span class="token operator">-&gt;</span><span class="token function">ReplicateSubobject</span><span class="token punctuation">(</span>InventoryItem<span class="token punctuation">,</span> <span class="token operator">*</span>Bunch<span class="token punctuation">,</span> <span class="token operator">*</span>RepFlags<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> WroteSomething<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-初始化并确保对象正确创建" tabindex="-1"><a class="header-anchor" href="#_5-初始化并确保对象正确创建"><span>5. 初始化并确保对象正确创建</span></a></h3><p>在构造函数或其他初始化函数中创建和初始化子对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token class-name">AYourActor</span><span class="token double-colon punctuation">::</span><span class="token function">AYourActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    bReplicates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    InventoryItem <span class="token operator">=</span> <span class="token generic-function"><span class="token function">CreateDefaultSubobject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UInventoryPickUpData<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;InventoryItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rpc" tabindex="-1"><a class="header-anchor" href="#rpc"><span>RPC</span></a></h2>',16),d=(0,e.Fv)('<h3 id="_1-确保属性变量拥有uproperty-replicated-ufunction-等反射标记" tabindex="-1"><a class="header-anchor" href="#_1-确保属性变量拥有uproperty-replicated-ufunction-等反射标记"><span>1.确保属性变量拥有UPROPERTY(Replicated),UFUNCTION()等反射标记</span></a></h3><h3 id="_2-重写接口-虚函数" tabindex="-1"><a class="header-anchor" href="#_2-重写接口-虚函数"><span>2. 重写接口(虚函数)</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t\n<span class="token keyword">virtual</span> int32 <span class="token function">GetFunctionCallspace</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> FFrame<span class="token operator">*</span> Stack<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\nint32 <span class="token class-name">UInventoryPickUpData</span><span class="token double-colon punctuation">::</span><span class="token function">GetFunctionCallspace</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> FFrame<span class="token operator">*</span> Stack<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>AActor<span class="token operator">*</span> OuterActor <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">GetOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> OuterActor<span class="token operator">-&gt;</span><span class="token function">GetFunctionCallspace</span><span class="token punctuation">(</span>Function<span class="token punctuation">,</span> Stack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> FunctionCallspace<span class="token double-colon punctuation">::</span>Local<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">bool</span> <span class="token class-name">UInventoryPickUpData</span><span class="token double-colon punctuation">::</span><span class="token function">CallRemoteFunction</span><span class="token punctuation">(</span>UFunction<span class="token operator">*</span> Function<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> Parms<span class="token punctuation">,</span> FOutParmRec<span class="token operator">*</span> OutParms<span class="token punctuation">,</span> FFrame<span class="token operator">*</span> Stack<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>AActor<span class="token operator">*</span> OuterActor <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">GetOuter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tUNetDriver<span class="token operator">*</span> NetDriver <span class="token operator">=</span> OuterActor<span class="token operator">-&gt;</span><span class="token function">GetNetDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>NetDriver<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tNetDriver<span class="token operator">-&gt;</span><span class="token function">ProcessRemoteFunction</span><span class="token punctuation">(</span>OuterActor<span class="token punctuation">,</span> Function<span class="token punctuation">,</span> Parms<span class="token punctuation">,</span> OutParms<span class="token punctuation">,</span> Stack<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>正常RPC函数</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span>Server<span class="token punctuation">,</span>Reliable<span class="token punctuation">)</span>\n\t<span class="token keyword">void</span> <span class="token function">SpawnPickUpActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> FTransform<span class="token operator">&amp;</span> SpawnTransform<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span>Client<span class="token punctuation">,</span>Reliable<span class="token punctuation">)</span>\n\t<span class="token keyword">void</span> <span class="token function">ClientSpawnPickUpActor</span><span class="token punctuation">(</span><span class="token keyword">const</span> FTransform<span class="token operator">&amp;</span> SpawnTransform<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2>',6),k={href:"https://www.thegames.dev/?p=45",target:"_blank",rel:"noopener noreferrer"},v={},b=(0,s(66262).A)(v,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[o,c,l,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" BABA!我发现一个怪BUG！看下图，有两个数组都开启了复制，一个数组中存了一堆Actor，另一个则是一堆UObject指针 ")])),_:1}),i,r,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这是为什么?为什么客户端不能正确同步UObject？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" UE原生的UObject默认是无法网络同步的，而Actor可以，所以可以改用Actor指针代替。 ")])),_:1}),u,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 巧妙地利用了 AActor 的网络处理功能，使 UObject 能够间接地进行网络通信。 ")])),_:1}),d,(0,e.Lk)("p",null,[(0,e.Lk)("a",k,[(0,e.eW)("大佬博客"),(0,e.bF)(t)])])])}]]),m=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html","title":"NT-2.3.1|UObject复制同步和RPC","lang":"zh-CN","frontmatter":{"title":"NT-2.3.1|UObject复制同步和RPC","order":25,"category":["unreal"],"description":"本章概要 非Actor对象，比如原生的UObject如何实现同步？以及调用RPC 问题 服务端上查看客户端显示正常服务端上查看客户端显示正常 客户端上可以看到UObject为未知客户端上可以看到UObject为未知 变量同步 1. 重写 IsSupportedForNetworking 在自定义 UObject 类中重写 IsSupportedForN...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.3.1|UObject复制同步和RPC"}],["meta",{"property":"og:description","content":"本章概要 非Actor对象，比如原生的UObject如何实现同步？以及调用RPC 问题 服务端上查看客户端显示正常服务端上查看客户端显示正常 客户端上可以看到UObject为未知客户端上可以看到UObject为未知 变量同步 1. 重写 IsSupportedForNetworking 在自定义 UObject 类中重写 IsSupportedForN..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T23:34:33.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-10-25T23:34:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.3.1|UObject复制同步和RPC\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-25T23:34:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"本章概要","slug":"本章概要","link":"#本章概要","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"变量同步","slug":"变量同步","link":"#变量同步","children":[{"level":3,"title":"1. 重写 IsSupportedForNetworking","slug":"_1-重写-issupportedfornetworking","link":"#_1-重写-issupportedfornetworking","children":[]},{"level":3,"title":"2. 标记属性为 Replicated","slug":"_2-标记属性为-replicated","link":"#_2-标记属性为-replicated","children":[]},{"level":3,"title":"3. 实现复制支持","slug":"_3-实现复制支持","link":"#_3-实现复制支持","children":[]},{"level":3,"title":"4. 调用 ReplicateSubobject","slug":"_4-调用-replicatesubobject","link":"#_4-调用-replicatesubobject","children":[]},{"level":3,"title":"5. 初始化并确保对象正确创建","slug":"_5-初始化并确保对象正确创建","link":"#_5-初始化并确保对象正确创建","children":[]}]},{"level":2,"title":"RPC","slug":"rpc","link":"#rpc","children":[{"level":3,"title":"1.确保属性变量拥有UPROPERTY(Replicated),UFUNCTION()等反射标记","slug":"_1-确保属性变量拥有uproperty-replicated-ufunction-等反射标记","link":"#_1-确保属性变量拥有uproperty-replicated-ufunction-等反射标记","children":[]},{"level":3,"title":"2. 重写接口(虚函数)","slug":"_2-重写接口-虚函数","link":"#_2-重写接口-虚函数","children":[]}]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}],"git":{"createdTime":1722723732000,"updatedTime":1729899273000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":1.98,"words":594},"filePathRelative":"unreal/network[网络]/2.3.1-GamePlayNetWork.md","localizedDate":"2024年8月3日","excerpt":"<h3>本章概要</h3>\\n<p>非Actor对象，比如原生的UObject如何实现同步？以及调用RPC</p>\\n<h2>问题</h2>\\n\\n<figure><figcaption>服务端上查看客户端显示正常</figcaption></figure>\\n<figure><figcaption>客户端上可以看到UObject为未知</figcaption></figure>\\n\\n\\n<h2>变量同步</h2>\\n<h3>1. 重写 <code>IsSupportedForNetworking</code></h3>\\n<p>在自定义 <code>UObject</code> 类中重写 <code>IsSupportedForNetworking</code> 函数，使其返回 <code>true</code>，标记该对象支持网络复制。</p>","autoDesc":true}')}}]);