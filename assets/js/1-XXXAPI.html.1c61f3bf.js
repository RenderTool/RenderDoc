"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4705],{99351:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>E,data:()=>j});var e=s(20641);const t=s.p+"assets/img/api.dc0dd2f4.png",p=s.p+"assets/img/UHTBUILD.fbae7271.png",i=s.p+"assets/img/tetsfun.219fb112.png",o=s.p+"assets/img/okbuild.82dadf19.png",l=s.p+"assets/img/testotherfun.34367382.png",c=s.p+"assets/img/buidfailvoidut.0845a6d6.png",r=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),u=(0,e.Lk)("span",{style:{color:"#c0392b"}},"模块（项目）名_API ",-1),d=(0,e.Lk)("h2",{id:"模块-项目-名-api",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#模块-项目-名-api"},[(0,e.Lk)("span",null,"模块（项目）名_API")])],-1),k=(0,e.Lk)("p",null,[(0,e.Lk)("code",null,"模块（项目）名_API"),(0,e.eW)(" 通常用于标记导出和导入规范，特别是在涉及到使用动态链接库（DLL）的情况下。"),(0,e.Lk)("br"),(0,e.eW)(" 确保在使用该库的项目中，类和函数的声明和定义能够正确地导入和导出(控制代码对外的可见性)")],-1),v=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">MYGame_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),m=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">UTEST</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UBlueprintFunctionLibrary</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),g=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),b=(0,e.Lk)("p",null,[(0,e.eW)("别急，重点康康蓝图里去掉"),(0,e.Lk)("code",null,"MYGame_API"),(0,e.eW)("还能不能用。")],-1),h=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),f=(0,e.Lk)("p",null,[(0,e.eW)("继续测试，我们再新建一个其他类，并将没有"),(0,e.Lk)("code",null,"MYGame_API"),(0,e.eW)("的"),(0,e.Lk)("code",null,"Test.h"),(0,e.eW)("引入")],-1),y=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.h&quot;</span></span>\n\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;TestOtherFun&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestOtherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token class-name">UExorcistFunctionLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">TestOtherFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">UTEST</span><span class="token double-colon punctuation">::</span><span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),L=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),_=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:l,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),W=(0,e.Fv)("<ol><li><p><strong>不需要导入和导出：</strong> 对于一些类，特别是那些不涉及跨库边界的纯内部实现，可能没有必要使用这样的宏。如果一个类只在单一的项目中使用，而不需要在其他项目或库中导入，那么就不需要使用导入和导出规范。</p></li><li><p><strong>使用模板类或内联函数：</strong> 对于模板类或内联函数，它们的定义通常放在头文件中，这样编译器可以在每个使用它们的地方生成对应的代码，而不需要导入和导出。</p></li><li><p><strong>宏定义中已经包含：</strong> 在一些情况下，类的导出规范可能已经在其他宏定义中包含，因此没有必要重复定义。</p></li><li><p><strong>库或项目设计决策：</strong> 有时，项目或库的设计决策可能决定不使用导入和导出规范。这可能是因为项目的组织结构，构建过程，或者对于代码的特定要求。</p></li></ol>",1),F=(0,e.Fv)('<ol><li>新建一个插件,并在我们项目对应的<code>build.cs</code>加入插件模块</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>PrivateDependencyModuleNames<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>\n<span class="token keyword">new</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">{</span>\n    <span class="token string">&quot;插件模块名&quot;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>此时插件中没写<code>插件名_API</code>，编译后发生链接错误。</li></ol><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),w=(0,e.Lk)("h2",{id:"参考链接",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#参考链接"},[(0,e.Lk)("span",null,"参考链接")])],-1),T={href:"https://blog.csdn.net/xcinkey/article/details/129152652",target:"_blank",rel:"noopener noreferrer"},x={href:"https://zhuanlan.zhihu.com/p/367223779",target:"_blank",rel:"noopener noreferrer"},A={},E=(0,s(66262).A)(A,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:45},{default:(0,e.k6)((()=>[(0,e.eW)(" Baba我真的快疯掉了！ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 怎么了？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/kclr.png",avatarWidth:38},{default:(0,e.k6)((()=>[(0,e.eW)(' 在虚幻引擎中添加一个类，自动生成的代码中经常可以看到形如"模块（项目）名_API"的字样,具体是拿来干什么的？ ')])),_:1}),r,(0,e.bF)(s,{avatar:"../../assets/emoji/new1.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 宏函数（Macro）知道吧，一种预处理器指令，用于在编译之前进行文本替换，UE中这种大写的一般就是宏函数。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/new8.png",avatarWidth:60},{default:(0,e.k6)((()=>[(0,e.eW)(" 为什么要写这么多宏函数呢？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/new3.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 为了简化编码、提高性能、实现特定功能等。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 那我们能讲讲一些常用的宏以及用途吗？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 一口吃不成胖子，先来了解一下你提到的这个宏:"),u])),_:1}),d,(0,e.bF)(s,{avatar:"../../assets/emoji/new4.png",avatarWidth:50,alignLeft:""},{default:(0,e.k6)((()=>[k])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我不理解！能举个例子吗？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 那就拿我们截图的蓝图函数库类为例吧 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 新建一个蓝图函数库 ")])),_:1}),v,(0,e.bF)(s,{avatar:"../../assets/emoji/new4.png",avatarWidth:50,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 去掉EXORCIST_API ")])),_:1}),m,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 编译后都没问题啊！ ")])),_:1}),g,(0,e.bF)(s,{avatar:"../../assets/emoji/new5.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[b])),_:1}),h,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:45},{default:(0,e.k6)((()=>[(0,e.eW)(" Good!目前来说他不会影响反射到蓝图节点中。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/new2.png",avatarWidth:55,alignLeft:""},{default:(0,e.k6)((()=>[f])),_:1}),y,(0,e.bF)(s,{avatar:"../../assets/emoji/new9.png",avatarWidth:45},{default:(0,e.k6)((()=>[(0,e.eW)(" 编译依然ok ")])),_:1}),L,(0,e.bF)(s,{avatar:"../../assets/emoji/new3.png",avatarWidth:55},{default:(0,e.k6)((()=>[(0,e.eW)(" 项目中也一样正常使用 ")])),_:1}),_,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这么说这东西可有可无？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 这得从他的作用说起了: ")])),_:1}),(0,e.eW)(" 如果某个类没有使用 `xxx_api` 这样的宏，有几种可能的原因： "),W,(0,e.bF)(s,{avatar:"../../assets/emoji/new5.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 按这个说法，需要导入和导出时也就是编写的引入自定义插件时才可能出现链接库错误？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:45,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 实践一下就知道了！ ")])),_:1}),F,(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 看来确实是这么一回事。 ")])),_:1}),w,(0,e.Lk)("p",null,[(0,e.Lk)("a",T,[(0,e.eW)("csdn"),(0,e.bF)(t)]),(0,e.Lk)("a",x,[(0,e.eW)('UE4 "private: static class UClass...'),(0,e.bF)(t)])])])}]]),j=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html","title":"F1.模块（项目）名_API","lang":"zh-CN","frontmatter":{"title":"F1.模块（项目）名_API","order":1,"category":["u++"],"tag":["Specifiers"],"description":"模块（项目）名_API 如果某个类没有使用 `xxx_api` 这样的宏，有几种可能的原因： 不需要导入和导出： 对于一些类，特别是那些不涉及跨库边界的纯内部实现，可能没有必要使用这样的宏。如果一个类只在单一的项目中使用，而不需要在其他项目或库中导入，那么就不需要使用导入和导出规范。 使用模板类或内联函数： 对于模板类或内联函数，它们的定义通常放在头文...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F1.模块（项目）名_API"}],["meta",{"property":"og:description","content":"模块（项目）名_API 如果某个类没有使用 `xxx_api` 这样的宏，有几种可能的原因： 不需要导入和导出： 对于一些类，特别是那些不涉及跨库边界的纯内部实现，可能没有必要使用这样的宏。如果一个类只在单一的项目中使用，而不需要在其他项目或库中导入，那么就不需要使用导入和导出规范。 使用模板类或内联函数： 对于模板类或内联函数，它们的定义通常放在头文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T18:34:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"Specifiers"}],["meta",{"property":"article:modified_time","content":"2024-01-03T18:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F1.模块（项目）名_API\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T18:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"模块（项目）名_API","slug":"模块-项目-名-api","link":"#模块-项目-名-api","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1704306851000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.53,"words":1060},"filePathRelative":"unreal/function[函数]/1-XXXAPI.md","localizedDate":"2024年1月3日","excerpt":"\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n\\n\\n\\n<h2>模块（项目）名_API</h2>\\n\\n\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">once</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"CoreMinimal.h\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"Kismet/BlueprintFunctionLibrary.h\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"TEST.generated.h\\"</span></span>\\n\\n<span class=\\"token function\\">UCLASS</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MYGame_API</span> UTEST <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> UBlueprintFunctionLibrary\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\t\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t\\n\\t<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span>BlueprintCallable<span class=\\"token punctuation\\">,</span> Category <span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"TEST\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">TestFun</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);