"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[8637],{7892:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>E,data:()=>N});var t=s(20641);const e=s.p+"assets/img/netrole001.879516dc.png",o=s.p+"assets/img/netrole002.27233ee6.png",l=s.p+"assets/img/netrole003.af832692.png",p=s.p+"assets/img/netrole004.6f5fd78f.png",c=s.p+"assets/img/netrole005.d8334122.png",i=(0,t.Fv)('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><blockquote><p>经过前面几章的讨论我们对UE的网络复制用法有了些许了解,本章将对网络控制权限方面进行进一步深入。</p></blockquote><h3 id="hasauthority" tabindex="-1"><a class="header-anchor" href="#hasauthority"><span>HasAuthority</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">AActor</span><span class="token double-colon punctuation">::</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>Role <span class="token operator">==</span> ROLE_Authority<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',4),u=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),r=(0,t.Lk)("hr",null,null,-1),d=(0,t.Lk)("p",null,[(0,t.eW)("不知道你有没有注意过一个细节，"),(0,t.Lk)("code",null,"Target is Actor")],-1),k=(0,t.Lk)("p",null,[(0,t.eW)("对哦！为什么？我好像真没看到过其他"),(0,t.Lk)("code",null,"UObject"),(0,t.eW)("能直接判断网络权限的！")],-1),v=(0,t.Lk)("p",null,[(0,t.eW)("网络权限"),(0,t.Lk)("code",null,"Authority"),(0,t.eW)("是基于 "),(0,t.Lk)("code",null,"Actor"),(0,t.eW)(" 的网络复制系统建立的，而不是 "),(0,t.Lk)("code",null,"UObject"),(0,t.eW)(" 的通用机制。")],-1),m=(0,t.Lk)("hr",null,null,-1),b=(0,t.Lk)("p",null,[(0,t.eW)("也就说 "),(0,t.Lk)("code",null,"UObject"),(0,t.eW)(" 没法网络复制？")],-1),h=(0,t.Lk)("p",null,[(0,t.eW)("并不是，只是普通"),(0,t.Lk)("code",null,"UObject"),(0,t.eW)("要进行网络复制需要额外开启 "),(0,t.Lk)("code",null,"Replication Graph "),(0,t.eW)(" 后续我们会进行单独讨论。")],-1),g=(0,t.Fv)('<h3 id="enetrole" tabindex="-1"><a class="header-anchor" href="#enetrole"><span>ENetRole</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">AActor</span><span class="token double-colon punctuation">::</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>Role <span class="token operator">==</span> ROLE_Authority<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//其中的Role 就是这个枚举</span>\n\n<span class="token comment">/** 在本地/远程网络环境中，演员的网络角色 */</span>\n<span class="token function">UENUM</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token class-name">ENetRole</span> <span class="token operator">:</span> <span class="token keyword">int</span>\n<span class="token punctuation">{</span>\n\t<span class="token comment">/** 没有角色。 */</span>\n\tROLE_None<span class="token punctuation">,</span>\n\t<span class="token comment">/** 该演员的本地模拟代理。 */</span>\n\tROLE_SimulatedProxy<span class="token punctuation">,</span>\n\t<span class="token comment">/** 该演员的本地自治代理。 */</span>\n\tROLE_AutonomousProxy<span class="token punctuation">,</span>\n\t<span class="token comment">/** 对该演员的权威控制。 */</span>\n\tROLE_Authority<span class="token punctuation">,</span>\n\tROLE_MAX<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),y=(0,t.Fv)('<hr><h3 id="islocallycontrolled" tabindex="-1"><a class="header-anchor" href="#islocallycontrolled"><span>IsLocallyControlled</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">APawn</span><span class="token double-colon punctuation">::</span><span class="token function">IsLocallyControlled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token punctuation">(</span> Controller <span class="token operator">&amp;&amp;</span> Controller<span class="token operator">-&gt;</span><span class="token function">IsLocalController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),f=(0,t.Lk)("p",null,[(0,t.eW)("？直接用"),(0,t.Lk)("code",null,"HasAuthority"),(0,t.eW)("不就行了？")],-1),L=(0,t.Lk)("p",null,[(0,t.eW)("你再仔细想想！我们的题目是所有端仅本地生成球体碰撞，而"),(0,t.Lk)("code",null,"HasAuthority"),(0,t.eW)(" 对于服务器来说，所有非本地玩家其实都是"),(0,t.Lk)("code",null,"True"),(0,t.eW)(",我们可以拿一个变量来测试。")],-1),w=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),A=(0,t.Lk)("hr",null,null,-1),W=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:l,alt:"netrole003.png",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"netrole003.png")],-1),R=(0,t.Lk)("p",null,[(0,t.eW)("其实我们之前已经讨论过了用"),(0,t.Lk)("code",null,"IsLocallyControlled"),(0,t.eW)(" 来判断是否本地控制。")],-1),_=(0,t.Fv)('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><blockquote><p>服务端在Pawn中判断是不是本地</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsLocallyControlled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>客户端在Pawn中判断是不是本地</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token operator">!</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsLocallyControlled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>环境</th><th><code>HasAuthority()</code></th><th><code>IsLocallyControlled()</code></th><th>意义说明</th></tr></thead><tbody><tr><td>✅ 服务端控制的 Pawn</td><td>true</td><td>true</td><td>服务器上本地控制的 Pawn（主控）</td></tr><tr><td>🟡 服务端复制的 Pawn</td><td>true</td><td>false</td><td>服务器上远程控制的 Pawn（非本地）</td></tr><tr><td>✅ 客户端本地 Pawn</td><td>false</td><td>true</td><td>客户端上本地控制的 Pawn（主控）</td></tr><tr><td>❌ 客户端远程 Pawn</td><td>false</td><td>false</td><td>客户端上同步来的其他玩家 Pawn</td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token class-name">AController</span><span class="token double-colon punctuation">::</span><span class="token function">IsLocalController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> ENetMode NetMode <span class="token operator">=</span> <span class="token function">GetNetMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>NetMode <span class="token operator">==</span> NM_Standalone<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">// Not networked.</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>NetMode <span class="token operator">==</span> NM_Client <span class="token operator">&amp;&amp;</span> <span class="token function">GetLocalRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ROLE_AutonomousProxy<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">// Networked client in control.</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetRemoteRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> ROLE_AutonomousProxy <span class="token operator">&amp;&amp;</span> <span class="token function">GetLocalRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ROLE_Authority<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">// Local authority in control.</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),x={},E=(0,s(66262).A)(x,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[i,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 这个我们已经讨论过了，是用于区分服务器还是客户端的 ")])),_:1}),u,r,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[d])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[k])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[v])),_:1}),m,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[b])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[h])),_:1}),g,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 这些不是我们之前的章节介绍过了？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 认识事物的过程本身就是重复再重复。我们必须得有个前因才能解释后果。例如我想给所有端本地独立生成一个球体碰撞。 ")])),_:1}),y,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[f])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[L])),_:1}),w,A,W,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 也就是说在同一端口下众生平等，只能区分是否有权限，并不能确定是不是自己。那么怎么区分呢？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[R])),_:1}),_])}]]),N=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.2NetRole.html","title":"NT-2.2.2|控制权限","lang":"zh-CN","frontmatter":{"title":"NT-2.2.2|控制权限","order":24,"category":["u++"],"description":"前言 经过前面几章的讨论我们对UE的网络复制用法有了些许了解,本章将对网络控制权限方面进行进一步深入。 HasAuthority ENetRole IsLocallyControlled netrole003.pngnetrole003.png 服务端在Pawn中判断是不是本地 客户端在Pawn中判断是不是本地","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.2NetRole.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.2.2|控制权限"}],["meta",{"property":"og:description","content":"前言 经过前面几章的讨论我们对UE的网络复制用法有了些许了解,本章将对网络控制权限方面进行进一步深入。 HasAuthority ENetRole IsLocallyControlled netrole003.pngnetrole003.png 服务端在Pawn中判断是不是本地 客户端在Pawn中判断是不是本地"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-13T02:18:40.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-05-13T02:18:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.2.2|控制权限\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-13T02:18:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[{"level":3,"title":"HasAuthority","slug":"hasauthority","link":"#hasauthority","children":[]},{"level":3,"title":"ENetRole","slug":"enetrole","link":"#enetrole","children":[]},{"level":3,"title":"IsLocallyControlled","slug":"islocallycontrolled","link":"#islocallycontrolled","children":[]}]}],"git":{"createdTime":1747102720000,"updatedTime":1747102720000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.58,"words":773},"filePathRelative":"unreal/network[网络]/2.2.2NetRole.md","localizedDate":"2025年5月13日","excerpt":"<h2>前言</h2>\\n<blockquote>\\n<p>经过前面几章的讨论我们对UE的网络复制用法有了些许了解,本章将对网络控制权限方面进行进一步深入。</p>\\n</blockquote>\\n<h3>HasAuthority</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">bool</span> <span class=\\"token class-name\\">AActor</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">HasAuthority</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>Role <span class=\\"token operator\\">==</span> ROLE_Authority<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);