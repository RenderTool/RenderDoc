"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6306],{36273:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var t=a(20641);const e=(0,t.Fv)('<p>在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。下面是这两种用法的示例：</p><h3 id="显式默认" tabindex="-1"><a class="header-anchor" href="#显式默认"><span>显式默认</span></a></h3><p><code>explicit default</code> 用于告诉编译器自动生成某些成员函数的默认实现。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// 显式默认构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认拷贝构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认拷贝赋值运算符</span>\n    MyClass<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认析构函数</span>\n    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;MyClass object\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyClass obj1<span class="token punctuation">;</span>      <span class="token comment">// 使用显式默认构造函数</span>\n    MyClass obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> <span class="token comment">// 使用显式默认拷贝构造函数</span>\n    obj1 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>      <span class="token comment">// 使用显式默认拷贝赋值运算符</span>\n    obj1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>MyClass</code> 的构造函数、拷贝构造函数、拷贝赋值运算符和析构函数都被显式地指定为默认实现。这告诉编译器生成这些成员函数的默认版本。</p><h3 id="显式删除" tabindex="-1"><a class="header-anchor" href="#显式删除"><span>显式删除</span></a></h3><p><code>explicit delete</code> 用于显式禁止某些成员函数的生成，使得这些函数不可用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// 显式删除拷贝构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式删除拷贝赋值运算符</span>\n    MyClass<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">delete</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 默认构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 默认析构函数</span>\n    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;MyClass object\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyClass obj1<span class="token punctuation">;</span> <span class="token comment">// 使用默认构造函数</span>\n\n    <span class="token comment">// MyClass obj2 = obj1; // 错误: 拷贝构造函数被删除</span>\n\n    <span class="token comment">// MyClass obj3;</span>\n    <span class="token comment">// obj3 = obj1; // 错误: 拷贝赋值运算符被删除</span>\n\n    obj1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例中，<code>MyClass</code> 显式删除了拷贝构造函数和拷贝赋值运算符。这意味着对象不能被拷贝，尝试这样做将导致编译错误。</p>',9),p={},o=(0,a(66262).A)(p,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。 ")])),_:1}),e])}]]),c=JSON.parse('{"path":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html","title":"c++4.显示默认/删除","lang":"zh-CN","frontmatter":{"title":"c++4.显示默认/删除","order":4,"category":["c++"],"description":"在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。下面是这两种用法的示例： 显式默认 explicit default 用于告诉编译器自动生成某些成员函数的默认实现。 示例中，MyClass 的构造函数、拷贝构造函数、拷贝赋值运算符和析...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++4.显示默认/删除"}],["meta",{"property":"og:description","content":"在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。下面是这两种用法的示例： 显式默认 explicit default 用于告诉编译器自动生成某些成员函数的默认实现。 示例中，MyClass 的构造函数、拷贝构造函数、拷贝赋值运算符和析..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-03T22:22:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-08-03T22:22:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++4.显示默认/删除\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-03T22:22:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"显式默认","slug":"显式默认","link":"#显式默认","children":[]},{"level":3,"title":"显式删除","slug":"显式删除","link":"#显式删除","children":[]}],"git":{"createdTime":1722723732000,"updatedTime":1722723732000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"language/cpp/new[新特性]/4-default.md","localizedDate":"2024年8月3日","excerpt":"\\n<p>在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。下面是这两种用法的示例：</p>\\n<h3>显式默认</h3>\\n<p><code>explicit default</code> 用于告诉编译器自动生成某些成员函数的默认实现。</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyClass</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token comment\\">// 显式默认构造函数</span>\\n    <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 显式默认拷贝构造函数</span>\\n    <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> MyClass<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 显式默认拷贝赋值运算符</span>\\n    MyClass<span class=\\"token operator\\">&amp;</span> <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> MyClass<span class=\\"token operator\\">&amp;</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 显式默认析构函数</span>\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">default</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"MyClass object\\\\n\\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    MyClass obj1<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">// 使用显式默认构造函数</span>\\n    MyClass obj2 <span class=\\"token operator\\">=</span> obj1<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 使用显式默认拷贝构造函数</span>\\n    obj1 <span class=\\"token operator\\">=</span> obj2<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">// 使用显式默认拷贝赋值运算符</span>\\n    obj1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);