"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6526],{84102:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>A,data:()=>C});var t=a(20641);const e=a.p+"assets/img/beginplay.2d97d86d.png",p=a.p+"assets/img/bpfirst.1253807e.png",o=a.p+"assets/img/actorbeginplay.b7dc2610.png",c=a.p+"assets/img/eventbegin.dcfc0246.png",l=(0,t.Lk)("p",null,[(0,t.eW)("C++中的"),(0,t.Lk)("code",null,"BeginPlay"),(0,t.eW)("是不是就是蓝图中的"),(0,t.Lk)("code",null,"EventBeginPlay")],-1),i=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),u=(0,t.Lk)("p",null,[(0,t.eW)("回答问题之前我们先看看C++的"),(0,t.Lk)("code",null,"BeginPlay")],-1),r=(0,t.Fv)('<blockquote><p>新建一个测试actor</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameFramework/Actor.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyTest.generated.h&quot;</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> AMyTest <span class="token operator">:</span> <span class="token keyword">public</span> AActor\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token comment">// Sets default values for this actor&#39;s properties</span>\n\t<span class="token function">AMyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">protected</span><span class="token operator">:</span>\n\t<span class="token comment">// Called when the game starts or when spawned</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token comment">// Called every frame</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Tick</span><span class="token punctuation">(</span><span class="token keyword">float</span> DeltaTime<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),k=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AMyTest</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tGEngine<span class="token operator">-&gt;</span><span class="token function">AddOnScreenDebugMessage</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5.0f</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Blue<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;C++ BeginPlay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),d=(0,t.Lk)("p",null,[(0,t.eW)("确实，按照我们的惯性思维这里的"),(0,t.Lk)("code",null,"EventBeginPlay"),(0,t.eW)("和"),(0,t.Lk)("code",null,"C++BeginPlay"),(0,t.eW)("认为是一个东西,所以应该先打印父项部分再打印子项，可事实真的这样吗？")],-1),v=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),m=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),g=(0,t.Lk)("p",null,[(0,t.eW)("可是继承的父类Actor中 "),(0,t.Lk)("code",null,"BeginPlay"),(0,t.eW)("只是一个虚函数，而且没有宏标记！他是怎么映射到蓝图中的?")],-1),y=(0,t.Lk)("p",null,[(0,t.eW)("起初我也以为是父类标记了"),(0,t.Lk)("code",null,"BeginPlay"),(0,t.eW)("的"),(0,t.Lk)("code",null,"UPROPERTY"),(0,t.eW)(",子类可以省略不写。现在看来并不是这样。我们康康定义的源码写了什么!")],-1),b=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AActor</span><span class="token double-colon punctuation">::</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">TRACE_OBJECT_LIFETIME_BEGIN</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token function">ensureMsgf</span><span class="token punctuation">(</span>ActorHasBegunPlay <span class="token operator">==</span> EActorBeginPlayState<span class="token double-colon punctuation">::</span>BeginningPlay<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;BeginPlay was called on actor %s which was in state %d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token function">GetPathName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>int32<span class="token punctuation">)</span>ActorHasBegunPlay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">SetLifeSpan</span><span class="token punctuation">(</span> InitialLifeSpan <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">RegisterAllActorTickFunctions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Components are done below.</span>\n\n\tTInlineComponentArray<span class="token operator">&lt;</span>UActorComponent<span class="token operator">*</span><span class="token operator">&gt;</span> Components<span class="token punctuation">;</span>\n\t<span class="token function">GetComponents</span><span class="token punctuation">(</span>Components<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span>UActorComponent<span class="token operator">*</span> Component <span class="token operator">:</span> Components<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">// bHasBegunPlay will be true for the component if the component was renamed and moved to a new outer during initialization</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token operator">-&gt;</span><span class="token function">IsRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Component<span class="token operator">-&gt;</span><span class="token function">HasBegunPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tComponent<span class="token operator">-&gt;</span><span class="token function">RegisterAllComponentTickFunctions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\tComponent<span class="token operator">-&gt;</span><span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token function">ensureMsgf</span><span class="token punctuation">(</span>Component<span class="token operator">-&gt;</span><span class="token function">HasBegunPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to route BeginPlay (%s)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>Component<span class="token operator">-&gt;</span><span class="token function">GetFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">else</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// When an Actor begins play we expect only the not bAutoRegister false components to not be registered</span>\n\t\t\t<span class="token comment">//check(!Component-&gt;bAutoRegister);</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetAutoDestroyWhenFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>UWorld<span class="token operator">*</span> MyWorld <span class="token operator">=</span> <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>UAutoDestroySubsystem<span class="token operator">*</span> AutoDestroySys <span class="token operator">=</span> MyWorld<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetSubsystem</span><span class="token generic class-name"><span class="token operator">&lt;</span>UAutoDestroySubsystem<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\tAutoDestroySys<span class="token operator">-&gt;</span><span class="token function">RegisterActor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\t\t\t\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">ReceiveBeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\tActorHasBegunPlay <span class="token operator">=</span> EActorBeginPlayState<span class="token double-colon punctuation">::</span>HasBegunPlay<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),f=(0,t.Lk)("p",null,[(0,t.eW)("我发现他结尾调用了"),(0,t.Lk)("code",null,"ReceiveBeginPlay"),(0,t.eW)("！这个函数的声明的"),(0,t.Lk)("code",null,"UPROPERTY"),(0,t.eW)("元数据属性中就有 "),(0,t.Lk)("code",null,'meta=(DisplayName = "BeginPlay")'),(0,t.eW)("!!!")],-1),h=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),B=(0,t.Lk)("div",{class:"hint-container note"},[(0,t.Lk)("p",{class:"hint-container-title"},"注"),(0,t.Lk)("p",null,[(0,t.Lk)("code",null,'meta=(DisplayName = "BeginPlay")'),(0,t.eW)(" 用于修改显示节点名。")])],-1),P=(0,t.Fv)("<blockquote><p>因为我们加了Super::BeginPlay();所以执行顺序如下：</p></blockquote><ol><li>重写后的Actor<code>BeginPlay</code></li><li>执行<code>BeginPlay</code>中的<code>ReceiveBeginPlay()</code>;——》<code>BP BeginPlay</code></li><li>执行打印——》C++<code>BeginPlay</code></li></ol>",2),w={},A=(0,a(66262).A)(w,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[l])),_:1}),i,(0,t.bF)(a,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[u])),_:1}),r,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 我们已经看到了继承重写的BeginPlay函数，现在我们往定义中添加一些测试代码 ")])),_:1}),k,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 接着我们在派生的蓝图EventBeginPlay中也写一份打印，你觉得打印顺序是什么？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 蓝图派生自C++的actor，那么应该先打印C++的内容然后打印BP的内容。 ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[d])),_:1}),v,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 为什么先打印的BP? ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 说明我们调用C++BeginPlay 之前 已经调用了BP部分的函数。我们可以去源码中康康猫腻在哪！ ")])),_:1}),m,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[g])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[y])),_:1}),b,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40},{default:(0,t.k6)((()=>[f])),_:1}),h,B,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没错，这就解释了为什么继承的Actor执行后会先调用蓝图部分的函数再调用C++。 ")])),_:1}),P])}]]),C=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html","title":"F13.BeginPlay|启动事件","lang":"zh-CN","frontmatter":{"title":"F13.BeginPlay|启动事件","order":13,"category":["u++"],"description":"新建一个测试actor 注 meta=(DisplayName = \\"BeginPlay\\") 用于修改显示节点名。 因为我们加了Super::BeginPlay();所以执行顺序如下： 重写后的ActorBeginPlay 执行BeginPlay中的ReceiveBeginPlay();——》BP BeginPlay 执行打印——》C++BeginPlay","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F13.BeginPlay|启动事件"}],["meta",{"property":"og:description","content":"新建一个测试actor 注 meta=(DisplayName = \\"BeginPlay\\") 用于修改显示节点名。 因为我们加了Super::BeginPlay();所以执行顺序如下： 重写后的ActorBeginPlay 执行BeginPlay中的ReceiveBeginPlay();——》BP BeginPlay 执行打印——》C++BeginPlay"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T20:28:49.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-03-20T20:28:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F13.BeginPlay|启动事件\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T20:28:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1704306851000,"updatedTime":1710966529000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":3}]},"readingTime":{"minutes":2.39,"words":716},"filePathRelative":"unreal/function[函数]/13-BeginPlay.md","localizedDate":"2024年1月3日","excerpt":"\\n<figure><figcaption></figcaption></figure>\\n\\n<blockquote>\\n<p>新建一个测试actor</p>\\n</blockquote>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">pragma</span> <span class=\\"token expression\\">once</span></span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"CoreMinimal.h\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"GameFramework/Actor.h\\"</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">\\"MyTest.generated.h\\"</span></span>\\n\\n<span class=\\"token function\\">UCLASS</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">EXORCIST_API</span> AMyTest <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> AActor\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// Sets default values for this actor\'s properties</span>\\n\\t<span class=\\"token function\\">AMyTest</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">protected</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// Called when the game starts or when spawned</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">BeginPlay</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">// Called every frame</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">Tick</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">float</span> DeltaTime<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);