"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3761],{32286:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>c,data:()=>o});var e=s(20641);const t=(0,e.Lk)("p",null,[(0,e.eW)("在C++中，"),(0,e.Lk)("code",null,"final"),(0,e.eW)("关键字用于防止类或虚函数在派生类中被进一步继承或重写。")],-1),p=(0,e.Fv)('<h4 id="_1-阻止类的继承" tabindex="-1"><a class="header-anchor" href="#_1-阻止类的继承"><span>1. 阻止类的继承</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">final</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类内容</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 尝试继承Base会导致编译错误</span>\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 错误: Base类被标记为final，不能被继承</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-阻止虚函数的重写" tabindex="-1"><a class="header-anchor" href="#_2-阻止虚函数的重写"><span>2. 阻止虚函数的重写</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 函数实现</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 错误: foo函数在Base类中被标记为final，不能被重写</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ol><li><p><strong>确保类行为的稳定性</strong>：</p><ul><li>使用<code>final</code>可以防止派生类改变基类的行为，从而确保基类的行为在整个继承链中保持一致。</li></ul></li><li><p><strong>优化性能</strong>：</p><ul><li>编译器可以对<code>final</code>类或<code>final</code>虚函数进行更好的优化，因为它知道这些类或函数不会在派生类中被修改。</li></ul></li><li><p><strong>设计意图明确</strong>：</p><ul><li>使用<code>final</code>可以明确表达设计意图，即某些类不应该被继承或某些函数不应该被重写。</li></ul></li></ol>',6),l={},c=(0,s(66262).A)(l,[["render",function(n,a){const s=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,e.k6)((()=>[t])),_:1}),p])}]]),o=JSON.parse('{"path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html","title":"c++4.1 final","lang":"zh-CN","frontmatter":{"title":"c++4.1 final","order":4,"category":["c++"],"description":"1. 阻止类的继承 2. 阻止虚函数的重写 优点 确保类行为的稳定性： 使用final可以防止派生类改变基类的行为，从而确保基类的行为在整个继承链中保持一致。 优化性能： 编译器可以对final类或final虚函数进行更好的优化，因为它知道这些类或函数不会在派生类中被修改。 设计意图明确： 使用final可以明确表达设计意图，即某些类不应该被继承或某些...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++4.1 final"}],["meta",{"property":"og:description","content":"1. 阻止类的继承 2. 阻止虚函数的重写 优点 确保类行为的稳定性： 使用final可以防止派生类改变基类的行为，从而确保基类的行为在整个继承链中保持一致。 优化性能： 编译器可以对final类或final虚函数进行更好的优化，因为它知道这些类或函数不会在派生类中被修改。 设计意图明确： 使用final可以明确表达设计意图，即某些类不应该被继承或某些..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-03T22:22:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-08-03T22:22:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++4.1 final\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-03T22:22:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]}],"git":{"createdTime":1722723732000,"updatedTime":1722723732000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":0.92,"words":277},"filePathRelative":"language/cpp/keywords[关键字]/4-1-final.md","localizedDate":"2024年8月3日","excerpt":"\\n<h4>1. 阻止类的继承</h4>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Base</span> <span class=\\"token keyword\\">final</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 类内容</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 尝试继承Base会导致编译错误</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Derived</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Base</span></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 错误: Base类被标记为final，不能被继承</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);