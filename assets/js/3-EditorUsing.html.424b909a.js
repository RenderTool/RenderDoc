"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[9705],{29800:(n,a,e)=>{e.r(a),e.d(a,{comp:()=>I,data:()=>T});var s=e(20641);const t=(0,s.Fv)('<h2 id="导读" tabindex="-1"><a class="header-anchor" href="#导读"><span>导读</span></a></h2><table><thead><tr><th>特征</th><th>描述</th></tr></thead><tbody><tr><td><code>WITH_EDITORONLY_DATA</code></td><td>用于标记在头文件中的成员变量，仅在编辑器中可见，游戏运行时被忽略。</td></tr><tr><td><code>WITH_EDITOR</code></td><td>用于标记在 CPP 文件中的代码块，该代码块在构建编辑器时应被编译。</td></tr><tr><td><code>GIsEditor</code></td><td>全局布尔变量，用于判断当前是否在虚幻编辑器中运行。</td></tr></tbody></table><hr>',3),i=(0,s.Fv)('<hr><h3 id="with-editor-和-giseditor-的区别" tabindex="-1"><a class="header-anchor" href="#with-editor-和-giseditor-的区别"><span><code>WITH_EDITOR</code> 和 <code>GIsEditor</code> 的区别</span></a></h3><h3 id="with-editor" tabindex="-1"><a class="header-anchor" href="#with-editor"><span><code>WITH_EDITOR</code></span></a></h3><p><code>WITH_EDITOR</code> 是一个宏，用于在代码中标记在构建编辑器时应该被编译的部分。以下是示例代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR </span></span>\n<span class="token comment">// 仅在构建编辑器时编译的代码</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>  </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),o=(0,s.Lk)("p",null,[(0,s.eW)("这意味着在构建编辑器时，"),(0,s.Lk)("code",null,"WITH_EDITOR"),(0,s.eW)(" 中的代码会被编译，而在独立构建中将被移除。它通常用于区分编辑器构建和游戏构建的代码。")],-1),d=(0,s.Fv)('<h3 id="giseditor" tabindex="-1"><a class="header-anchor" href="#giseditor"><span><code>GIsEditor</code></span></a></h3><p><code>GIsEditor</code> 是一个全局的布尔变量，用于判断当前是否在虚幻编辑器中运行。以下是示例代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>GIsEditor<span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n  <span class="token comment">// 仅在编辑器中运行时执行的代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),l=(0,s.Lk)("p",null,[(0,s.Lk)("code",null,"GIsEditor"),(0,s.eW)(" 用于检查是否在虚幻编辑器中运行，即使在 Play In Editor (PIE) 模式下也为 "),(0,s.Lk)("code",null,"true"),(0,s.eW)("。这对于需要在编辑器中执行特定代码的情况非常有用。")],-1),p=(0,s.Fv)('<h3 id="区别和示例" tabindex="-1"><a class="header-anchor" href="#区别和示例"><span>区别和示例</span></a></h3><ul><li><code>WITH_EDITOR</code> 是一个宏，而 <code>GIsEditor</code> 是一个全局的布尔变量。</li><li>使用 <code>WITH_EDITOR</code> 的代码在构建编辑器时会被编译，而 <code>GIsEditor</code> 是在运行时判断是否在编辑器中运行。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR </span></span>\nint32 TestInt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     \n<span class="token keyword">if</span><span class="token punctuation">(</span>GIsEditor<span class="token punctuation">)</span>     \n<span class="token punctuation">{</span>         \n  TestInt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>             \n<span class="token punctuation">}</span>     \n<span class="token keyword">else</span>     \n<span class="token punctuation">{</span>         \n  TestInt <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     \n<span class="token punctuation">}</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这个示例中，如果在编辑器中运行，则 <code>TestVar</code> 被设置为1；否则，它被设置为2。这种区别允许开发者根据构建环境和运行时上下文来控制代码的行为。</p></blockquote><table><thead><tr><th>特征</th><th><code>WITH_EDITOR</code></th><th><code>GIsEditor</code></th></tr></thead><tbody><tr><td>类型</td><td>宏</td><td>全局布尔变量</td></tr><tr><td>用途</td><td>标记仅在构建编辑器时编译的代码</td><td>判断是否在虚幻编辑器中运行</td></tr><tr><td>作用范围</td><td>代码中，通常在头文件或CPP文件中使用</td><td>通常在代码中使用，用于运行时判断编辑器运行状态</td></tr></tbody></table><h2 id="with-editoronly-data-和-with-editor-的区别" tabindex="-1"><a class="header-anchor" href="#with-editoronly-data-和-with-editor-的区别"><span><code>WITH_EDITORONLY_DATA</code> 和 <code>WITH_EDITOR</code> 的区别</span></a></h2><h3 id="with-editoronly-data" tabindex="-1"><a class="header-anchor" href="#with-editoronly-data"><span><code>WITH_EDITORONLY_DATA</code></span></a></h3>',7),c=(0,s.Lk)("p",null,[(0,s.Lk)("code",null,"WITH_EDITORONLY_DATA"),(0,s.eW)(" 是一个宏，用于在头文件中标记成员变量，这些变量仅在编辑器环境中可见，并且在游戏运行时被忽略。这对于在编辑器中使用特定数据或属性非常有用。")],-1),r=(0,s.Fv)('<p>示例代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;MyCategory&quot;</span><span class="token punctuation">)</span>\n    int32 EditableVariable<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITORONLY_DATA</span></span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;MyCategory&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">float</span> EditorOnlyVariable<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这个示例中，<code>EditorOnlyVariable</code> 只会在编辑器中显示，并且在游戏运行时将被忽略。</p></blockquote><h3 id="with-editor-1" tabindex="-1"><a class="header-anchor" href="#with-editor-1"><span><code>WITH_EDITOR</code></span></a></h3>',4),u=(0,s.Lk)("p",null,[(0,s.Lk)("code",null,"WITH_EDITOR"),(0,s.eW)(" 仍然是一个宏，但一般用于在 CPP 文件中标记与编辑器相关的代码块，例如某些特定于编辑器的逻辑，而不是用于标记成员变量。")],-1),h=(0,s.Fv)('<p>示例代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\n<span class="token keyword">void</span> <span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">EditorOnlyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 编辑器中调用的函数</span>\n<span class="token punctuation">}</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这个示例中，<code>EditorOnlyFunction</code> 只会在构建编辑器时被编译，而在独立构建时会被移除。</p></blockquote><h3 id="区别和示例-1" tabindex="-1"><a class="header-anchor" href="#区别和示例-1"><span>区别和示例</span></a></h3><ul><li>使用 <code>WITH_EDITORONLY_DATA</code> 的成员变量将仅在编辑器中可见，而在游戏运行时将被忽略。</li><li><code>WITH_EDITOR</code> 通常用于包含编辑器特定的功能或逻辑的 CPP 代码块。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;MyCategory&quot;</span><span class="token punctuation">)</span>\n    int32 EditableVariable<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITORONLY_DATA</span></span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;MyCategory&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">float</span> EditorOnlyVariable<span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\n    <span class="token keyword">void</span> <span class="token function">EditorOnlyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这个示例中，<code>EditorOnlyVariable</code> 在编辑器中可见，而 <code>EditorOnlyFunction</code> 仅在编辑器构建时可用。这样可以更精确地控制编辑器和游戏运行时的代码行为。</p></blockquote><table><thead><tr><th>特征</th><th><code>WITH_EDITORONLY_DATA</code></th><th><code>WITH_EDITOR</code></th></tr></thead><tbody><tr><td>类型</td><td>宏</td><td>宏</td></tr><tr><td>用途</td><td>标记仅在编辑器中可见的成员变量</td><td>标记在构建编辑器时应该被编译的代码块</td></tr><tr><td>作用范围</td><td>通常在头文件中使用，标记成员变量</td><td>通常在 CPP 文件中使用，标记编辑器特定的功能或逻辑</td></tr></tbody></table><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h3>',9),k={href:"https://forums.unrealengine.com/t/having-trouble-with-if-with_editor/138926",target:"_blank",rel:"noopener noreferrer"},v={href:"https://zhuanlan.zhihu.com/p/76590936",target:"_blank",rel:"noopener noreferrer"},b={href:"https://exkulo.github.io/2021/01/05/20210105-UE4-With-Editor-vs-With-EditorDataOnly/",target:"_blank",rel:"noopener noreferrer"},m={},I=(0,e(66262).A)(m,[["render",function(n,a){const e=(0,s.g2)("chatmessage"),m=(0,s.g2)("ExternalLinkIcon");return(0,s.uX)(),(0,s.CE)("div",null,[t,(0,s.bF)(e,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,s.k6)((()=>[(0,s.eW)(" Baba我的编辑器宏写上编译成功但打包失败了！ ")])),_:1}),(0,s.bF)(e,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,s.k6)((()=>[(0,s.eW)(" 让我康康！看来你还不知道这些区别！ ")])),_:1}),i,(0,s.bF)(e,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,s.k6)((()=>[o])),_:1}),d,(0,s.bF)(e,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,s.k6)((()=>[l])),_:1}),p,(0,s.bF)(e,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,s.k6)((()=>[c])),_:1}),r,(0,s.bF)(e,{avatar:"../../assets/emoji/bqb02.png",avatarWidth:40,alignLeft:""},{default:(0,s.k6)((()=>[u])),_:1}),h,(0,s.Lk)("ol",null,[(0,s.Lk)("li",null,[(0,s.Lk)("a",k,[(0,s.eW)("Having trouble with #if WITH_EDITOR"),(0,s.bF)(m)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",v,[(0,s.eW)("编辑器相关宏说明"),(0,s.bF)(m)])]),(0,s.Lk)("li",null,[(0,s.Lk)("a",b,[(0,s.eW)("20210105 UE4 With_Editor vs With_EditorDataOnly"),(0,s.bF)(m)])])])])}]]),T=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html","title":"F3.WITH_EDITOR","lang":"zh-CN","frontmatter":{"title":"F3.WITH_EDITOR","order":3,"category":["u++"],"tag":["Specifiers"],"description":"导读 WITH_EDITOR 和 GIsEditor 的区别 WITH_EDITOR WITH_EDITOR 是一个宏，用于在代码中标记在构建编辑器时应该被编译的部分。以下是示例代码： GIsEditor GIsEditor 是一个全局的布尔变量，用于判断当前是否在虚幻编辑器中运行。以下是示例代码： 区别和示例 WITH_EDITOR 是一个宏，而 G...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F3.WITH_EDITOR"}],["meta",{"property":"og:description","content":"导读 WITH_EDITOR 和 GIsEditor 的区别 WITH_EDITOR WITH_EDITOR 是一个宏，用于在代码中标记在构建编辑器时应该被编译的部分。以下是示例代码： GIsEditor GIsEditor 是一个全局的布尔变量，用于判断当前是否在虚幻编辑器中运行。以下是示例代码： 区别和示例 WITH_EDITOR 是一个宏，而 G..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T18:34:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"Specifiers"}],["meta",{"property":"article:modified_time","content":"2024-01-03T18:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F3.WITH_EDITOR\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T18:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[{"level":3,"title":"WITH_EDITOR 和 GIsEditor 的区别","slug":"with-editor-和-giseditor-的区别","link":"#with-editor-和-giseditor-的区别","children":[]},{"level":3,"title":"WITH_EDITOR","slug":"with-editor","link":"#with-editor","children":[]},{"level":3,"title":"GIsEditor","slug":"giseditor","link":"#giseditor","children":[]},{"level":3,"title":"区别和示例","slug":"区别和示例","link":"#区别和示例","children":[]}]},{"level":2,"title":"WITH_EDITORONLY_DATA 和 WITH_EDITOR 的区别","slug":"with-editoronly-data-和-with-editor-的区别","link":"#with-editoronly-data-和-with-editor-的区别","children":[{"level":3,"title":"WITH_EDITORONLY_DATA","slug":"with-editoronly-data","link":"#with-editoronly-data","children":[]},{"level":3,"title":"WITH_EDITOR","slug":"with-editor-1","link":"#with-editor-1","children":[]},{"level":3,"title":"区别和示例","slug":"区别和示例-1","link":"#区别和示例-1","children":[]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}]}],"git":{"createdTime":1704306851000,"updatedTime":1704306851000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.65,"words":1096},"filePathRelative":"unreal/function[函数]/3-EditorUsing.md","localizedDate":"2024年1月3日","excerpt":"<h2>导读</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>特征</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><code>WITH_EDITORONLY_DATA</code></td>\\n<td>用于标记在头文件中的成员变量，仅在编辑器中可见，游戏运行时被忽略。</td>\\n</tr>\\n<tr>\\n<td><code>WITH_EDITOR</code></td>\\n<td>用于标记在 CPP 文件中的代码块，该代码块在构建编辑器时应被编译。</td>\\n</tr>\\n<tr>\\n<td><code>GIsEditor</code></td>\\n<td>全局布尔变量，用于判断当前是否在虚幻编辑器中运行。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);