"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6120],{14721:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>c});var t=s(20641);const p=(0,t.Fv)('<ol><li><p><strong>TArray 迭代器：</strong></p><ul><li><code>TArray</code> 是UE中用于动态数组的模板类。它提供了多种迭代器，如 <code>TArray&lt;T&gt;::Iterator</code>，<code>TArray&lt;T&gt;::ConstIterator</code> 等。使用迭代器可以循环遍历数组中的元素。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TArray<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span> MyArray<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MyArray<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    int32<span class="token operator">&amp;</span> Element <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n    <span class="token comment">// 对 Element 进行操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TMap 迭代器：</strong></p><ul><li><code>TMap</code> 是UE用于映射的模板类。它提供了多种迭代器，如 <code>TMap&lt;KeyType, ValueType&gt;::TIterator</code>，<code>TMap&lt;KeyType, ValueType&gt;::TConstIterator</code> 等。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span> MyMap<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MyMap<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Key <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int32<span class="token operator">&amp;</span> Value <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 对 Key 和 Value 进行操作</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//传统写法</span>\nTMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span> MyMap<span class="token punctuation">;</span>\n<span class="token keyword">for</span> TMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Iterator <span class="token function">It</span><span class="token punctuation">(</span>MyMap<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Key <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int32<span class="token operator">&amp;</span> Value <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TSet 迭代器：</strong></p><ul><li><code>TSet</code> 是UE中用于集合的模板类。它提供了多种迭代器，如 <code>TSet&lt;T&gt;::TIterator</code>，<code>TSet&lt;T&gt;::TConstIterator</code> 等。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSet<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span> MySet<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MySet<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    int32<span class="token operator">&amp;</span> Element <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n    <span class="token comment">// 对 Element 进行操作</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TActorIterator：</strong></p><ul><li><code>TActorIterator</code> 是用于迭代关卡中的Actor的迭代器。</li></ul></li></ol><blockquote><p>写法：</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>TObjectIterator<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> It<span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    AActor<span class="token operator">*</span> Actor <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n    \n    <span class="token comment">// 在这里对 Actor 进行操作</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>例子：</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>AActor<span class="token operator">*</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 使用QUICK_SCOPE_CYCLE_COUNTER进行性能分析，标记函数调用的性能</span>\n    <span class="token function">QUICK_SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>UGameplayStatics_GetActorOfClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 如果未提供ActorClass，则不执行任何操作，直接返回nullptr</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClass<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 通过WorldContextObject获取当前世界的指针，如果失败则记录错误并返回nullptr</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>UWorld<span class="token operator">*</span> World <span class="token operator">=</span> GEngine<span class="token operator">-&gt;</span><span class="token function">GetWorldFromContextObject</span><span class="token punctuation">(</span>WorldContextObject<span class="token punctuation">,</span> EGetWorldErrorMode<span class="token double-colon punctuation">::</span>LogAndReturnNull<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 使用TActorIterator迭代World中的所有指定类型的Actor</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>TActorIterator<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> <span class="token function">It</span><span class="token punctuation">(</span>World<span class="token punctuation">,</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token comment">// 获取当前迭代到的Actor指针</span>\n                AActor<span class="token operator">*</span> Actor <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n                <span class="token comment">// 返回找到的第一个符合条件的Actor</span>\n                <span class="token keyword">return</span> Actor<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果未找到符合条件的Actor，返回nullptr</span>\n    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>TObjectIterator ：</strong><ul><li><code>TObjectIterator </code> 不采用 UWorld 上下文。这意味着它将遍历内存中的几乎每个 UObject。</li></ul></li></ol><blockquote><p>写法</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>TObjectIterator<span class="token operator">&lt;</span>UObject<span class="token operator">&gt;</span> It<span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\nUObject<span class="token operator">*</span> Object <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n\n    <span class="token comment">// 在这里对 Object 进行操作</span>\n    <span class="token comment">// 例如，检查对象类型，执行操作等</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),e={},o=(0,s(66262).A)(e,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 迭代器通常是用于循环访问集合（例如数组、映射、集合等）中的元素的工具。UE提供了多种类型的迭代器，其中一些常见的包括： ")])),_:1}),p])}]]),c=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html","title":"F9.Iterator|迭代器","lang":"zh-CN","frontmatter":{"title":"F9.Iterator|迭代器","order":9,"category":["u++"],"description":"TArray 迭代器： TArray 是UE中用于动态数组的模板类。它提供了多种迭代器，如 TArray<T>::Iterator，TArray<T>::ConstIterator 等。使用迭代器可以循环遍历数组中的元素。 TMap 迭代器： TMap 是UE用于映射的模板类。它提供了多种迭代器，如 TMap<KeyType, ValueType>::...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F9.Iterator|迭代器"}],["meta",{"property":"og:description","content":"TArray 迭代器： TArray 是UE中用于动态数组的模板类。它提供了多种迭代器，如 TArray<T>::Iterator，TArray<T>::ConstIterator 等。使用迭代器可以循环遍历数组中的元素。 TMap 迭代器： TMap 是UE用于映射的模板类。它提供了多种迭代器，如 TMap<KeyType, ValueType>::..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T18:34:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-03T18:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F9.Iterator|迭代器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T18:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1704306851000,"updatedTime":1704306851000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.82,"words":546},"filePathRelative":"unreal/function[函数]/9-Iterator.md","localizedDate":"2024年1月3日","excerpt":"\\n<ol>\\n<li>\\n<p><strong>TArray 迭代器：</strong></p>\\n<ul>\\n<li><code>TArray</code> 是UE中用于动态数组的模板类。它提供了多种迭代器，如 <code>TArray&lt;T&gt;::Iterator</code>，<code>TArray&lt;T&gt;::ConstIterator</code> 等。使用迭代器可以循环遍历数组中的元素。</li>\\n</ul>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>TArray<span class=\\"token operator\\">&lt;</span>int32<span class=\\"token operator\\">&gt;</span> MyArray<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> It <span class=\\"token operator\\">=</span> MyArray<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateIterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> It<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>It<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    int32<span class=\\"token operator\\">&amp;</span> Element <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>It<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 对 Element 进行操作</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p><strong>TMap 迭代器：</strong></p>\\n<ul>\\n<li><code>TMap</code> 是UE用于映射的模板类。它提供了多种迭代器，如 <code>TMap&lt;KeyType, ValueType&gt;::TIterator</code>，<code>TMap&lt;KeyType, ValueType&gt;::TConstIterator</code> 等。</li>\\n</ul>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>TMap<span class=\\"token operator\\">&lt;</span>FString<span class=\\"token punctuation\\">,</span> int32<span class=\\"token operator\\">&gt;</span> MyMap<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> It <span class=\\"token operator\\">=</span> MyMap<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateIterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> It<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>It<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> FString<span class=\\"token operator\\">&amp;</span> Key <span class=\\"token operator\\">=</span> It<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Key</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    int32<span class=\\"token operator\\">&amp;</span> Value <span class=\\"token operator\\">=</span> It<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 对 Key 和 Value 进行操作</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//传统写法</span>\\nTMap<span class=\\"token operator\\">&lt;</span>FString<span class=\\"token punctuation\\">,</span> int32<span class=\\"token operator\\">&gt;</span> MyMap<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> TMap<span class=\\"token operator\\">&lt;</span>FString<span class=\\"token punctuation\\">,</span> int32<span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>Iterator <span class=\\"token function\\">It</span><span class=\\"token punctuation\\">(</span>MyMap<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> It<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>It<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">const</span> FString<span class=\\"token operator\\">&amp;</span> Key <span class=\\"token operator\\">=</span> It<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Key</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    int32<span class=\\"token operator\\">&amp;</span> Value <span class=\\"token operator\\">=</span> It<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Value</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p><strong>TSet 迭代器：</strong></p>\\n<ul>\\n<li><code>TSet</code> 是UE中用于集合的模板类。它提供了多种迭代器，如 <code>TSet&lt;T&gt;::TIterator</code>，<code>TSet&lt;T&gt;::TConstIterator</code> 等。</li>\\n</ul>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>TSet<span class=\\"token operator\\">&lt;</span>int32<span class=\\"token operator\\">&gt;</span> MySet<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> It <span class=\\"token operator\\">=</span> MySet<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">CreateIterator</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> It<span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>It<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    int32<span class=\\"token operator\\">&amp;</span> Element <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">*</span>It<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">// 对 Element 进行操作</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div></li>\\n<li>\\n<p><strong>TActorIterator：</strong></p>\\n<ul>\\n<li><code>TActorIterator</code> 是用于迭代关卡中的Actor的迭代器。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);