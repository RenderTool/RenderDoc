"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1895],{4454:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>d});var e=a(20641);const t=a.p+"assets/img/BLUEPRINTNATIVEENVENT.404740a3.png",c=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">class</span> <span class="token class-name">IMyInterface</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 实现接口的类</span>\n    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IMyInterface</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 实现接口方法的具体逻辑</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),p=(0,e.Fv)('<h3 id="简单实践" tabindex="-1"><a class="header-anchor" href="#简单实践"><span>简单实践</span></a></h3><ol><li>继承<code>UInterface</code></li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>声明接口类与声明普通的虚幻类相似，但仍有几个区别。<br> 1.接口类使用UINTERFACE宏而不是UCLASS宏.<br> 2.继承自&quot;UInterface&quot;而不是&quot;UObject&quot;。<br> 3.依然可以使用传统虚函数方法定义接口。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/Interface.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyInterface.generated.h&quot;</span></span>\n\n<span class="token function">UINTERFACE</span><span class="token punctuation">(</span>MinimalAPI<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">UMyInterface</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UInterface</span><span class="token comment">//继承自UInterface</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MYPROJECT_API</span> IMyInterface<span class="token comment">//使用时继承这个即可。</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintNativeEvent<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;CameraInterface&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">void</span>  <span class="token function">IChangeCamera</span> <span class="token punctuation">(</span>int32 CameraID<span class="token punctuation">,</span><span class="token keyword">float</span> CameraSwitchTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>调用方继承刚刚定义的接口类后用虚函数重写即可。</li></ol>',5),o=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"pragma"),(0,e.eW)(),(0,e.Lk)("span",{class:"token expression"},"once")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"CoreMinimal.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyInterface.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.generated.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token comment"},"// 声明类并实现接口"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"UCLASS"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"MYPROJECT_API"),(0,e.eW)(" UMyClass "),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" UObject"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" IMyInterface\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token function"},"GENERATED_BODY"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"virtual"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token function"},"IChangeCamera_Implementation"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"override"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.Lk)("span",{class:"token comment"},"//重写虚函数。"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),l=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"UMyClass"),(0,e.Lk)("span",{class:"token double-colon punctuation"},"::"),(0,e.Lk)("span",{class:"token function"},"MyMethod_Implementation"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token comment"},"// 实现接口方法的具体逻辑"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),i=(0,e.Fv)('<figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2024-2-28" tabindex="-1"><a class="header-anchor" href="#_2024-2-28"><span>2024/2/28</span></a></h3><ol start="3"><li>其他类中调用</li></ol><h4 id="_1-普通调用" tabindex="-1"><a class="header-anchor" href="#_1-普通调用"><span>①. 普通调用</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Interface<span class="token operator">-&gt;</span><span class="token function">ISetLockVisibility</span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">,</span>IsFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-blueprintnativeevent" tabindex="-1"><a class="header-anchor" href="#_2-blueprintnativeevent"><span>②. BlueprintNativeEvent</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>IMenuInterface<span class="token operator">*</span> Interface <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>IMenuInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Interface<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Interface<span class="token operator">-&gt;</span><span class="token function">Execute_ISetLockVisibility</span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">,</span>IsFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Actor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UHighlightInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">IHighlightInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_UnHighlightActor</span><span class="token punctuation">(</span>Actor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h3>',9),r={href:"https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Interfaces/",target:"_blank",rel:"noopener noreferrer"},u={},k=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,e.g2)("chatmessage"),t=(0,e.g2)("CodeTabs"),u=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(a,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" UEC++中怎么写接口？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 你指的是接口类吧！ ")])),_:1}),(0,e.bF)(a,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 是的，我知道多态虚函数本身也是接口，我想知道UE中有没有什么特殊的地方。 ")])),_:1}),c,(0,e.bF)(a,{avatar:"../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 安排! ")])),_:1}),p,(0,e.bF)(t,{id:"28",data:[{id:"MyClass.h"},{id:"MyClass.cpp"}],"tab-id":"language"},{title0:(0,e.k6)((({value:n,isActive:s})=>[(0,e.eW)("MyClass.h")])),title1:(0,e.k6)((({value:n,isActive:s})=>[(0,e.eW)("MyClass.cpp")])),tab0:(0,e.k6)((({value:n,isActive:s})=>[o])),tab1:(0,e.k6)((({value:n,isActive:s})=>[l])),_:1},8,["data"]),i,(0,e.Lk)("p",null,[(0,e.Lk)("a",r,[(0,e.eW)("官方文档"),(0,e.bF)(u)])])])}]]),d=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","title":"c5.Interface|接口","lang":"zh-CN","frontmatter":{"title":"c5.Interface|接口","order":500,"category":["u++"],"description":"简单实践 继承UInterface 注 声明接口类与声明普通的虚幻类相似，但仍有几个区别。 1.接口类使用UINTERFACE宏而不是UCLASS宏. 2.继承自\\"UInterface\\"而不是\\"UObject\\"。 3.依然可以使用传统虚函数方法定义接口。 调用方继承刚刚定义的接口类后用虚函数重写即可。 2024/2/28 其他类中调用 ①. 普通调用 ...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c5.Interface|接口"}],["meta",{"property":"og:description","content":"简单实践 继承UInterface 注 声明接口类与声明普通的虚幻类相似，但仍有几个区别。 1.接口类使用UINTERFACE宏而不是UCLASS宏. 2.继承自\\"UInterface\\"而不是\\"UObject\\"。 3.依然可以使用传统虚函数方法定义接口。 调用方继承刚刚定义的接口类后用虚函数重写即可。 2024/2/28 其他类中调用 ①. 普通调用 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-25T08:26:44.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-09-25T08:26:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c5.Interface|接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-25T08:26:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"简单实践","slug":"简单实践","link":"#简单实践","children":[]},{"level":3,"title":"2024/2/28","slug":"_2024-2-28","link":"#_2024-2-28","children":[]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1727252804000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":3}]},"readingTime":{"minutes":1.26,"words":378},"filePathRelative":"unreal/core[核心]/5-Interface.md","localizedDate":"2024年1月3日","excerpt":"\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">IMyInterface</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 实现接口的类</span>\\n    <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyClass</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">IMyInterface</span></span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyMethod</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">override</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 实现接口方法的具体逻辑</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);