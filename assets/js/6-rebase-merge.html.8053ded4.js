"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1092],{51807:(e,t,i)=>{i.r(t),i.d(t,{comp:()=>u,data:()=>m});var a=i(20641);const l=i.p+"assets/img/merge.6b4a5892.png",n=i.p+"assets/img/rebase.1e8945ef.png",o=i.p+"assets/img/qub.fd50957d.png",r=(0,a.Lk)("h2",{id:"问题详情",tabindex:"-1"},[(0,a.Lk)("a",{class:"header-anchor",href:"#问题详情"},[(0,a.Lk)("span",null,"问题详情")])],-1),s=(0,a.Fv)('<h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h2><ol><li><p><strong>合并（Merge）：</strong></p><ul><li>合并是将两个分支的历史记录合并在一起，创建一个新的合并提交来整合两者的修改。</li><li>合并会保留原分支的完整历史记录，因此可以清晰地看到哪些修改来自于哪个分支。</li><li>合并会创建一个新的合并提交，这个提交有多个父节点，指向被合并的分支的最新提交和合并分支的最新提交。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o   (分支A)\n \\         /\n  o---o---o   (分支B)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>合并后：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o---o   (合并提交)\n \\         /           /\n  o---o---o   (分支A)   (分支B)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li><p><strong>变基（Rebase）：</strong></p><ul><li>变基也是将两个分支的历史记录合并在一起，但与合并不同，它将当前分支的所有提交都应用在目标分支的最新提交上。</li><li>变基会使提交历史更加线性，避免了合并提交的产生，使得提交历史更加清晰。</li><li>变基可以提供一个更干净、整洁的提交历史，但可能会改写提交历史，因此不建议在公共分支上进行变基操作。</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o   (分支A)\n \\\n  o---o---o   (分支B)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>变基后：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o   (分支A)\n                       \\\n                        o---o---o   (分支B)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2>',6),d=(0,a.Lk)("ul",null,[(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,"合并"),(0,a.eW)("会保留原分支的完整历史记录，创建一个新的合并提交。")]),(0,a.Lk)("li",null,[(0,a.Lk)("strong",null,"变基"),(0,a.eW)("会将当前分支的所有提交都应用在目标分支的最新提交上，使提交历史更加线性。")])],-1),c=(0,a.Lk)("figure",null,[(0,a.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,a.Lk)("figcaption")],-1),g={},u=(0,i(66262).A)(g,[["render",function(e,t){const i=(0,a.g2)("chatmessage");return(0,a.uX)(),(0,a.CE)("div",null,[r,(0,a.bF)(i,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,a.k6)((()=>[(0,a.eW)(" Git-变基(rebase)和合并(merge)区别？ ")])),_:1}),s,(0,a.bF)(i,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:(0,a.k6)((()=>[(0,a.eW)(" 再多说就不礼貌了 ")])),_:1}),d,c])}]]),m=JSON.parse('{"path":"/tools/git/6-rebase-merge.html","title":"Git-6.变基(rebase)和合并(merge)区别？","lang":"zh-CN","frontmatter":{"title":"Git-6.变基(rebase)和合并(merge)区别？","order":6,"category":["Git"],"tag":["踩坑记录"],"description":"问题详情 解析 合并（Merge）： 合并是将两个分支的历史记录合并在一起，创建一个新的合并提交来整合两者的修改。 合并会保留原分支的完整历史记录，因此可以清晰地看到哪些修改来自于哪个分支。 合并会创建一个新的合并提交，这个提交有多个父节点，指向被合并的分支的最新提交和合并分支的最新提交。 合并后： 变基（Rebase）： 变基也是将两个分支的历史记录...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/tools/git/6-rebase-merge.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"Git-6.变基(rebase)和合并(merge)区别？"}],["meta",{"property":"og:description","content":"问题详情 解析 合并（Merge）： 合并是将两个分支的历史记录合并在一起，创建一个新的合并提交来整合两者的修改。 合并会保留原分支的完整历史记录，因此可以清晰地看到哪些修改来自于哪个分支。 合并会创建一个新的合并提交，这个提交有多个父节点，指向被合并的分支的最新提交和合并分支的最新提交。 合并后： 变基（Rebase）： 变基也是将两个分支的历史记录..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"踩坑记录"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git-6.变基(rebase)和合并(merge)区别？\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"问题详情","slug":"问题详情","link":"#问题详情","children":[]},{"level":2,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1699373749000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":3},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.51,"words":454},"filePathRelative":"tools/git/6-rebase-merge.md","localizedDate":"2023年11月7日","excerpt":"<h2>问题详情</h2>\\n\\n<h2>解析</h2>\\n<ol>\\n<li>\\n<p><strong>合并（Merge）：</strong></p>\\n<ul>\\n<li>合并是将两个分支的历史记录合并在一起，创建一个新的合并提交来整合两者的修改。</li>\\n<li>合并会保留原分支的完整历史记录，因此可以清晰地看到哪些修改来自于哪个分支。</li>\\n<li>合并会创建一个新的合并提交，这个提交有多个父节点，指向被合并的分支的最新提交和合并分支的最新提交。</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>o---o---o---o---o---o   (分支A)\\n \\\\         /\\n  o---o---o   (分支B)\\n</code></pre></div><ul>\\n<li>合并后：</li>\\n</ul>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>o---o---o---o---o---o---o   (合并提交)\\n \\\\         /           /\\n  o---o---o   (分支A)   (分支B)\\n</code></pre></div></li>\\n</ol>","autoDesc":true}')}}]);