"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6969],{51662:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>k,data:()=>v});var e=a(20641);const t=a.p+"assets/img/zhifin.f8f22f29.png",p=(0,e.Lk)("h3",{id:"直接使用时",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#直接使用时"},[(0,e.Lk)("span",null,"直接使用时")])],-1),i=(0,e.Lk)("h3",{id:"参与运算时",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#参与运算时"},[(0,e.Lk)("span",null,"参与运算时")])],-1),o=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">int</span> result2 <span class="token operator">=</span>i<span class="token operator">++</span><span class="token punctuation">;</span>\n    cout<span class="token operator">&lt;&lt;</span>result2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    \n    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//为了测试重置为0.</span>\n    \n    <span class="token keyword">int</span> result3<span class="token operator">=</span><span class="token operator">++</span>i<span class="token punctuation">;</span>\n    cout<span class="token operator">&lt;&lt;</span>result3<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>运行结果</p></blockquote><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),c=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n<span class="token comment">// 前置递增函数</span>\n<span class="token keyword">int</span> <span class="token function">preIncrement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 后置递增函数</span>\n<span class="token keyword">int</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 使用前置递增函数</span>\n    <span class="token keyword">int</span> result1 <span class="token operator">=</span> <span class="token function">preIncrement</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cout<span class="token operator">&lt;&lt;</span>result1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    \n    i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//便于测试我们重写赋值</span>\n    \n    <span class="token comment">// 使用后置递增函数</span>\n    <span class="token keyword">int</span> result2 <span class="token operator">=</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cout<span class="token operator">&lt;&lt;</span>result2<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>\n    \n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l=(0,e.Fv)('<ol><li><p><strong>前置递增函数 <code>preIncrement</code>：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">preIncrement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">++</span>x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数先对 <code>x</code> 进行前置递增操作，然后返回递增后的值。因此，如果传入 <code>5</code>，函数会先将 <code>x</code> 递增为 <code>6</code>，然后返回 <code>6</code>。</p></li><li><p><strong>后置递增函数 <code>postIncrement</code>：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">postIncrement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数先返回 <code>x</code> 的原始值，然后再对 <code>x</code> 进行后置递增操作。如果传入 <code>5</code>，函数会返回 <code>5</code>，然后将 <code>x</code> 递增为 <code>6</code>。</p></li></ol>',1),r=(0,e.Lk)("br",null,null,-1),d=(0,e.Lk)("br",null,null,-1),u={},k=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,e.g2)("chatmessage"),t=(0,e.g2)("gifwithbutton");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我不理解！++i和i++，有什么区别嘛？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 要分情况，有时候没区别有时候有区别。 ")])),_:1}),p,(0,e.bF)(t,{src:"../../../assets/unrealgif/i++.gif"}),(0,e.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 根据上方演示来看都是+1没有区别。 ")])),_:1}),i,(0,e.bF)(a,{avatar:"../../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 参与运算时，区别就出现了！ ")])),_:1}),o,(0,e.bF)(t,{src:"../../../assets/unrealgif/i++&++i.gif"}),(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我不理解！结果不一样了！ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb02.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 这么看可能不形象，我给你重新举个例子。 ")])),_:1}),c,(0,e.bF)(t,{src:"../../../assets/unrealgif/++i.gif"}),l,(0,e.bF)(a,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我大概理解了i本身无论怎么样都在自增，但 ++i先自增后返回。 i++先返回后自增。 ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 是的，其实字面上也是这个意思。"),r,(0,e.eW)(" ++i,++在前先自增然后返回i。"),d,(0,e.eW)(" i++,++在后先返回i在自增加。 ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这么说，如果我想让i++在函数中正常运行，还需要一个临时变量转存后才能返回，要不然始终少一步。 ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 是的，这也是大量数据时++i性能更高的原因，直接+1后返回i,不需要临时变量来复制传递。 ")])),_:1})])}]]),v=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html","title":"c++7.i++|++i区别","lang":"zh-CN","frontmatter":{"title":"c++7.i++|++i区别","order":7,"category":["c++"],"description":"直接使用时","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++7.i++|++i区别"}],["meta",{"property":"og:description","content":"直接使用时"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++7.i++|++i区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"直接使用时","slug":"直接使用时","link":"#直接使用时","children":[]},{"level":3,"title":"参与运算时","slug":"参与运算时","link":"#参与运算时","children":[]}],"git":{"createdTime":1701724009000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.94,"words":582},"filePathRelative":"language/cpp/BaseGuide[基础概念]/7-i++and++i.md","localizedDate":"2023年12月4日","excerpt":"\\n\\n<h3>直接使用时</h3>\\n","autoDesc":true}')}}]);