"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3291],{57286:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>g,data:()=>k});var e=s(20641);const t=s.p+"assets/img/loadassets002.9faebeea.png",p=(0,e.Lk)("h3",{id:"类和对象",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#类和对象"},[(0,e.Lk)("span",null,"类和对象")])],-1),o=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    string Name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>Person person1<span class="token punctuation">;</span>\nPerson <span class="token keyword">new</span> person2<span class="token punctuation">;</span>\n<span class="token comment">//....</span>\n<span class="token keyword">delete</span> person2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),c=(0,e.Fv)('<h3 id="ue类实例化" tabindex="-1"><a class="header-anchor" href="#ue类实例化"><span>UE类实例化</span></a></h3><blockquote><p>模板</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UYourClass<span class="token operator">*</span> MyObject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>静态工厂</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UYourClass<span class="token operator">*</span> MyObject <span class="token operator">=</span> <span class="token class-name">UYourClass</span><span class="token double-colon punctuation">::</span><span class="token function">CreateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>SpawnActor</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>AYourActor<span class="token operator">*</span> MyActor <span class="token operator">=</span> <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">SpawnActor</span><span class="token generic class-name"><span class="token operator">&lt;</span>AYourActor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>YourActorClass<span class="token punctuation">,</span> SpawnLocation<span class="token punctuation">,</span> SpawnRotation<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="ue类引用" tabindex="-1"><a class="header-anchor" href="#ue类引用"><span>UE类引用</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSoftClassPtr<span class="token operator">&lt;</span>UUserWidget<span class="token operator">&gt;</span> WidgetClass<span class="token punctuation">;</span>\nUClass<span class="token operator">*</span> UUserWidget <span class="token operator">=</span> WidgetClass<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',9),i=(0,e.Fv)('<figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><strong>对象引用 (<code>TObjectPtr</code>):</strong><ul><li><strong>特性：</strong> 对象引用是强引用，它持有对 <code>UObject</code> 派生类对象的强引用，当对象销毁时，引用计数减少。</li><li><strong>用途：</strong> 适用于需要确保对象在引用期间不会被销毁的情况，例如需要持有一个具体对象的引用。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TObjectPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MyObject<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>软引用 (<code>TSoftObjectPtr</code>):</strong><ul><li><strong>特性：</strong> 软引用是一种弱引用，它不会增加对象的引用计数。如果对象被销毁，软引用会变为无效。</li><li><strong>用途：</strong> 适用于需要引用对象，但不要求对象一直存在的情况，例如在需要加载对象时，但不希望对象一直保持在内存中。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSoftObjectPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MySoftObject<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>类引用 (<code>TSubclassOf</code>):</strong><ul><li><strong>特性：</strong> 类引用是用于引用类的一种方式，而不是类的实例。它不会增加类的引用计数。</li><li><strong>用途：</strong> 适用于需要引用类本身而不是类的实例的情况，例如在运行时动态生成对象的时候。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSubclassOf<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MyClass<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><strong>软类引用 (<code>TSoftClassPtr</code>):</strong><ul><li><strong>特性：</strong> 软类引用是软引用的类版本，用于引用类，当类被销毁时，引用变为无效。</li><li><strong>用途：</strong> 类似于软引用，适用于需要引用类但不要求一直存在的情况，例如在需要加载类时。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSoftClassPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MySoftClass<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',9),r=(0,e.Fv)('<h3 id="ue中的指针模板" tabindex="-1"><a class="header-anchor" href="#ue中的指针模板"><span>UE中的指针模板</span></a></h3><ol><li><strong>shared_ptr|共享指针:</strong></li></ol><p>记录该对象当前被多少个共享指针所持有。当一个共享指针被销毁时，所有指向该对象的共享指针的计数都会减少。当指向一个对象的所有共享指针都被销毁时，对象自动被销毁。</p><ol start="2"><li><strong>unique_ptr|唯一指针：</strong></li></ol><p>该对象只能被一个唯一指针所持有。当唯一指针被销毁时，对应的对象也被销毁。</p><ol start="3"><li><strong>weak_ptr|弱指针：</strong></li></ol><p>该指针并不直接指向对象，而是指向该对象的共享指针。这样即使弱指针始终存在，没有被销毁，对象也会在共享指针的管理下自动销毁。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>',8),d={href:"https://zhuanlan.zhihu.com/p/604213414#:~:text=%E8%BD%AF%E7%B1%BB%E5%BC%95%E7%94%A8%EF%BC%9A%20TSoftClassPtr%3CT%3E%20SoftClassRef%3B%20%E5%9C%A8%E8%93%9D%E5%9B%BE%E4%B8%AD%EF%BC%8C%E8%BD%AF%E7%B1%BB%E5%BC%95%E7%94%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%98%AF%E6%B5%85%E7%B4%AB%E8%89%B2%E7%9A%84%E8%BD%AF%E7%B1%BB%E5%BC%95%E7%94%A8%EF%BC%9A%20%E4%B8%8D%E8%BF%87%EF%BC%8C%E8%BF%99%E4%B8%A4%E7%A7%8D%E4%B8%9C%E8%A5%BF%E6%9C%AC%E8%B4%A8%E4%B8%8A%E5%8F%AA%E6%98%AF%E4%B8%BA%E4%BA%86%E5%AD%98%E5%82%A8%E4%B8%80%E4%B8%AA%E8%B5%84%E4%BA%A7%E8%B7%AF%E5%BE%84%E3%80%82,%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%B8%8D%E5%9C%A8%E4%B9%8E%E8%93%9D%E5%9B%BE%E5%B1%82%E6%98%BE%E7%A4%BA%E7%9A%84%E5%9B%BE%E6%A0%87%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%AE%8C%E5%85%A8%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20FSoftObjectPath%20%E5%92%8C%20FSoftClassPath%20%E6%9D%A5%E4%BB%A3%E6%9B%BF%E4%BB%96%E4%BB%AC%E7%9A%84%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD%E3%80%82",target:"_blank",rel:"noopener noreferrer"},u={},g=(0,s(66262).A)(u,[["render",function(a,n){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[p,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 类和对象什么区别？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 这个叫类 ")])),_:1}),o,(0,e.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 根据这个类实例化的叫对象 ")])),_:1}),l,(0,e.bF)(s,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 类的实例化就是创建对象的过程。在面向对象编程中，通过实例化类来创建对象，这个过程也被称为类的实例化。而UE中因为有反射系统，推荐你用NewObject来实例化 ")])),_:1}),c,(0,e.bF)(s,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 注意这里还是类，不是实例化的对象，所以你可以在引擎中看到从类构建实例、创建UI的控件、spawnActor这种节点。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 先来了解一下几个UE中的引用类型. ")])),_:1}),i,(0,e.bF)(s,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 本质都是指针 ")])),_:1}),r,(0,e.Lk)("p",null,[(0,e.Lk)("a",d,[(0,e.eW)("【UE4】对象指针，类指针，智能指针，硬引用，软引用"),(0,e.bF)(t)])])])}]]),k=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html","title":"F10.Class&OBJ|类和对象","lang":"zh-CN","frontmatter":{"title":"F10.Class&OBJ|类和对象","order":10,"category":["u++"],"tag":["Specifiers"],"description":"类和对象 UE类实例化 模板 静态工厂 SpawnActor UE类引用 对象引用 (TObjectPtr): 特性： 对象引用是强引用，它持有对 UObject 派生类对象的强引用，当对象销毁时，引用计数减少。 用途： 适用于需要确保对象在引用期间不会被销毁的情况，例如需要持有一个具体对象的引用。 软引用 (TSoftObjectPtr): 特性： ...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F10.Class&OBJ|类和对象"}],["meta",{"property":"og:description","content":"类和对象 UE类实例化 模板 静态工厂 SpawnActor UE类引用 对象引用 (TObjectPtr): 特性： 对象引用是强引用，它持有对 UObject 派生类对象的强引用，当对象销毁时，引用计数减少。 用途： 适用于需要确保对象在引用期间不会被销毁的情况，例如需要持有一个具体对象的引用。 软引用 (TSoftObjectPtr): 特性： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-11T15:49:02.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"Specifiers"}],["meta",{"property":"article:modified_time","content":"2024-01-11T15:49:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F10.Class&OBJ|类和对象\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-11T15:49:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[]},{"level":3,"title":"UE类实例化","slug":"ue类实例化","link":"#ue类实例化","children":[]},{"level":3,"title":"UE类引用","slug":"ue类引用","link":"#ue类引用","children":[]},{"level":3,"title":"UE中的指针模板","slug":"ue中的指针模板","link":"#ue中的指针模板","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1704988142000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":3.66,"words":1099},"filePathRelative":"unreal/function[函数]/10-PTRINUE.md","localizedDate":"2024年1月3日","excerpt":"<h3>类和对象</h3>\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    string Name<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> Age<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);