"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[5809],{79463:(n,a,s)=>{n.exports=s.p+"assets/img/PIN002.775fa819.png"},69806:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>y,data:()=>P});var e=s(20641),t=s(79463);const p=s.p+"assets/img/PIN001.7e0a6e6e.png",o=s.p+"assets/img/PIN003.832d7142.png",c=s.p+"assets/img/PIN004.6b685a8c.png",l=s.p+"assets/img/PIN005.b1ea02de.png",i=(0,e.Lk)("h2",{id:"uedgraphnode",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#uedgraphnode"},[(0,e.Lk)("span",null,"UEdGraphNode")])],-1),u=(0,e.Lk)("p",null,"莫慌，待老夫慢慢道来。回顾一下Node的构成",-1),d=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),r=(0,e.Lk)("h3",{id:"uedgraphnode-基础接口",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#uedgraphnode-基础接口"},[(0,e.Lk)("span",null,"UEdGraphNode|基础接口")])],-1),k=(0,e.Lk)("p",null,[(0,e.eW)("每个节点，需要录入一些"),(0,e.Lk)("code",null,"基础信息"),(0,e.eW)("。")],-1),v=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UCLASS</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">XXX_API</span> UXXXNode <span class="token operator">:</span> <span class="token keyword">public</span> UEdGraphNode\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token comment">/*初始化时用到引脚*/</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">AllocateDefaultPins</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token comment">/*节点工具提示*/</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetTooltipText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token comment">/*节点标题*/</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetNodeTitle</span><span class="token punctuation">(</span>ENodeTitleType<span class="token double-colon punctuation">::</span>Type TitleType<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token comment">/*颜色和图标*/</span>\n\t<span class="token keyword">virtual</span> FLinearColor <span class="token function">GetNodeTitleColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FSlateIcon <span class="token function">GetIconAndTint</span><span class="token punctuation">(</span>FLinearColor<span class="token operator">&amp;</span> OutColor<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uedgraphnode-createpin" tabindex="-1"><a class="header-anchor" href="#uedgraphnode-createpin"><span>UEdGraphNode|CreatePin</span></a></h3><blockquote><p>输入引脚</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Input<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Exec<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Execute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>输出引脚</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UEdGraphPin<span class="token operator">*</span> NewFloat <span class="token operator">=</span> <span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Input<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Float<span class="token punctuation">,</span>UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Then<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这里有个小坑，按上面那种写法，引脚是黄的无法提升成变量，并且PinName直接用字符串会乱码。</p></blockquote><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UEdGraphPin<span class="token operator">*</span> NewFloat <span class="token operator">=</span> <span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Input<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Real<span class="token punctuation">,</span>UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Float<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Then<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="uedgraphnode-allocatedefaultpins" tabindex="-1"><a class="header-anchor" href="#uedgraphnode-allocatedefaultpins"><span>UEdGraphNode|AllocateDefaultPins</span></a></h3>',10),m=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UXXX</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateDefaultPins</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Input<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Exec<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Execute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Output<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Exec<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Then<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">AllocateDefaultPins</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uedgraphnode-getmenuactions" tabindex="-1"><a class="header-anchor" href="#uedgraphnode-getmenuactions"><span>UEdGraphNode|GetMenuActions</span></a></h3>',2),h=(0,e.Fv)('<figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UXXX</span><span class="token double-colon punctuation">::</span><span class="token function">GetMenuActions</span><span class="token punctuation">(</span>FBlueprintActionDatabaseRegistrar<span class="token operator">&amp;</span> ActionRegistrar<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetMenuActions</span><span class="token punctuation">(</span>ActionRegistrar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">const</span> UClass<span class="token operator">*</span> ActionKey <span class="token operator">=</span> <span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>ActionRegistrar<span class="token punctuation">.</span><span class="token function">IsOpenForRegistration</span><span class="token punctuation">(</span>ActionKey<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">// 注册默认工厂</span>\n\t\tUBlueprintNodeSpawner<span class="token operator">*</span> NodeSpawner <span class="token operator">=</span> <span class="token class-name">UBlueprintNodeSpawner</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">check</span><span class="token punctuation">(</span>NodeSpawner <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tActionRegistrar<span class="token punctuation">.</span><span class="token function">AddBlueprintAction</span><span class="token punctuation">(</span>ActionKey<span class="token punctuation">,</span> NodeSpawner<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uedgraphnode-reallocatepinsduringreconstruction" tabindex="-1"><a class="header-anchor" href="#uedgraphnode-reallocatepinsduringreconstruction"><span>UEdGraphNode|ReallocatePinsDuringReconstruction</span></a></h3>',3),g=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),b=(0,e.Lk)("p",null,[(0,e.eW)("节点重建时，UE 会销毁旧 "),(0,e.Lk)("code",null,"Pin"),(0,e.eW)("，重新生成新的 "),(0,e.Lk)("code",null,"Pin"),(0,e.eW)("。但UE把旧的存储在"),(0,e.Lk)("code",null,"OldPins"),(0,e.eW)("中，让你自己决定怎么处理旧的。")],-1),f=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UK2Node_SuperComboGraphCharge</span><span class="token double-colon punctuation">::</span><span class="token function">ReallocatePinsDuringReconstruction</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>UEdGraphPin<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> OldPins<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">ReallocatePinsDuringReconstruction</span><span class="token punctuation">(</span>OldPins<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token comment">// 输出引脚</span>\n\tOutputPins<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token comment">// 重新创建 Exec 输入引脚</span>\n\t<span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Input<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Exec<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PN_Execute<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> UEdGraphPin<span class="token operator">*</span> OldPin <span class="token operator">:</span> OldPins<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OldPin<span class="token operator">-&gt;</span>Direction <span class="token operator">==</span> EGPD_Output <span class="token operator">&amp;&amp;</span> <span class="token class-name">UEdGraphSchema_K2</span><span class="token double-colon punctuation">::</span><span class="token function">IsExecPin</span><span class="token punctuation">(</span><span class="token operator">*</span>OldPin<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token function">CreatePin</span><span class="token punctuation">(</span>EGPD_Output<span class="token punctuation">,</span> UEdGraphSchema_K2<span class="token double-colon punctuation">::</span>PC_Exec<span class="token punctuation">,</span>OldPin<span class="token operator">-&gt;</span>PinName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\tOutputPins<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>OldPin<span class="token operator">-&gt;</span>PinName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),E=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:l,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),G={},y=(0,s(66262).A)(G,[["render",function(n,a){const s=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[i,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,e.k6)((()=>[(0,e.eW)(" 图表有了，现在要加入一个节点了，这个节点是如何实现的？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[u])),_:1}),d,r,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[k])),_:1}),v,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 告诉编辑器，这个节点默认有哪些节点的引脚. ")])),_:1}),m,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 注册节点到右键菜单,这个几乎是固定写法可以直接Copy ")])),_:1}),h,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,e.k6)((()=>[(0,e.eW)(" 这个到底是什么？ ")])),_:1}),g,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[b])),_:1}),f,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 当然非常关键的一点四记得把默认的引脚也加回去，不然就会变成这样了。 ")])),_:1}),E])}]]),P=JSON.parse('{"path":"/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/10-EdGraph02.html","title":"ED10.EdGraph|K2Node节点","lang":"zh-CN","frontmatter":{"title":"ED10.EdGraph|K2Node节点","order":27,"category":["u++"],"description":"UEdGraphNode UEdGraphNode|基础接口 UEdGraphNode|CreatePin 输入引脚 输出引脚 这里有个小坑，按上面那种写法，引脚是黄的无法提升成变量，并且PinName直接用字符串会乱码。 UEdGraphNode|AllocateDefaultPins UEdGraphNode|GetMenuActions UEdG...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/10-EdGraph02.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"ED10.EdGraph|K2Node节点"}],["meta",{"property":"og:description","content":"UEdGraphNode UEdGraphNode|基础接口 UEdGraphNode|CreatePin 输入引脚 输出引脚 这里有个小坑，按上面那种写法，引脚是黄的无法提升成变量，并且PinName直接用字符串会乱码。 UEdGraphNode|AllocateDefaultPins UEdGraphNode|GetMenuActions UEdG..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T06:07:07.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-06-17T06:07:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ED10.EdGraph|K2Node节点\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-17T06:07:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"UEdGraphNode","slug":"uedgraphnode","link":"#uedgraphnode","children":[{"level":3,"title":"UEdGraphNode|基础接口","slug":"uedgraphnode-基础接口","link":"#uedgraphnode-基础接口","children":[]},{"level":3,"title":"UEdGraphNode|CreatePin","slug":"uedgraphnode-createpin","link":"#uedgraphnode-createpin","children":[]},{"level":3,"title":"UEdGraphNode|AllocateDefaultPins","slug":"uedgraphnode-allocatedefaultpins","link":"#uedgraphnode-allocatedefaultpins","children":[]},{"level":3,"title":"UEdGraphNode|GetMenuActions","slug":"uedgraphnode-getmenuactions","link":"#uedgraphnode-getmenuactions","children":[]},{"level":3,"title":"UEdGraphNode|ReallocatePinsDuringReconstruction","slug":"uedgraphnode-reallocatepinsduringreconstruction","link":"#uedgraphnode-reallocatepinsduringreconstruction","children":[]}]}],"git":{"createdTime":1750140427000,"updatedTime":1750140427000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.76,"words":527},"filePathRelative":"unreal/editor[编辑器]/10-EdGraph02.md","localizedDate":"2025年6月17日","excerpt":"<h2>UEdGraphNode</h2>\\n\\n\\n<figure><figcaption></figcaption></figure>\\n<h3>UEdGraphNode|基础接口</h3>\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UCLASS</span><span class=\\"token punctuation\\">(</span> <span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">XXX_API</span> UXXXNode <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> UEdGraphNode\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t<span class=\\"token comment\\">/*初始化时用到引脚*/</span>\\n\\t<span class=\\"token keyword\\">virtual</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">AllocateDefaultPins</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">/*节点工具提示*/</span>\\n\\t<span class=\\"token keyword\\">virtual</span> FText <span class=\\"token function\\">GetTooltipText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">/*节点标题*/</span>\\n\\t<span class=\\"token keyword\\">virtual</span> FText <span class=\\"token function\\">GetNodeTitle</span><span class=\\"token punctuation\\">(</span>ENodeTitleType<span class=\\"token double-colon punctuation\\">::</span>Type TitleType<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">/*颜色和图标*/</span>\\n\\t<span class=\\"token keyword\\">virtual</span> FLinearColor <span class=\\"token function\\">GetNodeTitleColor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">virtual</span> FSlateIcon <span class=\\"token function\\">GetIconAndTint</span><span class=\\"token punctuation\\">(</span>FLinearColor<span class=\\"token operator\\">&amp;</span> OutColor<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);