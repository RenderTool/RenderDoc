"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6841],{71600:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>d,data:()=>m});var t=s(20641);const e=(0,t.Lk)("h2",{id:"本章概要",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#本章概要"},[(0,t.Lk)("span",null,"本章概要")])],-1),p=(0,t.Lk)("p",null,"以方向为例，优化方向结构体的网络传输",-1),o=(0,t.Lk)("h2",{id:"问题",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#问题"},[(0,t.Lk)("span",null,"问题")])],-1),c=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UENUM</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EDirectionType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>\n<span class="token punctuation">{</span>\n\tForward <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">&quot;Forward&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tBackward <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">&quot;Backward&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tLeft <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">&quot;Left&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tRight <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">&quot;Right&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tInvalid <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">&quot;Invalid&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l=(0,t.Lk)("h3",{id:"数据单位",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据单位"},[(0,t.Lk)("span",null,"数据单位")])],-1),i=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"1 Byte = 8 Bits 字节（Byte）和位（Bit）是计算机科学和信息技术中使用的数据单位。它们用于衡量数据的大小和存储容量。")],-1),u=(0,t.Lk)("p",null,"1位 可以表示两种状态，0 和 1 2位 可以表示四种状态，0，1，2，3 3位 可以表示八种状态，0，1，2，3，4，5，6，7",-1),r=(0,t.Fv)('<ul><li>000 - 无效</li><li>001 - 前</li><li>010 - 后</li><li>011 - 左</li><li>100 - 右</li><li>101 - 其他（如果有的话）</li></ul><h3 id="ustruct网络同步" tabindex="-1"><a class="header-anchor" href="#ustruct网络同步"><span>UStruct网络同步</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token operator">/</span> 自定义结构用于传递简单的枚举值\n<span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">struct</span> <span class="token class-name">FGameplayAbilityTargetData_SimpleEnum</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FGameplayAbilityTargetData</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_USTRUCT_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token comment">// 用于存储简单的枚举值 (例如方向类型)</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> Targeting<span class="token punctuation">)</span>\n\tuint8 EnumValue<span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">virtual</span> UScriptStruct<span class="token operator">*</span> <span class="token function">GetScriptStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">FGameplayAbilityTargetData_SimpleEnum</span><span class="token double-colon punctuation">::</span><span class="token function">StaticStruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n\t<span class="token keyword">virtual</span> FString <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">FString</span><span class="token double-colon punctuation">::</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;EnumValue: %d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> EnumValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n\t<span class="token keyword">bool</span> <span class="token function">NetSerialize</span><span class="token punctuation">(</span>FArchive<span class="token operator">&amp;</span> Ar<span class="token punctuation">,</span> UPackageMap<span class="token operator">*</span> Map<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">&amp;</span> bOutSuccess<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token comment">//Ar &lt;&lt; EnumValue; 8位</span>\n\t\t<span class="token comment">//5个方向，只需3位</span>\n\t\tAr<span class="token punctuation">.</span><span class="token function">SerializeBits</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>EnumValue<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tbOutSuccess <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使结构可以通过网络序列化</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span>\n<span class="token keyword">struct</span> <span class="token class-name">TStructOpsTypeTraits</span><span class="token operator">&lt;</span>FGameplayAbilityTargetData_SimpleEnum<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token keyword">public</span> TStructOpsTypeTraitsBase2<span class="token operator">&lt;</span>FGameplayAbilityTargetData_SimpleEnum<span class="token operator">&gt;</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">enum</span>\n\t<span class="token punctuation">{</span>\n\t\tWithNetSerializer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),k={},d=(0,s(66262).A)(k,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[e,p,o,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 先来看个枚举 ")])),_:1}),c,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 先来扫个盲 ")])),_:1}),l,i,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 思考一下传输这个枚举需要多少数据？ ")])),_:1}),(0,t.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" uint8 = 1 Byte = 8 Bits ，传输这个枚举需要1个字节 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 很好，如果把这个枚举放入结构体中。你认为需要多少字节？ ")])),_:1}),(0,t.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 这取决于结构体中有多少成员变量 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 回到我们的设计的EDirectionType，从设计上来说，你认为需要传输多少位？ ")])),_:1}),(0,t.bF)(s,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,t.k6)((()=>[u])),_:1}),r])}]]),m=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html","title":"NT-2.4|网络优化|结构体","lang":"zh-CN","frontmatter":{"title":"NT-2.4|网络优化|结构体","order":27,"category":["unreal"],"description":"本章概要 以方向为例，优化方向结构体的网络传输 问题 数据单位 1 Byte = 8 Bits 字节（Byte）和位（Bit）是计算机科学和信息技术中使用的数据单位。它们用于衡量数据的大小和存储容量。 000 - 无效 001 - 前 010 - 后 011 - 左 100 - 右 101 - 其他（如果有的话） UStruct网络同步","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.4|网络优化|结构体"}],["meta",{"property":"og:description","content":"本章概要 以方向为例，优化方向结构体的网络传输 问题 数据单位 1 Byte = 8 Bits 字节（Byte）和位（Bit）是计算机科学和信息技术中使用的数据单位。它们用于衡量数据的大小和存储容量。 000 - 无效 001 - 前 010 - 后 011 - 左 100 - 右 101 - 其他（如果有的话） UStruct网络同步"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T23:34:33.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-10-25T23:34:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.4|网络优化|结构体\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-25T23:34:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"本章概要","slug":"本章概要","link":"#本章概要","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[{"level":3,"title":"数据单位","slug":"数据单位","link":"#数据单位","children":[]},{"level":3,"title":"UStruct网络同步","slug":"ustruct网络同步","link":"#ustruct网络同步","children":[]}]}],"git":{"createdTime":1729899273000,"updatedTime":1729899273000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.59,"words":477},"filePathRelative":"unreal/network[网络]/2.4-GamePlayNetWork.md","localizedDate":"2024年10月25日","excerpt":"<h2>本章概要</h2>\\n<p>以方向为例，优化方向结构体的网络传输</p>\\n<h2>问题</h2>\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UENUM</span><span class=\\"token punctuation\\">(</span>BlueprintType<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">enum</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">EDirectionType</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token class-name\\">uint8</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n\\tForward <span class=\\"token function\\">UMETA</span><span class=\\"token punctuation\\">(</span>DisplayName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Forward\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\tBackward <span class=\\"token function\\">UMETA</span><span class=\\"token punctuation\\">(</span>DisplayName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Backward\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\tLeft <span class=\\"token function\\">UMETA</span><span class=\\"token punctuation\\">(</span>DisplayName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Left\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\tRight <span class=\\"token function\\">UMETA</span><span class=\\"token punctuation\\">(</span>DisplayName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Right\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span>\\n\\tInvalid <span class=\\"token function\\">UMETA</span><span class=\\"token punctuation\\">(</span>DisplayName <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"Invalid\\"</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);