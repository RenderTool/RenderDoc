"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[5223],{46783:(n,t,e)=>{e.r(t),e.d(t,{comp:()=>k,data:()=>v});var a=e(20641);const s=e.p+"assets/img/conststatic.88d306b0.png",o=(0,a.Fv)('<h3 id="前置知识" tabindex="-1"><a class="header-anchor" href="#前置知识"><span>前置知识</span></a></h3><table><thead><tr><th>区域</th><th>描述</th></tr></thead><tbody><tr><td>代码区 (Code)</td><td>存放函数体的二进制代码，只读，由操作系统管理。</td></tr><tr><td>全局/静态存储区 (Global/Static Storage)</td><td>存放全局变量、静态变量和常量，在程序启动时分配，程序结束时释放。</td></tr><tr><td>栈区 (Stack)</td><td>存放函数的局部变量、函数参数值等，由编译器自动分配释放，与函数调用相关。</td></tr><tr><td>堆区 (Heap)</td><td>程序员可以通过 new 和 delete（或 malloc 和 free）用于动态内存管理，需要手动管理内存的生命周期。</td></tr></tbody></table><h2 id="const-static-defined" tabindex="-1"><a class="header-anchor" href="#const-static-defined"><span><code>const</code> |<code>static</code>|<code>#defined</code></span></a></h2>',3),c=(0,a.Lk)("p",null,[(0,a.eW)("在 C++ 中，"),(0,a.Lk)("code",null,"const"),(0,a.eW)("、"),(0,a.Lk)("code",null,"static"),(0,a.eW)(" 和 "),(0,a.Lk)("code",null,"#define"),(0,a.eW)(" 可以被视为修饰符或者说是关键字，因为它们都用于修改标识符（变量、函数、宏等）的属性或行为。")],-1),i=(0,a.Lk)("img",{src:s,alt:"csdn",tabindex:"0",loading:"lazy"},null,-1),l={href:"https://blog.csdn.net/m0_59738220/article/details/123466360?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=2",target:"_blank",rel:"noopener noreferrer"},d=(0,a.Fv)('<ol><li><p><strong><code>const</code> 修饰符：</strong></p><ul><li><code>const</code> 用于定义常量，表示标识符的值在程序执行期间不能被修改。</li><li><code>const</code> 修饰的变量在内存中的存储位置取决于它的声明位置和作用域。 <ul><li>如果是在全局范围声明，它将存储在全局数据区。</li><li>如果是在局部范围声明（函数内部），它通常存储在栈上。</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 在全局范围声明的 const</span>\n<span class="token keyword">const</span> <span class="token keyword">int</span> globalConstVar <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>  <span class="token comment">// 存储在全局数据区</span>\n\n<span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在局部范围声明的 const</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span> localConstVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 通常存储在栈上</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>static</code> 修饰符：</strong></p><ul><li><code>static</code> 用于定义静态变量、静态成员变量、静态成员函数，以及在文件作用域内的全局变量。它限定了标识符的生命周期、作用域和链接属性。 <ul><li><code>static</code> 修饰的全局变量存储在全局数据区。</li><li><code>static</code> 修饰的局部变量（函数内的静态变量）在程序启动时分配内存，通常也存储在全局数据区。</li><li><code>static</code> 修饰的静态成员变量和静态成员函数属于类的范畴，存储在全局数据区。</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// static 修饰的全局变量</span>\n<span class="token keyword">static</span> <span class="token keyword">int</span> globalStaticVar<span class="token punctuation">;</span>  <span class="token comment">// 存储在全局数据区</span>\n\n<span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// static 修饰的局部变量</span>\n    <span class="token keyword">static</span> <span class="token keyword">int</span> localStaticVar<span class="token punctuation">;</span>  <span class="token comment">// 在程序启动时分配内存，存储在全局数据区</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// static 修饰的静态成员变量</span>\n    <span class="token keyword">static</span> <span class="token keyword">int</span> myStaticMember<span class="token punctuation">;</span>  <span class="token comment">// 存储在全局数据区</span>\n\n    <span class="token comment">// static 修饰的静态成员函数</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">myStaticFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 实现</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>#define</code> 预处理指令：</strong></p><ul><li><code>#define</code> 不是在编译时进行类型检查的修饰符，而是一个预处理指令，用于定义宏。</li><li><code>#define</code> 定义的宏在预处理阶段进行文本替换，不直接占用存储空间，因此没有在全局区、堆、栈或代码区分配内存。它仅仅是在编译前进行简单的文本替换。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SIZE</span> <span class="token expression"><span class="token number">100</span></span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><hr>',2),p=(0,a.Lk)("p",null,[(0,a.eW)("难得让我装个B!"),(0,a.Lk)("code",null,"static const"),(0,a.eW)(" 变量在内存中的存储位置通常是在全局数据区。这是因为：")],-1),r=(0,a.Fv)("<ol><li><p><strong><code>static</code>：</strong> 使用 <code>static</code> 关键字使得变量具有静态生命周期，即在程序运行期间始终存在，而不是在函数调用结束后被销毁。</p></li><li><p><strong><code>const</code>：</strong> 使用 <code>const</code> 关键字表示该变量是常量，其值不能被修改。常量通常被分配在全局数据区，以便在程序的整个生命周期内保持不变。</p></li></ol><p>因此，<code>static const</code> 变量的内存分配通常在全局数据区。这种变量在程序启动时被初始化，而且在整个程序运行期间都不会被修改，所以它的值是常量且具有静态生命周期。</p>",2),u=(0,a.Lk)("blockquote",null,[(0,a.Lk)("p",null,"摘自 C++ Primer Plus 第6版 p247 自动变量通常存储在栈中。 这意味着执行代码块时，其中的变量将依次加入到栈中，而在离开代码块时，将按相反的顺序释放这些变量，这被称为后进先出（LIFO）。 因此，在程序执行过程中，栈将不断地增大和缩小。")],-1),m={},k=(0,e(66262).A)(m,[["render",function(n,t){const e=(0,a.g2)("chatmessage"),s=(0,a.g2)("ExternalLinkIcon");return(0,a.uX)(),(0,a.CE)("div",null,[o,(0,a.bF)(e,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,a.k6)((()=>[c])),_:1}),(0,a.Lk)("figure",null,[i,(0,a.Lk)("figcaption",null,[(0,a.Lk)("a",l,[(0,a.eW)("csdn"),(0,a.bF)(s)])])]),d,(0,a.bF)(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 问题来了,static const 变量 阁下如何应对? ")])),_:1}),(0,a.bF)(e,{avatar:"../../../assets/emoji/kclr.png",avatarWidth:40},{default:(0,a.k6)((()=>[p])),_:1}),r,(0,a.bF)(e,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 这也是C++的三种存储特性：(栈存储)自动存储、(堆new|delete malloc|free)动态存储、(static)静态存储。 ")])),_:1}),u])}]]),v=JSON.parse('{"path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html","title":"c++7.const|static|#defined","lang":"zh-CN","frontmatter":{"title":"c++7.const|static|#defined","order":7,"category":["c++"],"description":"前置知识 const |static|#defined csdncsdn const 修饰符： const 用于定义常量，表示标识符的值在程序执行期间不能被修改。 const 修饰的变量在内存中的存储位置取决于它的声明位置和作用域。 如果是在全局范围声明，它将存储在全局数据区。 如果是在局部范围声明（函数内部），它通常存储在栈上。 static 修饰符...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++7.const|static|#defined"}],["meta",{"property":"og:description","content":"前置知识 const |static|#defined csdncsdn const 修饰符： const 用于定义常量，表示标识符的值在程序执行期间不能被修改。 const 修饰的变量在内存中的存储位置取决于它的声明位置和作用域。 如果是在全局范围声明，它将存储在全局数据区。 如果是在局部范围声明（函数内部），它通常存储在栈上。 static 修饰符..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://blog.csdn.net/m0_59738220/article/details/123466360?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=2"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++7.const|static|#defined\\",\\"image\\":[\\"https://blog.csdn.net/m0_59738220/article/details/123466360?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-1-123466360-blog-80678967.235%5Ev38%5Epc_relevant_anti_t3&utm_relevant_index=2\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":2,"title":"const |static|#defined","slug":"const-static-defined","link":"#const-static-defined","children":[]}],"git":{"createdTime":1703074087000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.68,"words":1103},"filePathRelative":"language/cpp/keywords[关键字]/7-Modifiers-Constants-Static.md","localizedDate":"2023年12月20日","excerpt":"<h3>前置知识</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>区域</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>代码区 (Code)</td>\\n<td>存放函数体的二进制代码，只读，由操作系统管理。</td>\\n</tr>\\n<tr>\\n<td>全局/静态存储区 (Global/Static Storage)</td>\\n<td>存放全局变量、静态变量和常量，在程序启动时分配，程序结束时释放。</td>\\n</tr>\\n<tr>\\n<td>栈区 (Stack)</td>\\n<td>存放函数的局部变量、函数参数值等，由编译器自动分配释放，与函数调用相关。</td>\\n</tr>\\n<tr>\\n<td>堆区 (Heap)</td>\\n<td>程序员可以通过 new 和 delete（或 malloc 和 free）用于动态内存管理，需要手动管理内存的生命周期。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);