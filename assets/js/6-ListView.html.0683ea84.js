"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2148],{61677:(e,t,a)=>{a.r(t),a.d(t,{comp:()=>ue,data:()=>ke});var i=a(20641);const s=a.p+"assets/img/listview.6a2a7461.svg",l=a.p+"assets/img/listview001.23a28e2f.png",n=a.p+"assets/img/listview002.b05d87cd.png",r=a.p+"assets/img/listview003.86b4e10f.png",d=a.p+"assets/img/listview006.4384da6e.png",g=a.p+"assets/img/listview014.53c03c14.jpg",o=a.p+"assets/img/listview004.69b63cc6.png",c=a.p+"assets/img/listview005.cd09a92a.png",p=a.p+"assets/img/listview007.d7a248c0.jpg",u=a.p+"assets/img/listview008.cbd79344.jpg",k=a.p+"assets/img/listview009.5287ff37.png",f=a.p+"assets/img/listview010.fe3b009b.jpg",L=a.p+"assets/img/listview011.1641c5e8.jpg",b=a.p+"assets/img/listview012.37633a4c.jpg",h=a.p+"assets/img/listview013.3b1d0e1c.jpg",m=a.p+"assets/img/listview015.d735e08a.png",v=a.p+"assets/img/listview016.353cd8dd.svg",w=a.p+"assets/img/listview017.0dcbe149.png",W=a.p+"assets/img/listview018.633e5630.png",x=a.p+"assets/img/listview019.52f977ed.png",j=a.p+"assets/img/listview020.45899d86.png",_=a.p+"assets/img/listview021.337e6038.png",y=a.p+"assets/img/listview022.6acd990f.png",U=a.p+"assets/img/listview023.91405f21.jpg",V=(0,i.Lk)("h2",{id:"导读",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#导读"},[(0,i.Lk)("span",null,"导读")])],-1),F=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:s,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),q=(0,i.Lk)("h3",{id:"listview-tileview",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#listview-tileview"},[(0,i.Lk)("span",null,"ListView & TileView")])],-1),z=(0,i.Fv)('<figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UTileView <span class="token operator">:</span> <span class="token keyword">public</span> UListView\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',2),R=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:n,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),T=(0,i.Lk)("h3",{id:"基本流程",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#基本流程"},[(0,i.Lk)("span",null,"基本流程")])],-1),I=(0,i.Lk)("ol",null,[(0,i.Lk)("li",null,"新建一个UMG，作为ListView载体")],-1),E=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),M=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),C=(0,i.Fv)('<figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th><strong>功能对比</strong></th><th><strong>ListView（TileView）</strong> 🏆</th><th><strong>ScrollBox</strong> 📜</th></tr></thead><tbody><tr><td><strong>数据管理</strong></td><td>绑定 <code>TArray&lt;UObject*&gt;</code>，<strong>自动复用 UI 项</strong></td><td>直接添加 <code>UWidget</code>，手动管理 UI</td></tr><tr><td><strong>性能优化</strong></td><td><strong>仅渲染可见项</strong>，适合大数据量，优化性能</td><td><strong>所有项一次性创建</strong>，数据多时可能卡顿</td></tr><tr><td><strong>适用数据</strong></td><td>结构化数据列表（如 <code>TArray&lt;UObject*&gt;</code>）</td><td>少量 UI 动态元素，如富文本、单项内容</td></tr><tr><td><strong>交互支持</strong></td><td>内置 <code>OnItemClicked</code>、<code>Selection</code> 等事件</td><td>需手动绑定 <code>Button</code>、<code>Scroll</code> 事件</td></tr><tr><td><strong>子项布局</strong></td><td><code>ListView</code>（纵向），<code>TileView</code>（网格）</td><td>手动布局子项（如 <code>VerticalBox</code>、<code>HorizontalBox</code>）</td></tr><tr><td><strong>刷新方式</strong></td><td><code>RequestRefresh()</code>、<code>RefreshItem()</code></td><td>直接移除/添加 <code>Widget</code></td></tr><tr><td><strong>适用场景</strong></td><td>长列表、多数据项，如角色选择、商店物品、技能列表等</td><td>小范围的动态 UI 元素，如聊天记录、日志</td></tr><tr><td><strong>UI 管理</strong></td><td>高效管理大量动态数据，自动更新和回收 UI 项</td><td>手动管理每个 <code>Widget</code>，适合静态或少量数据</td></tr><tr><td><strong>内存占用</strong></td><td>优化内存，避免重复创建项，节省资源</td><td>可能占用更多内存，所有项都要存在 UI 树中</td></tr></tbody></table>',2),A=(0,i.Lk)("ol",{start:"2"},[(0,i.Lk)("li",null,"配置子项使用的条目控件类")],-1),G=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),O=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),B=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),D=(0,i.Lk)("ol",{start:"3"},[(0,i.Lk)("li",null,"创建条目UMG")],-1),S=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),N=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),Z=(0,i.Lk)("ol",{start:"4"},[(0,i.Lk)("li",null,"创建数据类UObject")],-1),P=(0,i.Lk)("blockquote",null,[(0,i.Lk)("p",null,"方便测试里面加了名称和图标两个变量")],-1),H=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),J=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:L,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),X=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),K=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),Q=(0,i.Lk)("h3",{id:"验证只绘制可见子项",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#验证只绘制可见子项"},[(0,i.Lk)("span",null,"验证只绘制可见子项")])],-1),Y=(0,i.Lk)("h3",{id:"如何修改数据",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#如何修改数据"},[(0,i.Lk)("span",null,"如何修改数据？")])],-1),$=(0,i.Lk)("h3",{id:"时序图",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#时序图"},[(0,i.Lk)("span",null,"时序图")])],-1),ee=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:s,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),te=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),ae=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),ie=(0,i.Lk)("h3",{id:"刷新方法-regenerateallentries",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#刷新方法-regenerateallentries"},[(0,i.Lk)("span",null,"刷新方法 RegenerateAllEntries")])],-1),se=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:w,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),le=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:W,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),ne=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:x,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),re=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:j,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),de=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),ge=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),oe=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:U,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),ce=(0,i.Lk)("h3",{id:"regenerateallentries-requestrefresh-区别",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#regenerateallentries-requestrefresh-区别"},[(0,i.Lk)("span",null,"RegenerateAllEntries && RequestRefresh 区别？")])],-1),pe={},ue=(0,a(66262).A)(pe,[["render",function(e,t){const a=(0,i.g2)("chatmessage"),s=(0,i.g2)("gifwithbutton");return(0,i.uX)(),(0,i.CE)("div",null,[V,(0,i.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 少年，你是否在为显示大量数据在列表上而苦苦烦闹？知道有ListView这个东西却不知道怎么用？ ")])),_:1}),F,q,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 本质上来说TileView是ListView的一个扩展 ")])),_:1}),z,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 创建C++类的列表中也能看到 ")])),_:1}),R,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 意味着我们可以利用多态来无痛切换ListView和TileView ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 不明觉厉！ ")])),_:1}),T,I,E,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" ListView我们可以理解成一个负责展示数据的容器。 ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 额！为什么不能像滚动框一样加入内容？ ")])),_:1}),M,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 这就要说说他和滚动框的区别了 ")])),_:1}),C,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" ScrollBox这有多少数据就新建多少UI条目，而ListView存储着你的数据，但UI条目只会显示看得到的对吧？ ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 是的，ListView只会渲染可见的子项UMG ")])),_:1}),A,G,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 条目也是一个UMG，只不过里面带有一些接口。 ")])),_:1}),O,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 然后呢?我打开游戏后没有反应啊！ ")])),_:1}),B,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 那是你没有添加条目进去！ ")])),_:1}),D,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 我加了啊！我创建了对应的UMG，添加进去后没有反应啊！ ")])),_:1}),S,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" NONONO!这里需要创建UObject,而不是子项UMG ")])),_:1}),N,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 一脸懵逼 ")])),_:1}),Z,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" ListView使用了类似MVC的思想，将数据、视图、控制器分离，意味着我们需要手动创建一个数据类来作为数据载体。 ")])),_:1}),P,H,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 难不成要新建UObject 然后添加到子项中？ ")])),_:1}),J,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 是的，这样屏幕上就可以显示出对应的子项了！不过在这之前你需要在子项UMG的接口中将数据源Cast成你的数据类，以便解析数据。 ")])),_:1}),X,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 给按钮点击回调上，为了更加直观我们用了一个自增整数作为索引 ")])),_:1}),K,Q,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 如何验证他只是绘制可见项呢？ ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 很简单，给他加一个Check组件，请记住我们现在最多显示4个条目，意味着第五个要拉滚动框才能看到。 ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" ！我勾选第一个的Check,后面的也被勾选了！ ")])),_:1}),(0,i.bF)(s,{src:"../../../assets/unrealgif/hpup46.gif"}),Y,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 那岂不是这个勾选框没用了！ ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 年轻人！你似乎没有Get到这个点，为了让你更好的理解这一点，我用一个图来解释这一个过程。 ")])),_:1}),$,ee,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 我懂了！好比告诉ListView组件我要用这个UMG类的模板生成子项，生成后将对应的数据用接口传递过去！ ")])),_:1}),te,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 是的正因为这种机制，你的CheckBox其实被认定为View层面的东西，他并不涉及数据的修改，所以视觉上拉下滚动框会出现错误的勾选选项。 ")])),_:1}),ae,ie,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 所以正确的方法是存储check状态，后续生成时重新赋值checkbox，同时checkbox勾选时设置对应的变量。 ")])),_:1}),se,le,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 本质其实就是UI和我们的数据做了一次手动绑定对吧！虽然重复的问题解决了，如果我想勾选当前项其他的勾选框复位怎么做呢？ ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 从操作上来说，你应该获取当前的勾选的选项，并且将其他选项中的 勾选框复原。 ")])),_:1}),(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 意味着我们不应该在UI中修改我们的数据，并将CheckBox的命中关闭 ")])),_:1}),ne,re,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 在ListView层去监听选项变化。 ")])),_:1}),de,(0,i.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 额，这么做好像要遍历所有的数据，我觉得可以缓存一个临时变量存储上一次选中的数据和当前选项作比较。 ")])),_:1}),ge,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 其实还有一种方法，官方已经给了你接口，这种也属于纯UI表现，非常适合做UI的选定样式，但数据上没有缓存UI状态。 ")])),_:1}),oe,(0,i.bF)(s,{src:"../../../assets/unrealgif/hpup47.gif"}),ce,(0,i.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" RegenerateAllEntries顾名思义，属性当前视图显示的所有UI，而RequestRefresh则反直觉， 是刷新未显示的部分数据，不会直接刷新当前显示的数据。 ")])),_:1})])}]]),ke=JSON.parse('{"path":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_commonui_ui%E6%A1%86%E6%9E%B6_/6-ListView.html","title":"Umg6.ListView","lang":"zh-CN","frontmatter":{"title":"Umg6.ListView","order":6,"category":["unreal"],"description":"导读 ListView & TileView 基本流程 新建一个UMG，作为ListView载体 配置子项使用的条目控件类 创建条目UMG 创建数据类UObject 方便测试里面加了名称和图标两个变量 验证只绘制可见子项","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_commonui_ui%E6%A1%86%E6%9E%B6_/6-ListView.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"Umg6.ListView"}],["meta",{"property":"og:description","content":"导读 ListView & TileView 基本流程 新建一个UMG，作为ListView载体 配置子项使用的条目控件类 创建条目UMG 创建数据类UObject 方便测试里面加了名称和图标两个变量 验证只绘制可见子项"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T12:29:25.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-03-18T12:29:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Umg6.ListView\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-18T12:29:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[{"level":3,"title":"ListView & TileView","slug":"listview-tileview","link":"#listview-tileview","children":[]},{"level":3,"title":"基本流程","slug":"基本流程","link":"#基本流程","children":[]},{"level":3,"title":"验证只绘制可见子项","slug":"验证只绘制可见子项","link":"#验证只绘制可见子项","children":[]},{"level":3,"title":"如何修改数据？","slug":"如何修改数据","link":"#如何修改数据","children":[]},{"level":3,"title":"时序图","slug":"时序图","link":"#时序图","children":[]},{"level":3,"title":"刷新方法 RegenerateAllEntries","slug":"刷新方法-regenerateallentries","link":"#刷新方法-regenerateallentries","children":[]},{"level":3,"title":"RegenerateAllEntries && RequestRefresh 区别？","slug":"regenerateallentries-requestrefresh-区别","link":"#regenerateallentries-requestrefresh-区别","children":[]}]}],"git":{"createdTime":1742300965000,"updatedTime":1742300965000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":5.54,"words":1662},"filePathRelative":"unreal/ui[界面]/umg&commonui[ui框架]/6-ListView.md","localizedDate":"2025年3月18日","excerpt":"<h2>导读</h2>\\n\\n<figure><figcaption></figcaption></figure>\\n<h3>ListView &amp; TileView</h3>\\n\\n<figure><figcaption></figcaption></figure>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>UTileView <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> UListView\\n</code></pre></div>","autoDesc":true}')}}]);