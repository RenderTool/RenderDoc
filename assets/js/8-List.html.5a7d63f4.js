"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4363],{35468:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>d,data:()=>r});var t=a(20641);const e=a.p+"assets/img/List.9a7dc5ff.png",p=a.p+"assets/img/stllist.25f7bcb8.png",i=(0,t.Lk)("h3",{id:"list",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#list"},[(0,t.Lk)("span",null,"List")])],-1),c=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),o=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"std::list"),(0,t.eW)(" 是 C++ 标准模板库中的双向链表容器。它提供了一个能够高效进行插入和删除操作的数据结构，支持在序列的两端和任何位置进行快速插入和删除元素。")],-1),l=(0,t.Fv)('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义：</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> myList<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>T</code> 是列表中元素的类型。</li></ul><h3 id="主要操作" tabindex="-1"><a class="header-anchor" href="#主要操作"><span>主要操作：</span></a></h3><ol><li><p><strong>push_back()：</strong> 在列表尾部插入元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>push_front()：</strong> 在列表头部插入元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>pop_back()：</strong> 移除列表尾部的元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>pop_front()：</strong> 移除列表头部的元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>insert()：</strong> 在指定位置插入元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>iterator<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>erase()：</strong> 移除指定位置的元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>myList<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>size()：</strong> 返回列表中元素的个数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>size_t listSize <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>empty()：</strong> 检查列表是否为空。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 列表为空</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>begin() 和 end()：</strong> 返回指向列表开头和结尾的迭代器，可用于遍历列表。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> it <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> myList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 处理 *it</span>\n    <span class="token operator">++</span>it<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念：</span></a></h3><ul><li><p><strong>双向链表：</strong> <code>std::list</code> 使用双向链表来存储元素，每个元素都包含指向前一个和后一个元素的指针，这使得在任意位置进行插入和删除操作都非常高效。</p></li><li><p><strong>迭代器：</strong> <code>std::list</code> 提供了双向迭代器，支持正向和反向遍历。</p></li><li><p><strong>动态大小：</strong> <code>std::list</code> 的大小可以动态调整，可以根据需要进行插入和删除操作，而不会涉及到重新分配内存。</p></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myList<span class="token punctuation">;</span>\n\n    myList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    myList<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    myList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    myList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation">(</span>myList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在第二个元素后插入15</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> myList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="in-ue" tabindex="-1"><a class="header-anchor" href="#in-ue"><span>In UE</span></a></h2><blockquote><p>在Unreal Engine 中，本身并没有提供一个名为<code> std::list</code>的标准C++库的list容器， 但可以使用 TDoubleLinkedList 类来实现双向链表的功能。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token comment">// 使用 TDoubleLinkedList 模拟双向链表</span>\n    TDoubleLinkedList<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span> MyList<span class="token punctuation">;</span>\n\n    <span class="token comment">// 在链表尾部插入元素</span>\n    MyList<span class="token punctuation">.</span><span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    MyList<span class="token punctuation">.</span><span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 在链表头部插入元素</span>\n    MyList<span class="token punctuation">.</span><span class="token function">AddHead</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 在链表的特定位置插入元素</span>\n    TDoubleLinkedList<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>TDoubleLinkedListNode<span class="token operator">*</span> NodeToInsertAfter <span class="token operator">=</span> MyList<span class="token punctuation">.</span><span class="token function">GetHeadNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    MyList<span class="token punctuation">.</span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>NodeToInsertAfter<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 遍历链表</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> int32<span class="token operator">&amp;</span> Element <span class="token operator">:</span> MyList<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 处理 Element</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12),u={},d=(0,a(66262).A)(u,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[i,c,(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[o])),_:1}),l])}]]),r=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html","title":"c++8.List容器","lang":"zh-CN","frontmatter":{"title":"c++8.List容器","order":8,"category":["c++"],"description":"List 定义： T 是列表中元素的类型。 主要操作： push_back()： 在列表尾部插入元素。 push_front()： 在列表头部插入元素。 pop_back()： 移除列表尾部的元素。 pop_front()： 移除列表头部的元素。 insert()： 在指定位置插入元素。 erase()： 移除指定位置的元素。 size()： 返回列表...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++8.List容器"}],["meta",{"property":"og:description","content":"List 定义： T 是列表中元素的类型。 主要操作： push_back()： 在列表尾部插入元素。 push_front()： 在列表头部插入元素。 pop_back()： 移除列表尾部的元素。 pop_front()： 移除列表头部的元素。 insert()： 在指定位置插入元素。 erase()： 移除指定位置的元素。 size()： 返回列表..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++8.List容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"List","slug":"list","link":"#list","children":[]},{"level":3,"title":"定义：","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"主要操作：","slug":"主要操作","link":"#主要操作","children":[]},{"level":3,"title":"概念：","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"In UE","slug":"in-ue","link":"#in-ue","children":[]}],"git":{"createdTime":1703335047000,"updatedTime":1704233233000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":1.86,"words":558},"filePathRelative":"language/cpp/stl[标准模板]/8-List.md","localizedDate":"2023年12月23日","excerpt":"<h3>List</h3>\\n<figure><figcaption></figcaption></figure>\\n\\n<figure><figcaption></figcaption></figure>\\n<h3>定义：</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;list&gt;</span></span>\\n\\nstd<span class=\\"token double-colon punctuation\\">::</span>list<span class=\\"token operator\\">&lt;</span>T<span class=\\"token operator\\">&gt;</span> myList<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);