"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4170],{32665:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>A,data:()=>j});var t=s(20641);const e=s.p+"assets/img/datatable001.6521e52c.png",p=s.p+"assets/img/datatable002.40d6a4a7.jpg",l=s.p+"assets/img/datatable003.32ab049c.jpg",o=s.p+"assets/img/datatable004.70c6a821.jpg",c=s.p+"assets/img/datatable005.af2c7b9d.jpg",i=s.p+"assets/img/datatable006.1a8122c9.jpg",r=s.p+"assets/img/datatable007.8ca702c2.jpg",u=s.p+"assets/img/datatable008.ac1830d8.png",d=s.p+"assets/img/datatable009.a93e4bdb.jpg",k=(0,t.Lk)("h2",{id:"datatable",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#datatable"},[(0,t.Lk)("span",null,"Datatable")])],-1),b=(0,t.Fv)('<h3 id="与dataasset区别" tabindex="-1"><a class="header-anchor" href="#与dataasset区别"><span>与DataAsset区别？</span></a></h3><table><thead><tr><th>特征</th><th>DataTable</th><th>DataAsset</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>存储和管理结构化数据，如游戏配置、物品属性等</td><td>存储和管理游戏资产数据，如模型、纹理等</td></tr><tr><td><strong>主要内容</strong></td><td>表格形式数据，每行为一条记录</td><td>可以包含各种类型的资源数据，如静态资产或动态资产</td></tr><tr><td><strong>文件类型</strong></td><td><code>.csv</code>、<code>.xlsx</code> 等表格文件</td><td><code>.uasset</code> 文件格式</td></tr></tbody></table><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><hr><h2 id="_1-创建数据结构" tabindex="-1"><a class="header-anchor" href="#_1-创建数据结构"><span><strong>1. 创建数据结构</strong></span></a></h2>',5),v=(0,t.Lk)("p",null,[(0,t.eW)("在 "),(0,t.Lk)("code",null,"DataTable"),(0,t.eW)(" 中，每一行数据对应一个结构体，使用 "),(0,t.Lk)("code",null,"FStruct"),(0,t.eW)(" 来定义数据格式。")],-1),m=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/** 道具基础信息 */</span>\n<span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">struct</span> <span class="token class-name">FInventoryBase</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FTableRowBase</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tFGameplayTag EquipmentTag<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 库存项名称</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tFText ItemName<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 库存项描述</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tFText Description<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 物品类型（武器、消耗品、装备等）</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tEItemType ItemType<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 库存项图标</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tTSoftObjectPtr<span class="token operator">&lt;</span>UTexture2D<span class="token operator">&gt;</span> Icon<span class="token punctuation">;</span>\n\n\t<span class="token comment">// 库存项缩略图</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;BaseInfo&quot;</span><span class="token punctuation">)</span>\n\tTSoftObjectPtr<span class="token operator">&lt;</span>UTexture2D<span class="token operator">&gt;</span> Thumbnail<span class="token punctuation">;</span>\n\n\t<span class="token function">FInventoryBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t  <span class="token operator">:</span> <span class="token function">EquipmentTag</span><span class="token punctuation">(</span><span class="token function">FGameplayTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t  <span class="token punctuation">,</span> <span class="token function">ItemName</span><span class="token punctuation">(</span><span class="token function">FText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t  <span class="token punctuation">,</span> <span class="token function">Description</span><span class="token punctuation">(</span><span class="token function">FText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t  <span class="token punctuation">,</span> <span class="token function">ItemType</span><span class="token punctuation">(</span>EItemType<span class="token double-colon punctuation">::</span>Weapon<span class="token punctuation">)</span>\n\t\t  <span class="token punctuation">,</span> <span class="token function">Icon</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>\n\t\t  <span class="token punctuation">,</span> <span class="token function">Thumbnail</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-创建-datatable-资产" tabindex="-1"><a class="header-anchor" href="#_2-创建-datatable-资产"><span><strong>2. 创建 DataTable 资产</strong></span></a></h2><ol><li><p>在 UE5 编辑器中，打开 <strong>内容浏览器</strong>。</p></li><li><p>右键 → <code>Miscellaneous（杂项）</code> → <code>DataTable</code>。</p><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p>在弹出的 <code>结构体选择</code> 窗口中，选择 <strong>刚刚创建的 FInventoryBase</strong> 结构体。</p></li></ol><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_3-编辑-datatable-数据" tabindex="-1"><a class="header-anchor" href="#_3-编辑-datatable-数据"><span><strong>3. 编辑 DataTable 数据</strong></span></a></h2><ol><li>双击打开 <code>DataTable</code> 资源。</li><li>点击 <code>+ 添加</code> 按钮，添加新的数据行。</li></ol><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><h2 id="_4-运行时读取-datatable" tabindex="-1"><a class="header-anchor" href="#_4-运行时读取-datatable"><span><strong>4. 运行时读取 DataTable</strong></span></a></h2><h3 id="blueprint-读取" tabindex="-1"><a class="header-anchor" href="#blueprint-读取"><span><strong>Blueprint 读取</strong></span></a></h3><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',14),g=(0,t.Fv)('<figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="c-读取" tabindex="-1"><a class="header-anchor" href="#c-读取"><span><strong>C++ 读取</strong></span></a></h3><h3 id="获取行结构体" tabindex="-1"><a class="header-anchor" href="#获取行结构体"><span>获取行结构体</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">const</span> T<span class="token operator">*</span> RowData <span class="token operator">=</span> DataTable<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">FindRow</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>RowName<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;GetRows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">//例如我们刚刚的结构体</span>\n    FInventoryBase<span class="token operator">*</span> ItemRow <span class="token operator">=</span> ItemDataTable<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">FindRow</span><span class="token generic class-name"><span class="token operator">&lt;</span>FInventoryBase<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">FName</span><span class="token punctuation">(</span><span class="token string">&quot;行名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> “标识字符串”<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-动态修改-datatable-运行时-数据" tabindex="-1"><a class="header-anchor" href="#_5-动态修改-datatable-运行时-数据"><span><strong>5. 动态修改 DataTable（运行时）数据</strong></span></a></h2><p>虽然 <code>DataTable</code> 主要用于存储静态数据，但在运行时也可以修改：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>ItemRow<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    ItemRow<span class="token operator">-&gt;</span>ItemValue <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 修改数值</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),h=(0,t.Lk)("p",null,[(0,t.eW)("⚠️ 注意："),(0,t.Lk)("strong",null,[(0,t.eW)("DataTable 并不会自动保存修改，运行时修改的数据不会持久化到 "),(0,t.Lk)("code",null,".uasset"),(0,t.eW)(" 文件中")]),(0,t.eW)("。")],-1),f=(0,t.Lk)("hr",null,null,-1),T=(0,t.Lk)("p",null,[(0,t.eW)("编辑器模式下是可以修改的，例如在"),(0,t.Lk)("code",null,"UEditorUtilityWidget"),(0,t.eW)("中使用")],-1),y=(0,t.Fv)('<figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="表格蓝图函数库" tabindex="-1"><a class="header-anchor" href="#表格蓝图函数库"><span>表格蓝图函数库</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>   Source<span class="token operator">/</span>Runtime<span class="token operator">/</span>Engine<span class="token operator">/</span>Classes<span class="token operator">/</span>Kismet<span class="token operator">/</span>DataTableFunctionLibrary<span class="token punctuation">.</span>h\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取多行" tabindex="-1"><a class="header-anchor" href="#获取多行"><span>获取多行</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\n        TArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> <span class="token function">EditorGetDatatableRowNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n    \n    <span class="token comment">/** 存储 DataTable 的引用 */</span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;DataTable&quot;</span><span class="token punctuation">)</span>\n    TObjectPtr<span class="token operator">&lt;</span><span class="token keyword">const</span> UDataTable<span class="token operator">&gt;</span> DataTable<span class="token punctuation">;</span>\n\n    \n    <span class="token comment">/** 存储多个 RowNames */</span>\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;DataTable&quot;</span><span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>GetOptions <span class="token operator">=</span> <span class="token string">&quot;EditorGetDatatableRowNames&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    TSet<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> RowNames<span class="token punctuation">;</span>\n    \n    <span class="token comment">/** 通过 RowNames 批量获取表格行数据 */</span>\n    <span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n    TArray<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">GetRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n    <span class="token punctuation">{</span>\n        TArray<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> Result<span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>DataTable<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;DataTableMultiRowHandle: DataTable is not set!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> Result<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">// 遍历所有 RowName，查找对应的行</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FName<span class="token operator">&amp;</span> RowName <span class="token operator">:</span> RowNames<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">const</span> T<span class="token operator">*</span> RowData <span class="token operator">=</span> DataTable<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">FindRow</span><span class="token generic class-name"><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>RowName<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;GetRows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>RowData<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                Result<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">*</span>RowData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">else</span>\n            <span class="token punctuation">{</span>\n                <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;DataTableMultiRowHandle: Row %s not found in DataTable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>RowName<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> Result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶"><span>进阶</span></a></h2><h3 id="uscriptstruct" tabindex="-1"><a class="header-anchor" href="#uscriptstruct"><span><code>UScriptStruct</code></span></a></h3>',7),D=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"UScriptStruct"),(0,t.eW)(" 是啥啊？U开头不上结构体吧！")],-1),R=(0,t.Lk)("p",null,[(0,t.eW)("少年，你是不是非常困惑？结构体一般是F开头，现在又冒充来一个U开头的"),(0,t.Lk)("code",null,"UScriptStruct")],-1),w=(0,t.Lk)("h3",{id:"uscriptstruct-和-ftablerowbase-的关系",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#uscriptstruct-和-ftablerowbase-的关系"},[(0,t.Lk)("span",null,[(0,t.Lk)("code",null,"UScriptStruct"),(0,t.eW)(" 和 "),(0,t.Lk)("code",null,"FTableRowBase"),(0,t.eW)(" 的关系")])])],-1),L=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"UScriptStruct 是 Unreal Engine 5（UE5） 用于 反射和序列化 C++ 结构体（struct） 的核心系统。它使得 struct 具备 蓝图可用性、网络复制、GC（垃圾回收）支持 等功能。 在 UE5 中，普通的 struct 是 标准 C++ 结构体，但如果需要让引擎识别它（如在蓝图或 DataTable 中使用），就必须使用 USTRUCT(BlueprintType) 进行标记，而 USTRUCT 背后的实现正是 UScriptStruct。")],-1),x=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),W=(0,t.Lk)("h3",{id:"源码解析",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#源码解析"},[(0,t.Lk)("span",null,"源码解析")])],-1),F=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),_=(0,t.Lk)("p",null,[(0,t.eW)("FindRow的本质是"),(0,t.Lk)("code",null,"return reinterpret_cast<T*>(RowData);"),(0,t.eW)(" （安全性解析关键字）即返回Datatable中维护的"),(0,t.Lk)("code",null,"TMap<FName, uint8*> RowMap;"),(0,t.eW)("对应的Value")],-1),E=(0,t.Lk)("h3",{id:"uint8",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#uint8"},[(0,t.Lk)("span",null,"uint8*")])],-1),q=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"uint8*"),(0,t.eW)(" 是一个指向无符号 8 位整数（即字节）的指针，本质是 原始内存块的起始地址。")],-1),U=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"UDataTable 的 RowMap 存储行数据时，以 uint8* 表示每行数据的起始地址。 这是因为它需要以与类型无关的原始内存形式 存储结构体数据，便于动态管理不同结构体类型的行数据。")],-1),B=(0,t.Lk)("h3",{id:"为什么能用-reinterpret-cast-t-转换",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#为什么能用-reinterpret-cast-t-转换"},[(0,t.Lk)("span",null,"为什么能用 reinterpret_cast<T*> 转换？")])],-1),S=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"Unreal 的 USTRUCT 结构体默认是 Plain Old Data (POD) 类型，没有虚函数表（vtable）或复杂继承关系。 其内存布局是连续的，字段顺序和偏移量在编译时确定。")],-1),I={},A=(0,s(66262).A)(I,[["render",function(a,n){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[k,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" Datatable是什么? ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" DataTable和DataAsset是两种用于管理和存储数据的重要资源 ")])),_:1}),b,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[v])),_:1}),m,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 除了行，还可以工具列名做一些类似筛选的操作 ")])),_:1}),g,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[h])),_:1}),f,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[T])),_:1}),y,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[D])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[R])),_:1}),w,L,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" ！卧槽 ")])),_:1}),x,W,F,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[_])),_:1}),E,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 可是为啥uint8* 可以转成结构体啊！ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[q])),_:1}),U,B,S])}]]),j=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/12-DataTable.html","title":"c12.数据表格|Datatable","lang":"zh-CN","frontmatter":{"title":"c12.数据表格|Datatable","order":1200,"category":["u++"],"description":"Datatable 与DataAsset区别？ 基本使用 1. 创建数据结构 2. 创建 DataTable 资产 在 UE5 编辑器中，打开 内容浏览器。 右键 → Miscellaneous（杂项） → DataTable。 在弹出的 结构体选择 窗口中，选择 刚刚创建的 FInventoryBase 结构体。 3. 编辑 DataTable 数据...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/12-DataTable.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c12.数据表格|Datatable"}],["meta",{"property":"og:description","content":"Datatable 与DataAsset区别？ 基本使用 1. 创建数据结构 2. 创建 DataTable 资产 在 UE5 编辑器中，打开 内容浏览器。 右键 → Miscellaneous（杂项） → DataTable。 在弹出的 结构体选择 窗口中，选择 刚刚创建的 FInventoryBase 结构体。 3. 编辑 DataTable 数据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-31T23:29:10.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-03-31T23:29:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c12.数据表格|Datatable\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-31T23:29:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"Datatable","slug":"datatable","link":"#datatable","children":[{"level":3,"title":"与DataAsset区别？","slug":"与dataasset区别","link":"#与dataasset区别","children":[]}]},{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"1. 创建数据结构","slug":"_1-创建数据结构","link":"#_1-创建数据结构","children":[]},{"level":2,"title":"2. 创建 DataTable 资产","slug":"_2-创建-datatable-资产","link":"#_2-创建-datatable-资产","children":[]},{"level":2,"title":"3. 编辑 DataTable 数据","slug":"_3-编辑-datatable-数据","link":"#_3-编辑-datatable-数据","children":[]},{"level":2,"title":"4. 运行时读取 DataTable","slug":"_4-运行时读取-datatable","link":"#_4-运行时读取-datatable","children":[{"level":3,"title":"Blueprint 读取","slug":"blueprint-读取","link":"#blueprint-读取","children":[]},{"level":3,"title":"C++ 读取","slug":"c-读取","link":"#c-读取","children":[]},{"level":3,"title":"获取行结构体","slug":"获取行结构体","link":"#获取行结构体","children":[]}]},{"level":2,"title":"5. 动态修改 DataTable（运行时）数据","slug":"_5-动态修改-datatable-运行时-数据","link":"#_5-动态修改-datatable-运行时-数据","children":[{"level":3,"title":"表格蓝图函数库","slug":"表格蓝图函数库","link":"#表格蓝图函数库","children":[]},{"level":3,"title":"获取多行","slug":"获取多行","link":"#获取多行","children":[]}]},{"level":2,"title":"进阶","slug":"进阶","link":"#进阶","children":[{"level":3,"title":"UScriptStruct","slug":"uscriptstruct","link":"#uscriptstruct","children":[]},{"level":3,"title":"UScriptStruct 和 FTableRowBase 的关系","slug":"uscriptstruct-和-ftablerowbase-的关系","link":"#uscriptstruct-和-ftablerowbase-的关系","children":[]},{"level":3,"title":"源码解析","slug":"源码解析","link":"#源码解析","children":[]},{"level":3,"title":"uint8*","slug":"uint8","link":"#uint8","children":[]},{"level":3,"title":"为什么能用 reinterpret_cast<T*> 转换？","slug":"为什么能用-reinterpret-cast-t-转换","link":"#为什么能用-reinterpret-cast-t-转换","children":[]}]}],"git":{"createdTime":1743358376000,"updatedTime":1743463750000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":4}]},"readingTime":{"minutes":3.87,"words":1161},"filePathRelative":"unreal/core[核心]/12-DataTable.md","localizedDate":"2025年3月30日","excerpt":"<h2>Datatable</h2>\\n\\n\\n<h3>与DataAsset区别？</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>特征</th>\\n<th>DataTable</th>\\n<th>DataAsset</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>用途</strong></td>\\n<td>存储和管理结构化数据，如游戏配置、物品属性等</td>\\n<td>存储和管理游戏资产数据，如模型、纹理等</td>\\n</tr>\\n<tr>\\n<td><strong>主要内容</strong></td>\\n<td>表格形式数据，每行为一条记录</td>\\n<td>可以包含各种类型的资源数据，如静态资产或动态资产</td>\\n</tr>\\n<tr>\\n<td><strong>文件类型</strong></td>\\n<td><code>.csv</code>、<code>.xlsx</code> 等表格文件</td>\\n<td><code>.uasset</code> 文件格式</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);