"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3750],{40476:(a,n,s)=>{a.exports=s.p+"assets/img/jtzyhttprequest.2befd0dc.jpg"},85914:(a,n,s)=>{a.exports=s.p+"assets/img/onlinemode.abe65ad4.png"},85511:(a,n,s)=>{s.r(n),s.d(n,{comp:()=>H,data:()=>Y});var t=s(20641);const e=s.p+"assets/img/GASuse003.ae1685f2.png",p=s.p+"assets/img/GASuse004.19c21b46.png",o=s.p+"assets/img/GASuse005.2010b915.png",l=s.p+"assets/img/zbxt1.6f74bce6.svg",i=s.p+"assets/img/network012.4f7b1825.png",c=s.p+"assets/img/replicate027.b2ea9338.jpg",u=s.p+"assets/img/replicate028.7429a3ca.jpg";var r=s(40476),d=s(85914);const k=s.p+"assets/img/replicate029.12b9961c.jpg",b=(0,t.Lk)("h3",{id:"数据结构-结构体",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据结构-结构体"},[(0,t.Lk)("span",null,"数据结构|结构体")])],-1),v=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),g=(0,t.Fv)('<h3 id="数据结构-datatable-表格" tabindex="-1"><a class="header-anchor" href="#数据结构-datatable-表格"><span>数据结构|Datatable|表格</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">struct</span>  <span class="token class-name">FCharacterStruct</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FTableRowBase</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;Name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tFString Name<span class="token punctuation">;</span>\n\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;Icon&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>UTexture2D<span class="token operator">&gt;</span> Icon<span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalMesh&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>USkeletalMesh<span class="token operator">&gt;</span> SkeletalMesh<span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalAnim&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;None&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>UAnimSequence<span class="token operator">&gt;</span> SkeletalAnim<span class="token punctuation">;</span>\n\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;SkeletalAnimSpeed&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;1.000000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">float</span> SkeletalAnimSpeed <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tint32 id  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),m=(0,t.Lk)("h3",{id:"数据结构-json-api",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据结构-json-api"},[(0,t.Lk)("span",null,"数据结构|Json-API")])],-1),h=(0,t.Lk)("div",{class:"hint-container note"},[(0,t.Lk)("p",{class:"hint-container-title"},"注"),(0,t.Lk)("p",null,"API（Application Programming Interface）是一组定义软件组件之间交互的规范。简而言之，API定义了不同软件之间如何通信、相互调用功能的方式。")],-1),f=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),y=(0,t.Lk)("h3",{id:"数据结构-json",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据结构-json"},[(0,t.Lk)("span",null,"数据结构|Json")])],-1),T=(0,t.Fv)('<div class="hint-container note"><p class="hint-container-title">注</p><p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，它以易于阅读和编写的文本形式表示数据。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;key1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;key2&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;key3&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;key4&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;item1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;item2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;key5&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;nestedKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;nestedValue&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;key6&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="数据结构-数据库" tabindex="-1"><a class="header-anchor" href="#数据结构-数据库"><span>数据结构|数据库</span></a></h3>',2),W=(0,t.Lk)("h3",{id:"数据结构-数据资产",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据结构-数据资产"},[(0,t.Lk)("span",null,"数据结构|数据资产")])],-1),S=(0,t.Fv)('<h2 id="抛砖引玉" tabindex="-1"><a class="header-anchor" href="#抛砖引玉"><span>抛砖引玉</span></a></h2><blockquote><p>Table+子系统+资产实现配表驱动</p></blockquote><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>使用子系统UInventorySubsystem</strong></p><ul><li>引入专门的物品子系统，例如 <code>UInventorySubsystem</code>，用于处理物品的管理和交互。</li></ul></li><li><p><strong>暴露切换网络接口 (ENUM)</strong></p><ul><li>使用枚举类型（ENUM）定义网络切换的接口，确保系统在本地测试和网络测试时有不同的行为。</li><li>示例：<code>InventorySubsystem-&gt;SetNetworkMode(NetworkMode);</code></li></ul></li><li><p><strong>本地部分使用流程</strong></p><ul><li>在适当时机注册 <code>InventoryHUDLayout</code>，可参考Lyra的UIExtension。</li><li>示例：<code>InventorySubsystem-&gt;RegisteInventoryHUDLayout(InventoryHUDLayout);</code></li></ul></li><li><p><strong>在适当的位置注册总物品表 TotalItemTable 到物品子系统</strong></p><ul><li>示例：<code>InventorySubsystem-&gt;RegisterTotalTable(TotalItemTable);</code></li><li>例如： <ul><li>行名1（武器.近身.匕首）, UDataTable* SubTable</li><li>行名2（武器.近身.长剑）, UDataTable* SubTable</li><li>行名3（道具.血包）, UDataTable* SubTable</li></ul></li></ul></li><li><p><strong>准备Spawn的物体Actor中配置GameTag和Index</strong></p><ul><li>示例：<code>ItemActor-&gt;ConfigureItem(GameTag, Index);</code></li></ul></li><li><p><strong>Actor中Over事件调用子系统查表</strong></p><ul><li>获取子表格的引用，例如：<code>UDataTable* SubTable = InventorySubsystem-&gt;GetSubTableFromTotalTable(GameTag);</code></li><li>通过GameTag直接定位到总表格的对应行，获取子表格的引用。</li></ul></li><li><p><strong>子系统根据Fragments实例化内容</strong></p><ul><li>根据Fragments数组中的 <code>UInventoryItemFragment</code> 子类实例，配置对应的内容。</li><li>例如：基础 <code>TextureFrag</code>（Icon）、<code>AS</code>（属性）、<code>MeshComponent</code>（网格体）、<code>AddWidget</code>（比如根据 <code>HUD.Slot</code>、<code>UIClass</code> 配置要显示的 UI）等</li></ul></li><li><p><strong>子系统暴露交互键注册函数</strong></p><ul><li>子系统应当暴露接口，用于注册交互键，可能涉及 UI 的绑定以及信息更新。</li><li>示例：子系统接口<code>RegisterInteractionKey</code>。</li></ul></li></ol><h3 id="职责思考" tabindex="-1"><a class="header-anchor" href="#职责思考"><span>职责思考</span></a></h3>',5),D=(0,t.Lk)("p",null,[(0,t.eW)("既然是图书馆管理员，那么他的职责不应该只限管理"),(0,t.Lk)("code",null,"儿童读物"),(0,t.eW)(",其他用户数据也可以归他管理。")],-1),L=(0,t.Lk)("h2",{id:"注册",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#注册"},[(0,t.Lk)("span",null,"注册")])],-1),q=(0,t.Lk)("h3",{id:"注册-注册时机",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#注册-注册时机"},[(0,t.Lk)("span",null,"注册|注册时机")])],-1),F=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**注册装备数据表。**/</span>\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;PlayerDataSubsystem|InventoryData&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">RegisterInventoryTable</span><span class="token punctuation">(</span>UDataTable<span class="token operator">*</span> Table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**获取装备表格。**/</span>\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintPure<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;PlayerDataSubsystem|InventoryData&quot;</span><span class="token punctuation">)</span>\nUDataTable<span class="token operator">*</span> <span class="token function">GetInventoryTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n<span class="token comment">//装备表格</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>AllowPrivateAccess<span class="token punctuation">)</span><span class="token punctuation">)</span>\nUDataTable<span class="token operator">*</span> InventoryTable<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),j=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),P=(0,t.Lk)("p",null,[(0,t.eW)("这点咱也考虑到了，所以我们所有的UI和数据都是用委托绑定的，一旦数据更新或者"),(0,t.Lk)("code",null,"真正加载"),(0,t.eW)("完成也能执行刷新任务。")],-1),I=(0,t.Lk)("h3",{id:"注册-动态更新",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#注册-动态更新"},[(0,t.Lk)("span",null,"注册|动态更新")])],-1),U=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE</span><span class="token punctuation">(</span>FDataUpDateDelegate<span class="token punctuation">)</span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintAssignable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;DataSubsystem&quot;</span><span class="token punctuation">)</span>\nFDataUpDateDelegate DataInitDelegate<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),R=(0,t.Lk)("h3",{id:"注册-标签关联",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#注册-标签关联"},[(0,t.Lk)("span",null,"注册|标签关联")])],-1),x=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"进一步思考")],-1),A=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">RegisterInventoryTable</span><span class="token punctuation">(</span>UDataTable<span class="token operator">*</span> Table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">RegisterPlayerDataTable</span><span class="token punctuation">(</span>UDataTable<span class="token operator">*</span> Table<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),N=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token comment">//增加表格</span>\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;DataSubsystem&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">void</span> <span class="token function">InsertDataTableByTag</span><span class="token punctuation">(</span>UDataTable<span class="token operator">*</span> Table<span class="token punctuation">,</span>FGameplayTag Tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token comment">//删除表格</span>\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;DataSubsystem&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">void</span> <span class="token function">DeleteDataTableByTag</span><span class="token punctuation">(</span>FGameplayTag Tag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//查找数据</span>\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;DataSubsystem&quot;</span><span class="token punctuation">)</span>\n\tUDataTable<span class="token operator">*</span> <span class="token function">SelectDataTableByTag</span><span class="token punctuation">(</span>FGameplayTag Tag<span class="token punctuation">,</span><span class="token keyword">bool</span> <span class="token operator">&amp;</span> IsFind <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n    TMap<span class="token operator">&lt;</span>FGameplayTag<span class="token punctuation">,</span> UDataTable<span class="token operator">*</span><span class="token operator">&gt;</span> DataTableMap<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),_=(0,t.Fv)('<blockquote><p>注意现在的所有讨论都是一种思维演变的讨论，不应该作为最终版本的参考。</p></blockquote><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="转换" tabindex="-1"><a class="header-anchor" href="#转换"><span>转换</span></a></h2><h3 id="数据转换-数据源" tabindex="-1"><a class="header-anchor" href="#数据转换-数据源"><span>数据转换|数据源</span></a></h3>',4),E=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),w=(0,t.Lk)("h3",{id:"数据转换-http请求",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据转换-http请求"},[(0,t.Lk)("span",null,"数据转换|HTTP请求")])],-1),C=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),O=(0,t.Lk)("h3",{id:"数据转换-格式转换",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#数据转换-格式转换"},[(0,t.Lk)("span",null,"数据转换|格式转换")])],-1),B=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//jsontostring</span>\n<span class="token keyword">bool</span> <span class="token class-name">FJsonObjectWrapper</span><span class="token double-colon punctuation">::</span><span class="token function">JsonObjectToString</span><span class="token punctuation">(</span>FString<span class="token operator">&amp;</span> Str<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    TSharedRef<span class="token operator">&lt;</span>TJsonWriter<span class="token operator">&lt;</span>TCHAR<span class="token punctuation">,</span> TCondensedJsonPrintPolicy<span class="token operator">&lt;</span>TCHAR<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> JsonWriter <span class="token operator">=</span> <span class="token class-name">TJsonWriterFactory</span><span class="token operator">&lt;</span>TCHAR<span class="token punctuation">,</span> TCondensedJsonPrintPolicy<span class="token operator">&lt;</span>TCHAR<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">FJsonSerializer</span><span class="token double-colon punctuation">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>JsonObject<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsonWriter<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//jsonfromstring</span>\n<span class="token keyword">bool</span> <span class="token class-name">FJsonObjectWrapper</span><span class="token double-colon punctuation">::</span><span class="token function">JsonObjectFromString</span><span class="token punctuation">(</span><span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Str<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    TSharedRef<span class="token operator">&lt;</span>TJsonReader<span class="token operator">&lt;</span><span class="token operator">&gt;&gt;</span> JsonReader <span class="token operator">=</span> <span class="token class-name">TJsonReaderFactory</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">FJsonSerializer</span><span class="token double-colon punctuation">::</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>JsonReader<span class="token punctuation">,</span> JsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据转换-runtimedatatable" tabindex="-1"><a class="header-anchor" href="#数据转换-runtimedatatable"><span>数据转换|RuntimeDataTable</span></a></h3>',2),J=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UPlayerDataSubsystem</span><span class="token double-colon punctuation">::</span><span class="token function">SetHeroesSkinIDMap</span><span class="token punctuation">(</span>TMap<span class="token operator">&lt;</span>FName<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span><span class="token operator">&amp;</span> InPlayerSelectedHero<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\tUExorcistSettingsLocal<span class="token operator">*</span> Settings <span class="token operator">=</span> <span class="token class-name">UExorcistSettingsLocal</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tSettings<span class="token operator">-&gt;</span><span class="token function">SetHeroesSkinIDMap</span><span class="token punctuation">(</span>InPlayerSelectedHero<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tSettings<span class="token operator">-&gt;</span><span class="token function">SaveSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="权限" tabindex="-1"><a class="header-anchor" href="#权限"><span>权限</span></a></h2><h3 id="修改权限" tabindex="-1"><a class="header-anchor" href="#修改权限"><span>修改权限</span></a></h3>',3),M=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),G=(0,t.Fv)('<table><thead><tr><th>权限级别</th><th>可修改数据</th><th>可修改贴图</th><th>可修改皮肤ID</th><th>修改方式</th></tr></thead><tbody><tr><td>0</td><td>是</td><td>是</td><td>是</td><td>直接</td></tr><tr><td>1</td><td>是</td><td>否</td><td>是</td><td>直接</td></tr><tr><td>2</td><td>否</td><td>否</td><td>否</td><td>请求</td></tr></tbody></table><h4 id="独立模式" tabindex="-1"><a class="header-anchor" href="#独立模式"><span>独立模式</span></a></h4><ul><li>用户拥有权限级别 0 - 2，因为客户端和服务器都由用户自己控制。权限 0 更像是开发者模式，开启状态。</li></ul><h4 id="监听服务器模式" tabindex="-1"><a class="header-anchor" href="#监听服务器模式"><span>监听服务器模式</span></a></h4><ul><li>服务器端拥有权限级别 0 和 1，因为对于其他客户端来说，服务器是权威版本。其他客户端只有权限级别 2。</li></ul><h4 id="专用服务器模式" tabindex="-1"><a class="header-anchor" href="#专用服务器模式"><span>专用服务器模式</span></a></h4><ul><li>所有客户端都只有权限级别 2，因为服务器是专用服务器，不允许其他客户端修改数据。</li></ul><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',8),z={},H=(0,s(66262).A)(z,[["render",function(a,n){const s=(0,t.g2)("chatmessage"),e=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[b,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 一般哪些数据结构可以承载数据？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 结构体数组够简单也够暴力！配合Json转结构体插件还能网络数据同步。 ")])),_:1}),v,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 也可以用DataTable ")])),_:1}),g,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 蓝图中不支持游戏运行时读写表格，C++可以。实际开发中会配合调用现成的API来获取对应数据。 ")])),_:1}),m,h,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 一般公司里会有前后端大佬负责编写服务端逻辑，同时会暴露一些地址给你，你通过HTTP请求可以获取到对应的数据。例如这样的： ")])),_:1}),f,y,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 获取到数据一般是Json格式加密数据，我们需要通过特定手段解析成我们的游戏数据。这些数据有可能是临时的、也可能是持久的！ ")])),_:1}),T,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 然而这些数据并非空穴来风，需要一个远程物理机器保存，比如百度网盘能够保存你的文件数据，这里我们有专门的数据库和存储空间保存用户的个人信息。 ")])),_:1}),W,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 后续会有详细介绍 ")])),_:1}),S,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 虽然看上去很详尽，停下脚步来思考。这个InventorySubsystem到底充当一个什么角色？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 更像一个数据管理者，同时能够转发一些数据变化。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没错，他就是一个图书馆管理员。负责定位书籍、同时广播一些信息。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[D])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 这么看来，改名成PlayerDataSubsystem更加合适。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 不急于下定论，先来讨论几个问题。 ")])),_:1}),L,q,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 注册加载时机？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" UGameInstanceSubsystem，我觉得在GameInstance启动阶段注册数据最佳。 ")])),_:1}),F,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" GameInstance拥有仅次于Engine的超长生命周期，目前来说，这个阶段启动阶段注册表格比较合理。 ")])),_:1}),j,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 需要稍微加点延迟，因为GameInstanceSubsystem比宿主GameInstance会稍微晚一点。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 也就是可能出现没有加载数据，UI不刷新的情况？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[P])),_:1}),I,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 一种简单的思路就是绑定一个委托。 ")])),_:1}),U,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 为什么没有参数？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 当数据获取渠道是固定时，往往只需要一个无参委托就能通知绑定的UI进行自我刷新，始终牢记他和我们UI管理系统的区别。 ")])),_:1}),R,x,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 假设我们现在有更多的表格数据要处理，每次都要写一个注册函数？ ")])),_:1}),A,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 虽然这种数据表格可能不会太多，但总觉得这种链表式的注册不太友好。也许可以改成通用点的标签关联表格？然后借用Tag来获取对应的表格数据。 ")])),_:1}),N,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 本质上更像一个数据库，负责增删改查，但那些更具体的数据呢？比如某个血条？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没错，说到关键上了，Data作为更加抽象的系统，有绝对统治权、一票否决权， 而前文的UI子系统，更加贴近UI，同时和我们的UI业务逻辑也更加耦合。可以简单画个图： ")])),_:1}),_,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 等会等会，数据源呢？光顾着讨论建表了。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 其实这个问题也有迹可循，就像Mysql这种数据库作为一个系统，虽然不直接提供 HTTP 请求 API，通过 MySQL 协议（通常是基于 TCP/IP 的）与客户端进行数据交互。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 早在最开始的HTTP篇我们就讨论过了这一步主要是将一些业务逻辑封装成一个一个请求链接通过POST、GET等方法获取数据。 ")])),_:1}),E,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 那么这个过程的本质是什么？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" HTTP 的本质是传递字符串，但它可以通过规范的格式和约定来传输各种类型的数据。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" SO问题也就变成了怎么解析这些字符串。 ")])),_:1}),w,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 这个部分可以用官方插件来做，咱先不讨论实现细节 ")])),_:1}),C,O,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 那么后面的Json到DataTable呢？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 虽然C++中没有Json这样的数据结构，UE官方给我们提供了一些转换函数。 ")])),_:1}),B,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" OK,这也是本文的重点，UE默认都是编辑器上编辑DataTable的，官方认为这是开发者维护的只读权威表格。 他推荐我们使用数据资产/Datetable/SaveObject/Config来完成数据序列化。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 这也太麻烦了，牵连的东西多了维护起来就麻烦,我已经可以预见这个系统的复杂度了，改个东西还要调用设置类啥的真的麻烦。 ")])),_:1}),J,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 这个DataTable并不是不能修改。只是怎么修改、能修改哪些——本质是一个修改权限问题。 "),(0,t.Lk)("p",null,[(0,t.eW)("建议咱们回顾一下 "),(0,t.bF)(e,{to:"/unreal/network%5B%E7%BD%91%E7%BB%9C%5D/2.1.-GamePlayNetWork.html"},{default:(0,t.k6)((()=>[(0,t.eW)("NT-2.网络同步-01|Actor复制")])),_:1}),(0,t.eW)(" 对网络模型的介绍部分")])])),_:1}),M,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 咱们可以按照约定，指定一些权限规则。 ")])),_:1}),G,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 注意：这样无法避免替换本地同名的情况。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 让我想起当年CFTP扫盘时代了，替换了喷漆皮肤，虽然只能本地看也很爽。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 这里的DataTable在不同阶段用途也不同。 ")])),_:1})])}]]),Y=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html","title":"NT-2.3|数据结构","lang":"zh-CN","frontmatter":{"title":"NT-2.3|数据结构","order":24,"category":["unreal"],"description":"数据结构|结构体 数据结构|Datatable|表格 数据结构|Json-API 注 API（Application Programming Interface）是一组定义软件组件之间交互的规范。简而言之，API定义了不同软件之间如何通信、相互调用功能的方式。 数据结构|Json 注 JSON（JavaScript Object Notation）是一...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.3|数据结构"}],["meta",{"property":"og:description","content":"数据结构|结构体 数据结构|Datatable|表格 数据结构|Json-API 注 API（Application Programming Interface）是一组定义软件组件之间交互的规范。简而言之，API定义了不同软件之间如何通信、相互调用功能的方式。 数据结构|Json 注 JSON（JavaScript Object Notation）是一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T23:34:33.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-10-25T23:34:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.3|数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-25T23:34:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"数据结构|结构体","slug":"数据结构-结构体","link":"#数据结构-结构体","children":[]},{"level":3,"title":"数据结构|Datatable|表格","slug":"数据结构-datatable-表格","link":"#数据结构-datatable-表格","children":[]},{"level":3,"title":"数据结构|Json-API","slug":"数据结构-json-api","link":"#数据结构-json-api","children":[]},{"level":3,"title":"数据结构|Json","slug":"数据结构-json","link":"#数据结构-json","children":[]},{"level":3,"title":"数据结构|数据库","slug":"数据结构-数据库","link":"#数据结构-数据库","children":[]},{"level":3,"title":"数据结构|数据资产","slug":"数据结构-数据资产","link":"#数据结构-数据资产","children":[]},{"level":2,"title":"抛砖引玉","slug":"抛砖引玉","link":"#抛砖引玉","children":[{"level":3,"title":"职责思考","slug":"职责思考","link":"#职责思考","children":[]}]},{"level":2,"title":"注册","slug":"注册","link":"#注册","children":[{"level":3,"title":"注册|注册时机","slug":"注册-注册时机","link":"#注册-注册时机","children":[]},{"level":3,"title":"注册|动态更新","slug":"注册-动态更新","link":"#注册-动态更新","children":[]},{"level":3,"title":"注册|标签关联","slug":"注册-标签关联","link":"#注册-标签关联","children":[]}]},{"level":2,"title":"转换","slug":"转换","link":"#转换","children":[{"level":3,"title":"数据转换|数据源","slug":"数据转换-数据源","link":"#数据转换-数据源","children":[]},{"level":3,"title":"数据转换|HTTP请求","slug":"数据转换-http请求","link":"#数据转换-http请求","children":[]},{"level":3,"title":"数据转换|格式转换","slug":"数据转换-格式转换","link":"#数据转换-格式转换","children":[]},{"level":3,"title":"数据转换|RuntimeDataTable","slug":"数据转换-runtimedatatable","link":"#数据转换-runtimedatatable","children":[]}]},{"level":2,"title":"权限","slug":"权限","link":"#权限","children":[{"level":3,"title":"修改权限","slug":"修改权限","link":"#修改权限","children":[]}]}],"git":{"createdTime":1709675291000,"updatedTime":1729899273000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":7}]},"readingTime":{"minutes":9.1,"words":2731},"filePathRelative":"unreal/network[网络]/2.3.-GamePlayNetWork.md","localizedDate":"2024年3月5日","excerpt":"<h3>数据结构|结构体</h3>\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<h3>数据结构|Datatable|表格</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">USTRUCT</span><span class=\\"token punctuation\\">(</span>BlueprintType<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">struct</span>  <span class=\\"token class-name\\">FCharacterStruct</span> <span class=\\"token operator\\">:</span> <span class=\\"token base-clause\\"><span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">FTableRowBase</span></span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n\\t\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Name\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tFString Name<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"Icon\\"</span><span class=\\"token punctuation\\">,</span> MakeStructureDefaultValue<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"None\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tTObjectPtr<span class=\\"token operator\\">&lt;</span>UTexture2D<span class=\\"token operator\\">&gt;</span> Icon<span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"SkeletalMesh\\"</span><span class=\\"token punctuation\\">,</span> MakeStructureDefaultValue<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"None\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tTObjectPtr<span class=\\"token operator\\">&lt;</span>USkeletalMesh<span class=\\"token operator\\">&gt;</span> SkeletalMesh<span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"SkeletalAnim\\"</span><span class=\\"token punctuation\\">,</span> MakeStructureDefaultValue<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"None\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tTObjectPtr<span class=\\"token operator\\">&lt;</span>UAnimSequence<span class=\\"token operator\\">&gt;</span> SkeletalAnim<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"SkeletalAnimSpeed\\"</span><span class=\\"token punctuation\\">,</span> MakeStructureDefaultValue<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"1.000000\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">float</span> SkeletalAnimSpeed <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1.0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> meta<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">(</span>DisplayName<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"id\\"</span><span class=\\"token punctuation\\">,</span> MakeStructureDefaultValue<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"0\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\tint32 id  <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);