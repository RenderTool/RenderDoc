"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2555],{85914:(a,e,t)=>{a.exports=t.p+"assets/img/onlinemode.abe65ad4.png"},871:(a,e,t)=>{a.exports=t.p+"assets/img/replicate011.9a5468e1.png"},77010:(a,e,t)=>{a.exports=t.p+"assets/img/spwanActor.6ad3109f.png"},347:(a,e,t)=>{t.r(e),t.d(e,{comp:()=>Ra,data:()=>ja});var n=t(20641),s=t(77010);const i=t.p+"assets/img/clientreplicate.27e98280.png",l=t.p+"assets/img/serverreplicate.ef268f0d.png",r=t.p+"assets/img/replicate.cb65bad0.png",o=t.p+"assets/img/variables-.3de92c3d.png",c=t.p+"assets/img/actorfz001.52837437.png",p=t.p+"assets/img/replicate001.60901116.png",d=t.p+"assets/img/replicate002.5bce204b.png",u=t.p+"assets/img/replicate004.3aae4a7b.png",k=t.p+"assets/img/replicate003.6626f2f3.png",g=t.p+"assets/img/replicate005.295814c9.png",m=t.p+"assets/img/replicate006.d820f48e.png",b=t.p+"assets/img/authority.35cd6f80.png",v=t.p+"assets/img/hasauthority.5a17177c.png",h=t.p+"assets/img/hasauthoritynode.008e05c5.png",L=t.p+"assets/img/network001.3d6a51ca.png",f=t.p+"assets/img/network002.bd061fd6.png",W=t.p+"assets/img/csnode.c2b6761c.png",y=t.p+"assets/img/replicate008.dfe5ae07.png",x=t.p+"assets/img/replicate009.cfb1aeaa.png",_=t.p+"assets/img/replicate010.32a9df17.png";var F=t(85914);const A=t.p+"assets/img/Framework_Network.539c3355.svg",R=t.p+"assets/img/Framework_Network_Two-.e4a5cca1.svg",j=t.p+"assets/img/simple.121ebecb.svg",P=t.p+"assets/img/errorpc.45804d28.svg",q=t.p+"assets/img/replicate007.1146b173.png";var w=t(871);const z=t.p+"assets/img/gh.15fbf575.jpg",S=(0,n.Lk)("h2",{id:"问题",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#问题"},[(0,n.Lk)("span",null,"问题")])],-1),C=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:s,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),E=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),N=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:l,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),O=(0,n.Fv)('<h2 id="replication-复制" tabindex="-1"><a class="header-anchor" href="#replication-复制"><span>Replication|复制</span></a></h2><blockquote><p>复制是服务器将信息/数据传递给客户端的行为。</p></blockquote><figure><img src="'+r+'" alt="中文" tabindex="0" loading="lazy"><figcaption>中文</figcaption></figure><figure><img src="'+o+'" alt="英文" tabindex="0" loading="lazy"><figcaption>英文</figcaption></figure><blockquote><p>对应的CPP</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token class-name">AMyCharacter</span><span class="token double-colon punctuation">::</span><span class="token function">ATestCharacter</span><span class="token punctuation">(</span><span class="token keyword">const</span> FObjectInitializer<span class="token operator">&amp;</span> ObjectInitializer<span class="token punctuation">)</span>\n    <span class="token operator">:</span> <span class="token function">Super</span><span class="token punctuation">(</span>ObjectInitializer<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    bReplicates <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),D=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),I=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),T=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),U=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),B=(0,n.Lk)("p",null,[(0,n.eW)("若将"),(0,n.Lk)("code",null,"客户端上的网络加载"),(0,n.eW)("关闭，原形毕露。")],-1),M=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),G=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),H=(0,n.Fv)('<h2 id="网络权威" tabindex="-1"><a class="header-anchor" href="#网络权威"><span>网络权威</span></a></h2><h3 id="authority-remote" tabindex="-1"><a class="header-anchor" href="#authority-remote"><span>Authority|Remote</span></a></h3><div class="hint-container note"><p class="hint-container-title">注</p><p>罗马音读音为 /əˈθɔːrəti/（英式发音）或 /əˈθɒrəti/（美式发音）。</p></div>',3),X=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),Z=(0,n.Lk)("p",null,[(0,n.eW)("在UE，可以通过调用 "),(0,n.Lk)("code",null,"HasAuthority()"),(0,n.eW)(' 来检查当前代码是否在具有 "Authority" 的实体上执行。例如：')],-1),J=(0,n.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 在具有Authority的实体上执行的代码</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+v+'" alt="BP宏" tabindex="0" loading="lazy"><figcaption>BP宏</figcaption></figure><figure><img src="'+h+'" alt="展开" tabindex="0" loading="lazy"><figcaption>展开</figcaption></figure>',3),K=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:L,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),Q=(0,n.Lk)("h3",{id:"enetrole-remote",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#enetrole-remote"},[(0,n.Lk)("span",null,"ENetRole|Remote")])],-1),V=(0,n.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">GetLocalRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ROLE_Authority\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',2),Y={href:"https://docs.unrealengine.com/4.27/zh-CN/InteractiveExperiences/Networking/Actors/Roles/",target:"_blank",rel:"noopener noreferrer"},$=(0,n.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,n.Lk)("pre",{class:"language-cpp"},[(0,n.Lk)("code",null,[(0,n.Lk)("span",{class:"token comment"},"/** The network role of an actor on a local/remote network context */"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token function"},"UENUM"),(0,n.Lk)("span",{class:"token punctuation"},"("),(0,n.Lk)("span",{class:"token punctuation"},")"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token keyword"},"enum"),(0,n.eW)(),(0,n.Lk)("span",{class:"token class-name"},"ENetRole"),(0,n.eW)(),(0,n.Lk)("span",{class:"token operator"},":"),(0,n.eW)(),(0,n.Lk)("span",{class:"token keyword"},"int"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token punctuation"},"{"),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** No role at all. */"),(0,n.eW)("\n\tROLE_None"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** Locally simulated proxy of this actor. */"),(0,n.eW)("\n\tROLE_SimulatedProxy"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** Locally autonomous proxy of this actor. */"),(0,n.eW)("\n\tROLE_AutonomousProxy"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** Authoritative control over the actor. */"),(0,n.eW)("\n\tROLE_Authority"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\tROLE_MAX"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token punctuation"},"}"),(0,n.Lk)("span",{class:"token punctuation"},";"),(0,n.eW)("\n")])]),(0,n.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"})])],-1),aa=(0,n.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,n.Lk)("pre",{class:"language-cpp"},[(0,n.Lk)("code",null,[(0,n.Lk)("span",{class:"token comment"},"/** 在本地/远程网络环境中，演员的网络角色 */"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token function"},"UENUM"),(0,n.Lk)("span",{class:"token punctuation"},"("),(0,n.Lk)("span",{class:"token punctuation"},")"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token keyword"},"enum"),(0,n.eW)(),(0,n.Lk)("span",{class:"token class-name"},"ENetRole"),(0,n.eW)(),(0,n.Lk)("span",{class:"token operator"},":"),(0,n.eW)(),(0,n.Lk)("span",{class:"token keyword"},"int"),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token punctuation"},"{"),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** 没有角色。 */"),(0,n.eW)("\n\tROLE_None"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** 该演员的本地模拟代理。 */"),(0,n.eW)("\n\tROLE_SimulatedProxy"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** 该演员的本地自治代理。 */"),(0,n.eW)("\n\tROLE_AutonomousProxy"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\t"),(0,n.Lk)("span",{class:"token comment"},"/** 对该演员的权威控制。 */"),(0,n.eW)("\n\tROLE_Authority"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n\tROLE_MAX"),(0,n.Lk)("span",{class:"token punctuation"},","),(0,n.eW)("\n"),(0,n.Lk)("span",{class:"token punctuation"},"}"),(0,n.Lk)("span",{class:"token punctuation"},";"),(0,n.eW)("\n")])]),(0,n.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"}),(0,n.Lk)("div",{class:"line-number"})])],-1),ea=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:W,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),ta=(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,"Character继承Pawn，Pawn继承Actor，本质还是Actor所以可以调到。")],-1),na=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),sa=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:x,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),ia=(0,n.Lk)("p",null,[(0,n.eW)("将复制关闭后，在服务端，也只能在本地生成，无法同步。即便是开启"),(0,n.Lk)("code",null,"客户端上的网络加载"),(0,n.eW)("依然如此。")],-1),la=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),ra=(0,n.Lk)("p",null,[(0,n.eW)("可以理解成一开始这个Level中压根就没有这个对象是吧，也就不存在"),(0,n.Lk)("code",null,"客户端上的网络加载"),(0,n.eW)("行为了。")],-1),oa=(0,n.Lk)("h2",{id:"网络模型",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#网络模型"},[(0,n.Lk)("span",null,"网络模型")])],-1),ca=(0,n.Fv)('<figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="基本网络模式" tabindex="-1"><a class="header-anchor" href="#基本网络模式"><span>基本网络模式</span></a></h3><table><thead><tr><th>网络模式</th><th>说明</th></tr></thead><tbody><tr><td>独立 (Standalone)</td><td>游戏作为服务器运行，不接受远程客户端连接。参与游戏的玩家必须为本地玩家。此模式用于单人游戏和本地多人游戏。其将运行本地玩家适用的服务器逻辑和客户端逻辑。</td></tr><tr><td>客户端 (Client)</td><td>游戏作为网络多人游戏会话中与服务器连接的客户端运行。其不会运行服务器逻辑。</td></tr><tr><td>聆听服务器 (Listen Server)</td><td>游戏作为主持网络多人游戏会话的服务器运行。其接受远程客户端中的连接，且直接在服务器上拥有本地玩家。此模式通常用于临时合作和竞技多人游戏。</td></tr><tr><td>专属服务器 (Dedicated Server)</td><td>游戏作为主持网络多人游戏会话的服务器运行。其接受远程客户端中的连接，但无本地玩家，因此为了高效运行，其将废弃图形、音效、输入和其他面向玩家的功能。此模式常用于需要更固定、安全和大型多人功能的游戏。</td></tr></tbody></table><h3 id="ds和ls区别" tabindex="-1"><a class="header-anchor" href="#ds和ls区别"><span>DS和LS区别</span></a></h3><blockquote><p>（Dedicated Server）和监听服务器（Listen Server）</p></blockquote><table><thead><tr><th>方面</th><th>独立服务器（Dedicated Server）</th><th>监听服务器（Listen Server）</th></tr></thead><tbody><tr><td>主机</td><td>独立服务器，不需要玩家主机</td><td>服务器和客户端合并在一起</td></tr><tr><td>与玩家的依赖</td><td>独立于玩家；不受玩家加入或退出的影响</td><td>需要托管玩家在线</td></tr><tr><td>操作系统</td><td>可编译为Windows和Linux</td><td>客户端的操作系统</td></tr><tr><td>可视化表示</td><td>没有可视部分，没有UI，PlayerController或Character</td><td>需要UI，PlayerController和Character</td></tr><tr><td>连接性</td><td>可在具有固定IP地址的云服务器上运行</td><td>玩家连接到客户端的IP地址</td></tr><tr><td>IP地址问题</td><td>玩家连接到固定IP，没有动态IP问题</td><td>由于客户端的IP更改，玩家可能面临动态IP问题</td></tr><tr><td>OnlineSubsystem的使用</td><td>可以使用OnlineSubsystem解决IP问题</td><td>也可以使用OnlineSubsystem解决动态IP问题</td></tr></tbody></table><h3 id="gameplay网络职责" tabindex="-1"><a class="header-anchor" href="#gameplay网络职责"><span>GamePlay网络职责</span></a></h3>',7),pa=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:A,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),da=(0,n.Lk)("h3",{id:"ds-dedicated-server-服务器网络模型",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#ds-dedicated-server-服务器网络模型"},[(0,n.Lk)("span",null,"DS(Dedicated Server)服务器网络模型")])],-1),ua=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:R,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),ka=(0,n.Lk)("h3",{id:"rpc-remote-procedure-calls",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#rpc-remote-procedure-calls"},[(0,n.Lk)("span",null,"RPC|Remote Procedure Calls")])],-1),ga=(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,'"RPC" 是 "Remote Procedure Call"（远程过程调用）的缩写。它是一种通信协议和编程模型， 用于在不同的计算机或进程之间调用远程服务或函数，就像调用本地函数一样。')],-1),ma=(0,n.Lk)("blockquote",null,[(0,n.Lk)("p",null,"注意这里的服务器描述可能不准确，LS确实是生成球体，而DS模式可能只是生成球体的代理。")],-1),ba=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:j,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),va=(0,n.Fv)('<figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="解决-rpc调用" tabindex="-1"><a class="header-anchor" href="#解决-rpc调用"><span>解决|RPC调用</span></a></h2><h3 id="bp" tabindex="-1"><a class="header-anchor" href="#bp"><span>BP</span></a></h3>',3),ha=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:q,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),La=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:w,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),fa=(0,n.Fv)('<h3 id="c" tabindex="-1"><a class="header-anchor" href="#c"><span>C++</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>   <span class="token comment">// .h</span>\n   <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>\n   <span class="token keyword">void</span> <span class="token function">ServerSetHealth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// .cpp</span>\n   <span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerSetHealth_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n   <span class="token punctuation">{</span>\n     <span class="token comment">//spawn的代码</span>\n   <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),Wa=(0,n.Lk)("h2",{id:"扩展阅读",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#扩展阅读"},[(0,n.Lk)("span",null,"扩展阅读")])],-1),ya=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:z,alt:"光环网络同步",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption",null,"光环网络同步")],-1),xa={href:"https://www.gdcvault.com/play/1024041/Networking-Scripted-Weapons-and-Abilities",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://cedric-neukirchen.net/docs/multiplayer-compendium/additional-resources",target:"_blank",rel:"noopener noreferrer"},Fa={href:"https://forums.unrealengine.com/t/who-has-authority-server-or-client-and-when/247708/7",target:"_blank",rel:"noopener noreferrer"},Aa={},Ra=(0,t(66262).A)(Aa,[["render",function(a,e){const t=(0,n.g2)("chatmessage"),s=(0,n.g2)("gifwithbutton"),i=(0,n.g2)("ExternalLinkIcon"),l=(0,n.g2)("CodeTabs");return(0,n.uX)(),(0,n.CE)("div",null,[S,(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 角色类中添加了如下函数：按数字1可以Spawn生成Actor ")])),_:1}),C,(0,n.bF)(t,{avatar:" ../../assets/emoji/new7.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 进行简单网络同步测试。同时客户端和服务端后，客户端按1生成Actor，服务端并没有同步 ")])),_:1}),E,(0,n.bF)(t,{avatar:" ../../assets/emoji/new7.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 但是，在服务端按1时，客户端却同步了！ ")])),_:1}),N,(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 我明明已经启用了网络复制！为什么客户端中按1，服务端没有同步生成？ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 先搞懂几个概念 ")])),_:1}),O,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 在UE中继承自Actor的派生都有Replication(包括组件) ")])),_:1}),D,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 先不讨论SpawnActor的情况，在场景中置入测试Actor，并关闭复制。 ")])),_:1}),I,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 关闭复制。 ")])),_:1}),T,(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 运行后，两端都能正常显示，这个复制可有可无？ ")])),_:1}),U,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 并不是，虽然两端都看到了这个Actor,他们彼此独立。 ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[B])),_:1}),M,G,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 此时虽不可见，生成处依然会有球体的碰撞。 ")])),_:1}),(0,n.bF)(s,{src:"../../assets/unrealgif/hpup10.gif"}),(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 啊？我怎么越听越迷糊了？为什么关闭了网络加载依然会有碰撞？ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 别急，咱再补几个概念。 ")])),_:1}),H,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 客户端确实生成了Actor，但我们认为所有客户端不可信，即服务器拥有绝对权限(Authority)。 ")])),_:1}),X,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[Z])),_:1}),J,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 翻看翻看源码，一探究竟。 ")])),_:1}),K,Q,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 可以看到实际它调用了GetLocalRole() ")])),_:1}),V,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.Lk)("p",null,[(0,n.eW)("参考"),(0,n.Lk)("a",Y,[(0,n.eW)("文档"),(0,n.bF)(i)])])])),_:1}),(0,n.bF)(l,{id:"117",data:[{id:"原文"},{id:"翻译"}],"tab-id":"language"},{title0:(0,n.k6)((({value:a,isActive:e})=>[(0,n.eW)("原文")])),title1:(0,n.k6)((({value:a,isActive:e})=>[(0,n.eW)("翻译")])),tab0:(0,n.k6)((({value:a,isActive:e})=>[$])),tab1:(0,n.k6)((({value:a,isActive:e})=>[aa])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 蓝图中节点如下： ")])),_:1}),ea,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 可以看到客户端的角色只有Remote权限没有Authority。 ")])),_:1}),ta,(0,n.bF)(s,{src:"../../assets/unrealgif/hpimpove5.gif"}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 便于测试，咱把代码写在Actor的tick中，然后Debug每个场景中的的网络权限。 ")])),_:1}),(0,n.bF)(s,{src:"../../assets/unrealgif/hpup11.gif"}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 客户端并没有网络权限，只是个无情的模拟机器。 ")])),_:1}),(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 既然用不用Replication都能正确显示，那么这个Replication到底有什么用？ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 场景默认生成的Actor确实看不出太多区别，但你提到的SpawnActor就看出大区别了。 ")])),_:1}),na,sa,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[ia])),_:1}),la,(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[ra])),_:1}),oa,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 在多人在线游戏中，客户端通常是模仿服务器行为的，因为服务器负责游戏世界的状态和逻辑。这种架构被称为客户端-服务器模型。 ")])),_:1}),(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 突然官腔！ ")])),_:1}),ca,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" GamePlay框架中各自对应的网络职责划分（大佬的图） ")])),_:1}),pa,da,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 专用服务器的下的网络模型 ")])),_:1}),ua,ka,(0,n.bF)(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 你说客户端没有什么权限,客户端总得发送我的按键消息吧！ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 是的，客户端总得通过一个方法去告诉服务器自己的行为，我们把这个过程称为RPC. ")])),_:1}),ga,(0,n.bF)(t,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" SO!UE中该怎么让客户端生成的Actor能同步到服务器呢？ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 理解还是有误！客户端并没有直接权限生成Actor（客户端不可靠）。 ")])),_:1}),ma,ba,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 现在康康你原本的思路。 ")])),_:1}),va,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" UE的BP中，可以在自定义事件中标记RPC状态，默认是不复制的。 ")])),_:1}),ha,(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 确保Actor本身可以复制，定义一个在服务器上执行的事件。 ")])),_:1}),La,(0,n.bF)(t,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 搜嘎！客户端申请服务器生成这个Actor，然后自动同步给其他客户端。 ")])),_:1}),(0,n.bF)(s,{src:"../../assets/unrealgif/hpup12.gif"}),fa,(0,n.bF)(t,{avatar:" ../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 一些变量比如速度如何同步呢？ ")])),_:1}),(0,n.bF)(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,n.k6)((()=>[(0,n.eW)(" 请看下一章。 ")])),_:1}),Wa,ya,(0,n.Lk)("p",null,[(0,n.Lk)("a",xa,[(0,n.eW)("《守望先锋》中的网络脚本武器和能力"),(0,n.bF)(i)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",_a,[(0,n.eW)("大佬博客"),(0,n.bF)(i)])]),(0,n.Lk)("p",null,[(0,n.Lk)("a",Fa,[(0,n.eW)("官方论坛"),(0,n.bF)(i)])])])}]]),ja=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html","title":"NT-2.0|Actor复制","lang":"zh-CN","frontmatter":{"title":"NT-2.0|Actor复制","order":20,"category":["unreal"],"description":"问题 Replication|复制 复制是服务器将信息/数据传递给客户端的行为。 中文中文 英文英文 对应的CPP","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.0|Actor复制"}],["meta",{"property":"og:description","content":"问题 Replication|复制 复制是服务器将信息/数据传递给客户端的行为。 中文中文 英文英文 对应的CPP"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-20T14:42:56.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-03-20T14:42:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.0|Actor复制\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T14:42:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"Replication|复制","slug":"replication-复制","link":"#replication-复制","children":[]},{"level":2,"title":"网络权威","slug":"网络权威","link":"#网络权威","children":[{"level":3,"title":"Authority|Remote","slug":"authority-remote","link":"#authority-remote","children":[]},{"level":3,"title":"ENetRole|Remote","slug":"enetrole-remote","link":"#enetrole-remote","children":[]}]},{"level":2,"title":"网络模型","slug":"网络模型","link":"#网络模型","children":[{"level":3,"title":"基本网络模式","slug":"基本网络模式","link":"#基本网络模式","children":[]},{"level":3,"title":"DS和LS区别","slug":"ds和ls区别","link":"#ds和ls区别","children":[]},{"level":3,"title":"GamePlay网络职责","slug":"gameplay网络职责","link":"#gameplay网络职责","children":[]},{"level":3,"title":"DS(Dedicated Server)服务器网络模型","slug":"ds-dedicated-server-服务器网络模型","link":"#ds-dedicated-server-服务器网络模型","children":[]},{"level":3,"title":"RPC|Remote Procedure Calls","slug":"rpc-remote-procedure-calls","link":"#rpc-remote-procedure-calls","children":[]}]},{"level":2,"title":"解决|RPC调用","slug":"解决-rpc调用","link":"#解决-rpc调用","children":[{"level":3,"title":"BP","slug":"bp","link":"#bp","children":[]},{"level":3,"title":"C++","slug":"c","link":"#c","children":[]}]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}],"git":{"createdTime":1708130422000,"updatedTime":1710945776000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":5}]},"readingTime":{"minutes":7.58,"words":2275},"filePathRelative":"unreal/network[网络]/2-GamePlayNetWork.md","localizedDate":"2024年2月17日","excerpt":"<h2>问题</h2>\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n<h2>Replication|复制</h2>\\n<blockquote>\\n<p>复制是服务器将信息/数据传递给客户端的行为。</p>\\n</blockquote>\\n<figure><figcaption>中文</figcaption></figure>\\n<figure><figcaption>英文</figcaption></figure>","autoDesc":true}')}}]);