"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2779],{41199:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>q,data:()=>_});var t=a(20641);const e=a.p+"assets/img/vectorsample.c51d3fe6.png",o=(0,t.Lk)("h3",{id:"vector",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#vector"},[(0,t.Lk)("span",null,"vector")])],-1),p=(0,t.Fv)('<ol><li><p><strong>静态空间 vs. 动态扩展</strong>：</p><ul><li><strong>数组</strong>：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。</li><li><strong><code>std::vector</code></strong>：<code>std::vector</code> 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 <code>std::vector</code> 的大小可以根据需要动态增加或减少，而不需要手动管理内存。</li></ul></li><li><p><strong>动态扩展的实现</strong>：</p><ul><li>当 <code>std::vector</code> 的容量不足以容纳新元素时，它会请求更大的内存块。这通常涉及到分配一块新的内存空间，将原有元素拷贝到新的内存中，然后释放原有的内存。这个过程确保了内存的连续性，有助于提高访问效率。</li><li>遵循左闭右开原则</li></ul></li></ol><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li><strong>优势和灵活性</strong>： <ul><li><code>std::vector</code> 提供了动态内存管理，这使得它在处理不确定数量的元素时更为灵活。它自动处理内存的分配和释放，减轻了程序员的负担。</li><li>普通数组在编译时就需要知道其大小，这可能导致一些不便，尤其是在需要动态调整大小的情况下。</li></ul></li></ol><h3 id="实例化vector" tabindex="-1"><a class="header-anchor" href="#实例化vector"><span>实例化vector</span></a></h3>',4),c=(0,t.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,t.Lk)("pre",{class:"language-cpp"},[(0,t.Lk)("code",null,[(0,t.eW)("std"),(0,t.Lk)("span",{class:"token double-colon punctuation"},"::"),(0,t.eW)("vector"),(0,t.Lk)("span",{class:"token operator"},"<"),(0,t.Lk)("span",{class:"token keyword"},"int"),(0,t.Lk)("span",{class:"token operator"},">"),(0,t.eW)(" v"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,t.Lk)("div",{class:"line-number"})])],-1),l=(0,t.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,t.Lk)("pre",{class:"language-cpp"},[(0,t.Lk)("code",null,[(0,t.Lk)("span",{class:"token keyword"},"template"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"<"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"T"),(0,t.Lk)("span",{class:"token punctuation"},","),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"Alloc"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},"="),(0,t.eW)(" allocator"),(0,t.Lk)("span",{class:"token operator"},"<"),(0,t.eW)("T"),(0,t.Lk)("span",{class:"token operator"},">"),(0,t.eW)(),(0,t.Lk)("span",{class:"token operator"},">"),(0,t.eW)(),(0,t.Lk)("span",{class:"token keyword"},"class"),(0,t.eW)(),(0,t.Lk)("span",{class:"token class-name"},"vector"),(0,t.Lk)("span",{class:"token punctuation"},";"),(0,t.eW)("\n")])]),(0,t.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,t.Lk)("div",{class:"line-number"})])],-1),i=(0,t.Lk)("h3",{id:"基本方法",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#基本方法"},[(0,t.Lk)("span",null,"基本方法")])],-1),r={href:"https://en.cppreference.com/w/cpp/container/vector",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>\n\n    <span class="token comment">// 添加元素</span>\n    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 10 添加到 v 中</span>\n    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 打印元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;打印元素: &quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 修改元素</span>\n    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>  <span class="token comment">// 将索引为 1 的元素修改为 25</span>\n\n    <span class="token comment">// 删除元素</span>\n    v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除最后一个元素</span>\n\n    <span class="token comment">// 插入元素</span>\n    v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在索引为 1 的位置插入元素 15</span>\n\n    <span class="token comment">// 输出修改后的向量元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;修改后: &quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 查找元素</span>\n    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>\n    <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;元素 &quot;</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;找到的索引 &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;元素 &quot;</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; 没有找到元素\\n&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h3>',2),k=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个包含整数的 vector</span>\n    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// ①使用迭代器遍历 vector 并输出元素</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myVector<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>\n     <span class="token punctuation">{</span>\n        <span class="token operator">*</span>it <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//也可以修改</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// ②使用范围-based for 循环（C++11及以后版本）</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> myVector<span class="token punctuation">)</span> \n    <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h3><h4 id="_1-为什么要用迭代器遍历" tabindex="-1"><a class="header-anchor" href="#_1-为什么要用迭代器遍历"><span>1. 为什么要用迭代器遍历</span></a></h4>',3),d=(0,t.Lk)("p",null,[(0,t.eW)("在这里你可以把他当作指针用，但"),(0,t.Lk)("code",null,"迭代器"),(0,t.eW)("其实是一种用于访问、操作容器（如数组、列表、集合等）元素的抽象接口。")],-1),v=(0,t.Lk)("hr",null,null,-1),m=(0,t.Lk)("h4",{id:"_2-动态开辟空间问题优化-预留空间",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_2-动态开辟空间问题优化-预留空间"},[(0,t.Lk)("span",null,"2.动态开辟空间问题优化-预留空间")])],-1),b=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>\n    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            p <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            num<span class="token operator">++</span><span class="token punctuation">;</span>\n            std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;num=&quot;</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),g=(0,t.Lk)("hr",null,null,-1),h=(0,t.Lk)("h3",{id:"_3-front和begin区别",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_3-front和begin区别"},[(0,t.Lk)("span",null,"3. front和begin区别")])],-1),f=(0,t.Fv)('<ol><li><p><strong><code>begin()</code> 函数：</strong></p><ul><li><strong>返回类型：</strong> <code>begin()</code> 函数返回一个迭代器，指向双端队列的第一个元素（前端块的第一个元素）。</li><li><strong>用途：</strong> 主要用于遍历 <code>std::vector</code> 中的元素，它标识了双端队列的起始位置。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\nstd<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>front()</code> 函数：</strong></p><ul><li><strong>返回类型：</strong> <code>front()</code> 函数返回一个引用，指向双端队列的第一个元素（前端块的第一个元素）。</li><li><strong>用途：</strong> 主要用于访问或修改 <code>std::vector</code> 的第一个元素的值。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> firstElement <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>总结：</strong></p><ul><li><code>begin()</code> 返回一个迭代器，主要用于遍历容器元素。</li><li><code>front()</code> 返回第一个元素的引用，主要用于访问或修改第一个元素的值。</li></ul>',3),y=(0,t.Lk)("h3",{id:"参考链接",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#参考链接"},[(0,t.Lk)("span",null,"参考链接")])],-1),L={href:"https://www.w3schools.cn/cpp_standard_library/array.html",target:"_blank",rel:"noopener noreferrer"},W={href:"https://en.cppreference.com/w/cpp/container/vector",target:"_blank",rel:"noopener noreferrer"},w={},q=(0,a(66262).A)(w,[["render",function(n,s){const a=(0,t.g2)("chatmessage"),e=(0,t.g2)("CodeTabs"),w=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[o,(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" Baba能不能带我手把手体验vector容器一下怎么用? ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 安排！ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" vector 是 C++ 标准模板库（STL）中的一个是可以改变大小的序列容器，序列容器严格按线性顺序存储元素。本质上是一个类模板，还记得类模板的特性吗？在使用类模板时，需要对其进行实例化。 ")])),_:1}),p,(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 既然vector本质是一个类模板，那么我们用它的时候也需要实例化对象。 ")])),_:1}),(0,t.bF)(e,{id:"68",data:[{id:"实例化"},{id:"标准库中的定义"}],"tab-id":"language"},{title0:(0,t.k6)((({value:n,isActive:s})=>[(0,t.eW)("实例化")])),title1:(0,t.k6)((({value:n,isActive:s})=>[(0,t.eW)("标准库中的定义")])),tab0:(0,t.k6)((({value:n,isActive:s})=>[c])),tab1:(0,t.k6)((({value:n,isActive:s})=>[l])),_:1}),i,(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" ok，现在我们怎么进行增删改查呢？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 调用对应的成员方法即可。 ")])),_:1}),(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.eW)("这是vector"),(0,t.Lk)("a",r,[(0,t.eW)("成员函数参考"),(0,t.bF)(w)])])]),u,(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 现在我想取出所有元素，我还能用遍历吗？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 他的本质是一个模板类，不能用传统的for循环依靠指针遍历数组，但底层已经封装了遍历的方法，我们管他叫迭代器。 ")])),_:1}),k,(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 我看见你用*it输出到屏幕，莫非这个迭代器（iterator）是一个指针？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[d])),_:1}),v,m,(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 我听他们说每次vector新加元素都会动态开辟一个新的空间，怎么验证呢？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 很简单，可以用一个指针来验证。 ")])),_:1}),b,(0,t.bF)(a,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:(0,t.k6)((()=>[(0,t.eW)(" 妙啊！意味着如果首地址更换了指针就会被重新赋值，num也会递增就得到了重新分配地址的次数了！ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 一般来说他默认分配的内存已经够用了，上面执行了100000次也就分配了几次。但对于更大的数据来说，能不能再优化减少动态分配的次数呢？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你想到的问题官方也想到了。为此增加了一个叫预留空间函数——reserve(int size)。 ")])),_:1}),g,h,(0,t.bF)(a,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:(0,t.k6)((()=>[(0,t.eW)(" front和begin区别有啥区别啊？ ")])),_:1}),f,(0,t.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 请注意，使用 `front()` 之前需要确保 `std::vector` 不为空，因为对于空的 `std::vector` 调用 `front()` 是未定义行为,最好使用 empty() 函数进行检查。 ")])),_:1}),y,(0,t.Lk)("p",null,[(0,t.Lk)("a",L,[(0,t.eW)("国内网站"),(0,t.bF)(w)]),(0,t.Lk)("a",W,[(0,t.eW)("vector"),(0,t.bF)(w)])])])}]]),_=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html","title":"c++3.vector容器","lang":"zh-CN","frontmatter":{"title":"c++3.vector容器","order":3,"category":["c++"],"description":"vector 静态空间 vs. 动态扩展： 数组：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。 std::vector：std::vector 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 std::vector 的大小可以根据需要动态增加或减少，而不需要手动管理内存。 动态扩展的实现：...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++3.vector容器"}],["meta",{"property":"og:description","content":"vector 静态空间 vs. 动态扩展： 数组：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。 std::vector：std::vector 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 std::vector 的大小可以根据需要动态增加或减少，而不需要手动管理内存。 动态扩展的实现：..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++3.vector容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"vector","slug":"vector","link":"#vector","children":[]},{"level":3,"title":"实例化vector","slug":"实例化vector","link":"#实例化vector","children":[]},{"level":3,"title":"基本方法","slug":"基本方法","link":"#基本方法","children":[]},{"level":3,"title":"迭代器","slug":"迭代器","link":"#迭代器","children":[]},{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":3,"title":"3. front和begin区别","slug":"_3-front和begin区别","link":"#_3-front和begin区别","children":[]},{"level":3,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1701893836000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":2},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"language/cpp/stl[标准模板]/3-vector.md","localizedDate":"2023年12月6日","excerpt":"<h3>vector</h3>\\n\\n\\n\\n<ol>\\n<li>\\n<p><strong>静态空间 vs. 动态扩展</strong>：</p>\\n<ul>\\n<li><strong>数组</strong>：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。</li>\\n<li><strong><code>std::vector</code></strong>：<code>std::vector</code> 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 <code>std::vector</code> 的大小可以根据需要动态增加或减少，而不需要手动管理内存。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>动态扩展的实现</strong>：</p>\\n<ul>\\n<li>当 <code>std::vector</code> 的容量不足以容纳新元素时，它会请求更大的内存块。这通常涉及到分配一块新的内存空间，将原有元素拷贝到新的内存中，然后释放原有的内存。这个过程确保了内存的连续性，有助于提高访问效率。</li>\\n<li>遵循左闭右开原则</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);