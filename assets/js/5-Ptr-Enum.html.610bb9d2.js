"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3766],{63427:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>p,data:()=>c});var t=s(20641);const e=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>\n    RED<span class="token punctuation">,</span>\n    GREEN<span class="token punctuation">,</span>\n    BLUE\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Color myColor <span class="token operator">=</span> GREEN<span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用指向枚举变量的指针</span>\n    Color<span class="token operator">*</span> pColor <span class="token operator">=</span> <span class="token operator">&amp;</span>myColor<span class="token punctuation">;</span>\n\n    <span class="token comment">// 输出枚举值</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Current color: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pColor <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>pColor</code> 是一个指向 <code>Color</code> 枚举变量的指针，它可以存储枚举值的地址。需要注意的是，输出指针的值（<code>*pColor</code>）会得到底层整数值（例如，0、1、2），而不是枚举名称。</p>',2),o={},p=(0,s(66262).A)(o,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 有没有枚举指针? ")])),_:1}),(0,t.bF)(s,{avatar:"../../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 枚举（Enum）本身并没有指针，因为枚举是一种由命名整数值组成的类型，而不是一种可寻址的数据类型。枚举常用于表示一组有限的离散值。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 然而，你可以使用指向枚举变量的指针。这样的指针可以用来存储和访问枚举值的地址，但需要注意的是，枚举类型的底层类型是整数，因此使用指针主要是为了方便处理或传递枚举值的地址。 ")])),_:1}),e,(0,t.bF)(s,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 实际编程中，很多情况下直接使用枚举变量而不是指针更为常见。 ")])),_:1})])}]]),c=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html","title":"c++枚举指针?","lang":"zh-CN","frontmatter":{"title":"c++枚举指针?","order":5,"category":["c++"],"description":"在这个例子中，pColor 是一个指向 Color 枚举变量的指针，它可以存储枚举值的地址。需要注意的是，输出指针的值（*pColor）会得到底层整数值（例如，0、1、2），而不是枚举名称。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++枚举指针?"}],["meta",{"property":"og:description","content":"在这个例子中，pColor 是一个指向 Color 枚举变量的指针，它可以存储枚举值的地址。需要注意的是，输出指针的值（*pColor）会得到底层整数值（例如，0、1、2），而不是枚举名称。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++枚举指针?\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1701100984000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.04,"words":313},"filePathRelative":"language/cpp/BaseGuide[基础概念]/ptr[指针]/5-Ptr-Enum.md","localizedDate":"2023年11月27日","excerpt":"\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token keyword\\">enum</span> <span class=\\"token class-name\\">Color</span> <span class=\\"token punctuation\\">{</span>\\n    RED<span class=\\"token punctuation\\">,</span>\\n    GREEN<span class=\\"token punctuation\\">,</span>\\n    BLUE\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    Color myColor <span class=\\"token operator\\">=</span> GREEN<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 使用指向枚举变量的指针</span>\\n    Color<span class=\\"token operator\\">*</span> pColor <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">&amp;</span>myColor<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 输出枚举值</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Current color: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>pColor <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);