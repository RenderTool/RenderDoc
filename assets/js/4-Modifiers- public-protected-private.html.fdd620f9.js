"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2992],{79966:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>v});var e=a(20641);const t=a.p+"assets/img/publicchat.33a62c11.png",p=a.p+"assets/img/puprpv.e52efc8a.png",c=(0,e.Lk)("h2",{id:"类-class-中",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#类-class-中"},[(0,e.Lk)("span",null,"类(class)中")])],-1),i=(0,e.Lk)("h3",{id:"访问控制",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#访问控制"},[(0,e.Lk)("span",null,"访问控制")])],-1),l=(0,e.Fv)('<figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>Private自己可见|Protected自己和好友可见|Public所有人可见</strong></p></blockquote><ol><li><strong>Public（公共）:</strong><ul><li>成员声明为 <code>public</code> 的，可以在类的内部和外部访问。</li><li>对于类的用户来说，<code>public</code> 成员是可见的，可以直接访问。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> publicVar<span class="token punctuation">;</span>  <span class="token comment">// 公共变量</span>\n    <span class="token keyword">void</span> <span class="token function">publicMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 公共方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Protected（受保护的）:</strong><ul><li>成员声明为 <code>protected</code> 的，可以在类的内部访问，也可以在派生类中访问，但不能在类的外部访问。</li><li><code>protected</code> 成员对类的用户是不可见的，只有类的派生类能够访问。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyBaseClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">protected</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> protectedVar<span class="token punctuation">;</span>  <span class="token comment">// 受保护的变量</span>\n    <span class="token keyword">void</span> <span class="token function">protectedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 受保护的方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyDerivedClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MyBaseClass</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">accessProtected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        protectedVar <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 在派生类中可以访问受保护的变量</span>\n        <span class="token function">protectedMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在派生类中可以调用受保护的方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Private（私有的）:</strong><ul><li>成员声明为 <code>private</code> 的，只能在类的内部访问，对于类的用户和派生类都是不可见的。</li><li><code>private</code> 成员对类的用户和派生类都是不可见的。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> privateVar<span class="token punctuation">;</span>  <span class="token comment">// 私有变量</span>\n    <span class="token keyword">void</span> <span class="token function">privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 私有方法</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="控制继承" tabindex="-1"><a class="header-anchor" href="#控制继承"><span>控制继承</span></a></h3>',9),o=(0,e.Fv)('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p><strong>Public继承：</strong> 如果派生类使用 <code>public</code> 关键字继承基类，那么基类中的 <code>public</code> 和 <code>protected</code> 成员在派生类中的访问权限不变，而 <code>private</code> 成员在派生类中仍然是不可访问的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> publicMember<span class="token punctuation">;</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> privateMember<span class="token punctuation">;</span>\n<span class="token keyword">protected</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> protectedMember<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// publicMember 在Derived中是public</span>\n    <span class="token comment">// privateMember 在Derived中仍然是不可访问的</span>\n    <span class="token comment">// protectedMember 在Derived中是protected</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Protected继承：</strong> 如果派生类使用 <code>protected</code> 关键字继承基类，那么基类中的 <code>public</code> 和 <code>protected</code> 成员在派生类中的访问权限都变成了 <code>protected</code>，而 <code>private</code> 成员仍然是不可访问的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> publicMember<span class="token punctuation">;</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> privateMember<span class="token punctuation">;</span>\n<span class="token keyword">protected</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> protectedMember<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// publicMember 在Derived中是protected</span>\n    <span class="token comment">// privateMember 在Derived中仍然是不可访问的</span>\n    <span class="token comment">// protectedMember 在Derived中是protected</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>Private继承：</strong> 如果派生类使用 <code>private</code> 关键字继承基类，那么基类中的 <code>public</code> 和 <code>protected</code> 成员在派生类中的访问权限都变成了 <code>private</code>，而 <code>private</code> 成员仍然是不可访问的。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> publicMember<span class="token punctuation">;</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> privateMember<span class="token punctuation">;</span>\n<span class="token keyword">protected</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> protectedMember<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// publicMember 在Derived中是private</span>\n    <span class="token comment">// privateMember 在Derived中仍然是不可访问的</span>\n    <span class="token comment">// protectedMember 在Derived中是private</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>总结成表格：</p><table><thead><tr><th>访问</th><th>同一个类</th><th>派生类</th><th>外部的类</th></tr></thead><tbody><tr><td>Public</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Protected</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Private</td><td>Yes</td><td>No</td><td>No</td></tr></tbody></table>',4),d=(0,e.Lk)("h2",{id:"结构体-struct-中",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#结构体-struct-中"},[(0,e.Lk)("span",null,"结构体(struct)中")])],-1),r={},u=(0,a(66262).A)(r,[["render",function(n,s){const a=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(a,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 在面向对象编程中，`public`、`protected` 和 `private` 是访问控制修饰符，用于控制类的成员（属性和方法）对外的可见性。 ")])),_:1}),c,i,(0,e.bF)(a,{avatar:"../../../assets/emoji/ybk.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" class默认是private,对自己可见。 ")])),_:1}),l,(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" `private` 派生的类中能访问到吗？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 使用 private 继承时，基类的 private 成员确实被继承了，但在派生类中的访问权限发生了改变。 不同的继承方法，继承后的成员属性也会变化： ")])),_:1}),o,(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 那么`private` 修饰的类成员变量和函数一定只能通过自己访问是吧。 ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 并不一定，这个问题可以在下一章中得到答案。 ")])),_:1}),d,(0,e.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" struct默认都是Public ")])),_:1})])}]]),v=JSON.parse('{"path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html","title":"c++4.public|protected|private","lang":"zh-CN","frontmatter":{"title":"c++4.public|protected|private","order":4,"category":["c++"],"description":"类(class)中 访问控制 Private自己可见|Protected自己和好友可见|Public所有人可见 Public（公共）: 成员声明为 public 的，可以在类的内部和外部访问。 对于类的用户来说，public 成员是可见的，可以直接访问。 Protected（受保护的）: 成员声明为 protected 的，可以在类的内部访问，也可以在...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++4.public|protected|private"}],["meta",{"property":"og:description","content":"类(class)中 访问控制 Private自己可见|Protected自己和好友可见|Public所有人可见 Public（公共）: 成员声明为 public 的，可以在类的内部和外部访问。 对于类的用户来说，public 成员是可见的，可以直接访问。 Protected（受保护的）: 成员声明为 protected 的，可以在类的内部访问，也可以在..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++4.public|protected|private\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"类(class)中","slug":"类-class-中","link":"#类-class-中","children":[{"level":3,"title":"访问控制","slug":"访问控制","link":"#访问控制","children":[]},{"level":3,"title":"控制继承","slug":"控制继承","link":"#控制继承","children":[]}]},{"level":2,"title":"结构体(struct)中","slug":"结构体-struct-中","link":"#结构体-struct-中","children":[]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":2},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.87,"words":861},"filePathRelative":"language/cpp/keywords[关键字]/4-Modifiers- public-protected-private.md","localizedDate":"2023年11月23日","excerpt":"\\n<h2>类(class)中</h2>\\n<h3>访问控制</h3>\\n\\n<figure><figcaption></figcaption></figure>\\n<blockquote>\\n<p><strong>Private自己可见|Protected自己和好友可见|Public所有人可见</strong></p>\\n</blockquote>\\n<ol>\\n<li><strong>Public（公共）:</strong>\\n<ul>\\n<li>成员声明为 <code>public</code> 的，可以在类的内部和外部访问。</li>\\n<li>对于类的用户来说，<code>public</code> 成员是可见的，可以直接访问。</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);