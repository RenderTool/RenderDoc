"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4146],{36565:(e,a,n)=>{e.exports=n.p+"assets/img/GameMode.b89e4dd6.jpg"},49427:(e,a,n)=>{e.exports=n.p+"assets/img/gamemodeinclue.1dad98d5.jpg"},48326:(e,a,n)=>{e.exports=n.p+"assets/img/libexpcpp.073f8f1d.jpg"},49187:(e,a,n)=>{n.r(a),n.d(a,{comp:()=>Wa,data:()=>_a});var t=n(20641);const l=n.p+"assets/img/helloworldUE.47005be3.jpg",s=n.p+"assets/img/newcppclass.0b6ff9e0.png",i=n.p+"assets/img/actorpublicobject.a4226bbc.jpg",r=n.p+"assets/img/slate.a2814063.jpg",o=n.p+"assets/img/GameFramework.58b6decf.jpg";var c=n(36565),d=n(49427);const p=n.p+"assets/img/UEComponent.a9eceb7c.png",u=n.p+"assets/img/level.ed23c134.jpg",k=n.p+"assets/img/uworld.0de7e7cb.jpg",b=n.p+"assets/img/gameinstancecpp.3f6e9ce5.jpg",m=n.p+"assets/img/carbagecollection.f8b0a64c.png",h=n.p+"assets/img/UEpakage.aded3cde.jpg",g=n.p+"assets/img/subsystems.a8adaa41.jpg";var v=n(48326);const f=n.p+"assets/img/IDEgenerate def.07abce94.jpg",L=n.p+"assets/img/ideaicode2.3d48ce0c.jpg",W=n.p+"assets/img/testhelloworld.e0620a76.png",_=n.p+"assets/img/testfunlist.7f72ee65.jpg",y=n.p+"assets/img/successhelloworld.33bc6900.png",U=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.eW)("天地除开，诞生了第一缕"),(0,t.Lk)("code",null,"UObject"),(0,t.eW)("，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。"),(0,t.Lk)("br"),(0,t.eW)(" 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。")])],-1),C=(0,t.Lk)("h2",{id:"导读",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#导读"},[(0,t.Lk)("span",null,"导读")])],-1),j=(0,t.Lk)("br",null,null,-1),E=(0,t.Lk)("br",null,null,-1),x=(0,t.Lk)("br",null,null,-1),w=(0,t.Fv)('<h2 id="ue启动" tabindex="-1"><a class="header-anchor" href="#ue启动"><span>UE启动</span></a></h2><blockquote><p>心血来潮！我要自己搞一个游戏！UE启动！</p></blockquote><h2 id="_1-新建一个cpp工程" tabindex="-1"><a class="header-anchor" href="#_1-新建一个cpp工程"><span>1. 新建一个CPP工程</span></a></h2><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),F=(0,t.Lk)("h2",{id:"_2-添加第一个c-类",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_2-添加第一个c-类"},[(0,t.Lk)("span",null,"2.添加第一个C++类")])],-1),q=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"等待编译并启动项目，初次尝试UECPP先问候一句HelloWorld再说，点击工具-新建一个C++类。")],-1),S=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:s,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),T=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),A=(0,t.Lk)("br",null,null,-1),P=(0,t.Lk)("br",null,null,-1),G=(0,t.Lk)("h2",{id:"uobject-ue对象",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#uobject-ue对象"},[(0,t.Lk)("span",null,"UObject|UE对象")])],-1),O=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"什么是UObject?")],-1),I=(0,t.Lk)("br",null,null,-1),z=(0,t.Lk)("br",null,null,-1),B=(0,t.Lk)("br",null,null,-1),M=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:i,alt:"例如：Actor继承自UObject",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"例如：Actor继承自UObject")],-1),D=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:r,alt:"左边C++右边蓝图",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"左边C++右边蓝图")],-1),R=(0,t.Lk)("hr",null,null,-1),H=(0,t.Lk)("h2",{id:"ue-gameplay架构",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#ue-gameplay架构"},[(0,t.Lk)("span",null,"UE-GamePlay架构")])],-1),N=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),V=(0,t.Lk)("p",null,"摘自官方文档：",-1),X=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.eW)("此流程图演示了这些核心Gameplay类彼此之间的关系。 "),(0,t.Lk)("br"),(0,t.eW)("一个游戏由一个GameMode和一个GameState构成。 "),(0,t.Lk)("br"),(0,t.eW)("加入游戏的人类玩家与PlayerController关联。 "),(0,t.Lk)("br"),(0,t.eW)("这些PlayerController允许玩家持有游戏中的Pawn，以便在关卡中有物理表示。 "),(0,t.Lk)("br"),(0,t.eW)("PlayerController还为玩家提供了输入功能按钮、平视显示器（简称HUD）和用于处理摄像机视图的PlayerCameraManager。")])],-1),K=(0,t.Lk)("br",null,null,-1),Y=(0,t.Lk)("br",null,null,-1),Z=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"下面会详细介绍每一项")],-1),J={style:{color:"red"}},Q=(0,t.Lk)("a",{href:"#_1GamePlay->GameMode"},"游戏规则： ①-②",-1),$=(0,t.Lk)("br",null,null,-1),ee=(0,t.Lk)("a",{href:"#_3-camera-游戏相机"},[(0,t.eW)("3C是指： "),(0,t.Lk)("span",{style:{color:"orangered"}},"Character（角色）、Control（控制）和Camera（摄像机）"),(0,t.eW)(" ③-⑤")],-1),ae={href:"https://zhuanlan.zhihu.com/p/357621053",target:"_blank",rel:"noopener noreferrer"},ne=(0,t.Lk)("br",null,null,-1),te=(0,t.Lk)("a",{href:"#_6-gameui-游戏ui"},"游戏界面⑥",-1),le=(0,t.Lk)("h3",{id:"_1gameplay-gamemode",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_1gameplay-gamemode"},[(0,t.Lk)("span",null,"①GamePlay->GameMode")])],-1),se=(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.eW)("AGameModeBase (public AInfo) "),(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,[(0,t.eW)("AInfo (public AActor) "),(0,t.Lk)("ul",null,[(0,t.Lk)("li",null,"AActor (public UObject)")])])])])],-1),ie=(0,t.Fv)('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>生成的类打开后</p></blockquote><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>类别</th><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>APawn class</td><td>游戏中的角色</td><td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td></tr><tr><td>AHUD class</td><td>Heads-Up Display (HUD)</td><td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td></tr><tr><td>APlayerController class</td><td>玩家控制器</td><td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td></tr><tr><td>AGameState class</td><td>游戏状态</td><td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td></tr><tr><td>APlayerState class</td><td>玩家状态</td><td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td></tr><tr><td>ASpectatorPawn class</td><td>观察者角色</td><td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td></tr></tbody></table><hr><h3 id="_2-gamestate-游戏状态" tabindex="-1"><a class="header-anchor" href="#_2-gamestate-游戏状态"><span>② GameState|游戏状态</span></a></h3><ul><li>AGameStateBase (public AInfo) <ul><li>AInfo (public AActor) <ul><li>AActor (public UObject)</li></ul></li></ul></li></ul>',7),re=(0,t.Lk)("hr",null,null,-1),oe=(0,t.Lk)("h3",{id:"_3-camera-游戏相机",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_3-camera-游戏相机"},[(0,t.Lk)("span",null,"③ Camera|游戏相机")])],-1),ce=(0,t.Lk)("hr",null,null,-1),de=(0,t.Lk)("h3",{id:"_4-character-游戏角色",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_4-character-游戏角色"},[(0,t.Lk)("span",null,"④ Character|游戏角色")])],-1),pe=(0,t.Lk)("hr",null,null,-1),ue=(0,t.Lk)("h3",{id:"_5-controller-控制器",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_5-controller-控制器"},[(0,t.Lk)("span",null,"⑤ Controller|控制器")])],-1),ke=(0,t.Lk)("hr",null,null,-1),be=(0,t.Lk)("h3",{id:"_6-gameui-游戏ui",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_6-gameui-游戏ui"},[(0,t.Lk)("span",null,"⑥ GameUI|游戏UI")])],-1),me=(0,t.Lk)("hr",null,null,-1),he=(0,t.Lk)("h3",{id:"component-组件",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#component-组件"},[(0,t.Lk)("span",null,"Component|组件")])],-1),ge=(0,t.Fv)('<figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>组件类型</th><th>功能和用途</th></tr></thead><tbody><tr><td>UStaticMeshComponent</td><td>渲染静态网格模型，如墙、地板等</td></tr><tr><td>USkeletalMeshComponent</td><td>渲染有骨骼的网格模型，适用于角色和生物</td></tr><tr><td>UCameraComponent</td><td>创建摄像机视图，用于玩家或观察</td></tr><tr><td>ULightComponentBase</td><td>创建不同类型的光源，如点光源、聚光灯等</td></tr><tr><td>UParticleSystemComponent</td><td>播放粒子系统，创建特效如火焰、爆炸等</td></tr><tr><td>UAudioComponent</td><td>播放声音，附加到物体上产生音效</td></tr><tr><td>UCollisionComponent</td><td>处理碰撞和触发事件，可以是基本碰撞体或区域</td></tr><tr><td>UInputComponent</td><td>处理玩家输入，如按键和鼠标事件</td></tr><tr><td>USceneComponent</td><td>在场景中构建组件层次结构，可作为父组件</td></tr><tr><td>UWidgetComponent</td><td>将2D UI嵌入3D世界，显示UMG部件</td></tr></tbody></table>',2),ve=(0,t.Lk)("a",{href:"./exp_经验_/1-Blueprint2CPP.html"},"蓝图节点对应CPP的探索与解析",-1),fe=(0,t.Lk)("hr",null,null,-1),Le=(0,t.Lk)("h3",{id:"uworld-游戏世界",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#uworld-游戏世界"},[(0,t.Lk)("span",null,"UWorld|游戏世界")])],-1),We=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:u,alt:"关卡",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"关卡")],-1),_e=(0,t.Lk)("h3",{id:"ulevel-游戏关卡",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#ulevel-游戏关卡"},[(0,t.Lk)("span",null,"ULevel|游戏关卡")])],-1),ye=(0,t.Lk)("br",null,null,-1),Ue=(0,t.Lk)("span",{style:{color:"#c0392b"}},"N*ULeveL => UWorld ",-1),Ce=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:k,alt:"若干小关卡组成大世界",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption",null,"若干小关卡组成大世界")],-1),je=(0,t.Lk)("h3",{id:"worldcontext-世界上下文",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#worldcontext-世界上下文"},[(0,t.Lk)("span",null,"WorldContext|世界上下文")])],-1),Ee=(0,t.Lk)("hr",null,null,-1),xe=(0,t.Lk)("h2",{id:"掌权者",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#掌权者"},[(0,t.Lk)("span",null,"掌权者")])],-1),we=(0,t.Lk)("h3",{id:"gameinstance-游戏实例",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#gameinstance-游戏实例"},[(0,t.Lk)("span",null,"GameInstance|游戏实例")])],-1),Fe=(0,t.Fv)('<figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="大帝" tabindex="-1"><a class="header-anchor" href="#大帝"><span>大帝</span></a></h2><h3 id="uengine-虚幻游戏引擎" tabindex="-1"><a class="header-anchor" href="#uengine-虚幻游戏引擎"><span>UEngine|虚幻游戏引擎</span></a></h3><p>天地除开，诞生了第一缕<code>UObject</code>，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。<br> 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。</p>',4),qe=(0,t.Lk)("p",null,[(0,t.Lk)("strong",null,"Object->Actor+Component->Level->World->WorldContext->GameInstance->Engine")],-1),Se=(0,t.Lk)("h2",{id:"真神",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#真神"},[(0,t.Lk)("span",null,"真神")])],-1),Te=(0,t.Lk)("h3",{id:"ue-refection-ue反射",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#ue-refection-ue反射"},[(0,t.Lk)("span",null,"UE-Refection|UE反射")])],-1),Ae=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"篇幅限制，这里不做反射的深入，具体可以看后续的反射机制篇。")],-1),Pe={href:"https://docs.unrealengine.com/5.3/zh-CN/reflection-system-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},Ge=(0,t.Lk)("code",null,"宏（英语：Macro），是一种批量处理的称谓。 计算机科学里的宏是一种抽象（Abstraction），它根据一系列预定义的规则替换一定的文本模式。 解释器或编译器在遇到宏时会自动进行这一模式替换。——wiki",-1),Oe=(0,t.Lk)("h3",{id:"uht-unreal-header-tool-虚幻头文件工具",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#uht-unreal-header-tool-虚幻头文件工具"},[(0,t.Lk)("span",null,"UHT|Unreal Header Tool（虚幻头文件工具）")])],-1),Ie=(0,t.Fv)('<div class="language-markdown line-numbers-mode" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token list punctuation">1.</span> 源代码\n    <span class="token list punctuation">-</span> 用户编写包含特定宏和标记的UE4 C++ 代码。\n\n<span class="token list punctuation">2.</span> UHT扫描\n    <span class="token list punctuation">-</span> UHT在构建项目时扫描头文件，寻找特定的宏和标记。\n\n<span class="token list punctuation">3.</span> 生成反射信息\n    <span class="token list punctuation">-</span> UHT使用找到的宏和标记生成反射信息，包括类的成员变量和成员函数。\n\n<span class="token list punctuation">4.</span> 生成代码框架\n    <span class="token list punctuation">-</span> 除了反射信息，UHT也可以根据宏和标记生成一些代码框架，以辅助实现类的功能。\n\n<span class="token list punctuation">5.</span> 传递给编译器\n    <span class="token list punctuation">-</span> 生成的反射信息和代码框架将传递给C++编译器，它们会被合并到最终的编译过程中。\n\n<span class="token list punctuation">6.</span> 构建项目\n    <span class="token list punctuation">-</span> 编译器将所有的源代码和生成的代码一起编译成可执行文件。\n\n<span class="token list punctuation">7.</span> 运行游戏\n    <span class="token list punctuation">-</span> 最终生成的可执行文件可以在UE4引擎中运行，实现用户在代码中定义的功能。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>通常会在一个类的头文件中包含一个以 .generated.h 结尾的文件， 例如 MyClass.generated.h。</li><li>这个文件包含了由UHT生成的代码，通常用于实现反射信息、蓝图节点以及其他与类相关的元数据。</li><li>默认情况下，UE会使用Microsoft Visual C++(MSVC)作为主要的编译工具,这里我们用Rider连接MSVC（IDE自动完成）。</li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',3),ze={href:"https://www.bilibili.com/video/BV1EM411U7PX?p=36&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},Be=(0,t.Lk)("hr",null,null,-1),Me=(0,t.Lk)("h3",{id:"upk-ue包文件组成",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#upk-ue包文件组成"},[(0,t.Lk)("span",null,"UPK|UE包文件组成")])],-1),De=(0,t.Fv)('<figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>从Unreal Engine 4（UE4）开始，UPK 文件被替代为更先进的Unreal Asset文件格式（.uasset）和Unreal Asset Registry（.uassetregistry）等。 UPK 文件仍然存在于早期版本的Unreal Engine中。<br> 更准确点描述：一个Package是一个文件（.uasset或者.umap），它包含一些可以UE4进行操作和访问的二进制数据文件。</p></blockquote><h2 id="进化" tabindex="-1"><a class="header-anchor" href="#进化"><span>进化</span></a></h2><p>各司其职原本是件好事，随着时间的增加，我们发现这个管理模式会出现很多问题。大帝UEngine忙着管理大局，所有琐碎任务都堆积给我们的Gameinstance这位掌权者身上，导致我们的项目非常难以维护。 <br>如果我们自己重新定义一个管理者Object Manager，又必须非常小心管理这一切。<br> 好钢用在刀刃——显然开发者应该把精力更多的放在游戏性本身。</p><blockquote><p>于是UEngine“东、西厂”出现了！——Subsystem。</p></blockquote><h3 id="subsystem-子系统" tabindex="-1"><a class="header-anchor" href="#subsystem-子系统"><span>Subsystem|子系统</span></a></h3>',6),Re=(0,t.Fv)('<table><thead><tr><th>子系统</th><th>继承自的类</th></tr></thead><tbody><tr><td>引擎子系统</td><td>UEngineSubsystem 类</td></tr><tr><td>编辑器子系统</td><td>UEditorSubsystem 类</td></tr><tr><td>游戏实例子系统</td><td>UGameInstanceSubsystem 类</td></tr><tr><td>本地玩家子系统</td><td>ULocalPlayerSubsystem 类</td></tr></tbody></table><blockquote><p>当引擎子系统的模块加载时，子系统将在模块的 Startup() 函数返回后执行 Initialize()，子系统将在模块的 Shutdown() 函数返回后执行 Deinitialize()。</p></blockquote><figure><img src="'+g+'" alt="目录：EngineSourceRuntimeEnginePublicSubsystems" tabindex="0" loading="lazy"><figcaption>目录：Engine\\Source\\Runtime\\Engine\\Public\\Subsystems\\</figcaption></figure><h2 id="_3-选择蓝图函数库类" tabindex="-1"><a class="header-anchor" href="#_3-选择蓝图函数库类"><span>3. 选择蓝图函数库类</span></a></h2>',4),He=(0,t.Fv)('<figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>因为我们只是想打印一条简单的HelloWorld,又不想挂载在Actor上，最终决定先写在蓝图函数库中。</p></blockquote><h2 id="_4-分析系统生成的cpp文件。" tabindex="-1"><a class="header-anchor" href="#_4-分析系统生成的cpp文件。"><span>4. 分析系统生成的cpp文件。</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>\n\n<span class="token comment">/**\n * \n */</span>\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开TEST.generated.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 版权归 Epic Games, Inc. 所有。保留所有权利。</span>\n<span class="token comment">/*===========================================================================\n\t从UnrealHeaderTool导出的生成代码。\n\t请勿手动修改！请编辑相应的.h文件！\n===========================================================================*/</span>\n\n<span class="token comment">// IWYU pragma: private, include &quot;TEST.h&quot;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ObjectMacros.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/ScriptMacros.h&quot;</span></span>\n\nPRAGMA_DISABLE_DEPRECATION_WARNINGS\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">EXORCIST_TEST_generated_h</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">error</span> <span class="token string">&quot;TEST.generated.h 已经被包含，TEST.h 中缺少 &#39;#pragma once&#39;&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXORCIST_TEST_generated_h</span></span>\n\n<span class="token comment">//后续省略.....</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),Ne=(0,t.Fv)('<h2 id="_5-新建一个helloworld函数" tabindex="-1"><a class="header-anchor" href="#_5-新建一个helloworld函数"><span>5. 新建一个HelloWorld函数</span></a></h2><blockquote><p>TEST.h</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// Fill out your copyright notice in the Description page of Project Settings.</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.generated.h&quot;</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\n\t<span class="token comment">//测试函数打印HelloWorld</span>\n\t\n\t<span class="token comment">//使用UFUNCTION红标记，BlueprintCallable让UE反射系统能够反射成蓝图调用。</span>\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;TEST&quot;</span><span class="token punctuation">)</span>\n\t\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-对应的函数实现输出helloworld" tabindex="-1"><a class="header-anchor" href="#_6-对应的函数实现输出helloworld"><span>6. 对应的函数实现输出HelloWorld</span></a></h2><blockquote><p>可以借助IDE生成对应函数定义。</p></blockquote><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>TEST.cpp</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;TEST.h&quot;</span></span>\n\n<span class="token keyword">void</span> <span class="token class-name">UTEST</span><span class="token double-colon punctuation">::</span><span class="token function">TESTFUNC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\tGEngine<span class="token operator">-&gt;</span><span class="token function">AddOnScreenDebugMessage</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5.f</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Red<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+L+'" alt="ideaicode2.jpg" tabindex="0" loading="lazy"><figcaption>ideaicode2.jpg</figcaption></figure>',9),Ve=(0,t.Lk)("h2",{id:"_6-编译-在关卡蓝图检验。",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_6-编译-在关卡蓝图检验。"},[(0,t.Lk)("span",null,"6. 编译，在关卡蓝图检验。")])],-1),Xe=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:W,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),Ke=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),Ye=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"因为我们的函数中没有加入参数，所以对应生成的蓝图节点也没有输入输出节点。")],-1),Ze=(0,t.Lk)("h2",{id:"_7-运行查看成果",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_7-运行查看成果"},[(0,t.Lk)("span",null,"7.运行查看成果！")])],-1),Je=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),Qe=(0,t.Lk)("h2",{id:"参考链接",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#参考链接"},[(0,t.Lk)("span",null,"参考链接")])],-1),$e=(0,t.Lk)("thead",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("th",null,"大佬")])],-1),ea={href:"https://www.zhihu.com/people/fjz13",target:"_blank",rel:"noopener noreferrer"},aa=(0,t.Lk)("thead",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("th",null,"课程名"),(0,t.Lk)("th",null,"类型"),(0,t.Lk)("th",null,"链接")])],-1),na=(0,t.Lk)("td",null,"2023最新版C++",-1),ta=(0,t.Lk)("td",null,"C++基础",-1),la={href:"https://www.bilibili.com/video/BV1eL41187JS/?spm_id_from=333.999.0.0&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},sa=(0,t.Lk)("td",null,"【Cherno C++】",-1),ia=(0,t.Lk)("td",null,"C++基础",-1),ra={href:"https://www.bilibili.com/video/BV1fP4y1w7iE/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},oa=(0,t.Lk)("td",null,"为游戏编程学习C++",-1),ca=(0,t.Lk)("td",null,"C++基础",-1),da={href:"https://www.bilibili.com/video/BV1Dd4y1R7VS/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},pa=(0,t.Lk)("td",null,"黑马程序员匠心之作",-1),ua=(0,t.Lk)("td",null,"C++教程",-1),ka={href:"https://www.bilibili.com/video/BV1et411b73Z?t=94.0&p=95",target:"_blank",rel:"noopener noreferrer"},ba=(0,t.Lk)("td",null,"字节跳动最新打造的C++教程",-1),ma=(0,t.Lk)("td",null,"C++基础",-1),ha={href:"https://www.bilibili.com/video/BV1ps4y1k7d7/?spm_id_from=333.999.0.0",target:"_blank",rel:"noopener noreferrer"},ga=(0,t.Lk)("td",null,"Udemy宝藏数据结构与算法课",-1),va=(0,t.Lk)("td",null,"C++算法",-1),fa={href:"https://www.bilibili.com/video/BV1Ba411Y71K/?spm_id_from=333.337.top_right_bar_window_custom_collection.content.click",target:"_blank",rel:"noopener noreferrer"},La={},Wa=(0,n(66262).A)(La,[["render",function(e,a){const n=(0,t.g2)("chatmessage"),l=(0,t.g2)("gifwithbutton"),s=(0,t.g2)("ExternalLinkIcon"),i=(0,t.g2)("RouteLink");return(0,t.uX)(),(0,t.CE)("div",null,[U,C,(0,t.bF)(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 1、食用本文前你应该已经了解UE的一些基本操作,包括下载安装、打开工程、资源导入导出、关卡等概念。"),j,(0,t.eW)(" 2、有一定的（C++）编程基础，但不是必须的。"),E,(0,t.eW)(" 3、本章将试图初步了解UE GamePlay架构。"),x,(0,t.eW)(" 4、最终尝试用CPP在我们的屏幕上打印一个HelloWorld。 ")])),_:1}),w,(0,t.bF)(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 什么我不会CPP! ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果你不会CPP建议你去下方查考链接观看CPP基础教程，或者等我的CPP入门介绍篇。 ")])),_:1}),F,q,S,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" BABA用了Rider已经回不去了,如果你用VS这里是将是刷新VS项目。 ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 弹出的窗口让人一脸懵逼！ ")])),_:1}),T,(0,t.bF)(n,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 看不懂，根本看不懂。 ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 虽然看不懂这些东西是干啥的，但细心的你应该发现:"),A,(0,t.eW)(" 所有节点的根目录都来自一个叫Object的东西，这里我们叫它UObject。"),P,(0,t.eW)(" 即：所有XXObject都继承自UObject。 ")])),_:1}),(0,t.bF)(l,{src:"../../assets/unrealgif/newcppclass.gif"}),(0,t.bF)(n,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 你在说啥？啥是UObject？ ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 很好！看来下一步之前需要搞清楚几个基本概念 ")])),_:1}),G,O,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 在 Unreal Engine 中 "),I,(0,t.eW)(" ·UObject几乎是所有对象的基类，包括角色、物体、组件、纹理、材质等等。"),z,(0,t.eW)(" ·UObject 提供了许多基本的功能和特性，例如内存管理、反射（Reflection）、属性系统、蓝图扩展等。"),B])),_:1}),M,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 确实耶！对比蓝图版，C++类中多了许多编辑器类，代码在手为所欲为。 ")])),_:1}),D,R,(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果把UObject理解成混沌之力，凝聚成一个一个对象。现在这些对象只是原始部落时代的人类，没有规则、秩序。 Epicbaba作为造物主，当然需要给自己的UE宇宙制定一些界面准则——GamePlay。 ")])),_:1}),H,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 现在请你暂停阅读，你会怎么制定这些准则，让你的游戏世界正常运作？ ")])),_:1}),N,V,X,(0,t.bF)(n,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 官方你在说啥？我脑子不够用了！ ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 总结成一个基本公式："),K,(0,t.eW)(" 游戏规则 + 3C + 游戏界面 = 基础GamePlay。"),Y])),_:1}),Z,(0,t.Lk)("p",null,[(0,t.Lk)("span",J,[Q,$,ee,(0,t.Lk)("a",ae,[(0,t.eW)("扩展阅读"),(0,t.bF)(s)]),ne,te])]),le,se,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb02.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" GameMode（游戏模式）是一个非常重要的类，它决定了游戏的规则、逻辑和行为。 ")])),_:1}),ie,(0,t.bF)(n,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" Game State 就是指游戏状态。它管理了所有已连接的客户端，并且实时追踪游戏层面的属性并把它们分发给远程客户端。 ")])),_:1}),re,oe,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 3C之一Camera ")])),_:1}),ce,de,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 3C之一Character ")])),_:1}),pe,ue,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 3C之一Controller ")])),_:1}),ke,be,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 比如血条、切枪图标等。 ")])),_:1}),me,he,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 组件 是一种特殊类型的 对象，Actor 可以将组件作为子对象附加到自身。组件适用于共享相同的行为，例如显示视觉表现、播放声音 ")])),_:1}),ge,(0,t.bF)(n,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 记不住根本记不住！这里BABA推荐我看"),ve])),_:1}),fe,Le,(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 现在框架有了好比游戏内剧本、演员、相机等道具都齐活了！可拍摄地呢?导演呢？谁是BOSS? ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 拍摄地当然是要放在世界里啊，当然这个“世界”指的是我们的UWorld。 ")])),_:1}),We,_e,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 可一个世界不一定只有一个国家，像我们真实世界就有好多国家. ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 是的，你口中的好多国家其实就是Ulevel.实际上是受硬件限制，不得不将这个大世界分成若干块，然后按需加载。"),ye,Ue])),_:1}),Ce,je,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 问题又来了！我们玩的很多游戏好像不止一张地图哦！也就是不止一个World!如果玩家去另外一个世界丢失记忆（游戏数据）可不是一件好事。 ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" EPICbaba给我们的UE奈何桥留了个后门-WorldContext，通过WorldContext可以连接各个界面而保持记忆。 ")])),_:1}),Ee,xe,we,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb01.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 似乎我们已经从人界跳脱，来到了其他界面。前文我们讨论了后门-WorldContext的事情，看毕竟这只是一个后门，到底谁能开启掌管这个后门呢？ ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" GameInstance就是这么一个掌权者，管理这些“后门”。 ")])),_:1}),Fe,(0,t.bF)(n,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没错，这就是经典的MVC->数据（Model）、表现（View）、逻辑（Controller） ")])),_:1}),qe,(0,t.bF)(n,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 最终一个由大帝——UEngine掌管的宇宙诞生了。 ")])),_:1}),Se,(0,t.bF)(n,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 说到底还是程序员在管理这些东西，可是“它们”内部之前的矛盾一不小心就会激化。比如：垃圾怎么倒啊！某管理员权限越级啊！ 这时候我们需要介入调和、整顿。 ")])),_:1}),Te,(0,t.bF)(n,{avatar:"../../assets/emoji/hh.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" C++中并没有类似JAVA的反射机制，但EpicBABA的UE引擎已经帮我们实现了。 ")])),_:1}),Ae,(0,t.Lk)("p",null,[(0,t.eW)("可以先参考"),(0,t.Lk)("a",Pe,[(0,t.eW)("官方文档"),(0,t.bF)(s)])]),(0,t.bF)(n,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 简单来说虚幻引擎反射系统 使用宏为提供引擎和编辑器各种功，封装你的类。在使用 虚幻引擎（UE） 时，可以使用标准的C++类、函数和变量。 ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" Baba我不知道什么叫宏耶！ ")])),_:1}),(0,t.Lk)("p",null,[Ge,(0,t.eW)(" 具体的宏标记请"),(0,t.bF)(i,{to:"/unreal/core%5B%E6%A0%B8%E5%BF%83%5D/doc_%E6%96%87%E6%A1%A3_/macro.html"},{default:(0,t.k6)((()=>[(0,t.eW)("阅读我的")])),_:1})]),Oe,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" UHT是一个用于生成C++类和相关代码的预处理器工具，它将特定的宏和标记解析成C++代码，以便在编译时构建项目。大致流程如下： ")])),_:1}),Ie,(0,t.Lk)("p",null,[(0,t.eW)("图片截取自"),(0,t.Lk)("a",ze,[(0,t.eW)("图片截取自ARRG从入门到进阶P36"),(0,t.bF)(s)])]),Be,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (7).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 解决完这些矛盾、纠纷后怎么保存我们建立的”宇宙“呢？ ")])),_:1}),(0,t.bF)(n,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 不得不引入一个叫做资源打包的概念。 ")])),_:1}),Me,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (7).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" Unreal Package 文件，它是Unreal Engine（虚幻引擎）中用于存储游戏资源和数据的一种文件格式。 ")])),_:1}),De,(0,t.bF)(n,{avatar:"../../assets/emoji/hh.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 子系统是一组在整个引擎中提供特定功能的类和接口，它们可以独立于Gameplay存在并提供额外的功能和服务。后续会有实践篇，更加深入体验一下。 ")])),_:1}),Re,(0,t.bF)(n,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 是不是已经快要忘记咱们的主线任务啦！ ")])),_:1}),He,(0,t.bF)(n,{avatar:"../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 之前我们已经介绍过UHT,通过观察，UHT确实将一些宏标记”翻译“成具体代码提交给了编译器。 ")])),_:1}),Ne,(0,t.bF)(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 再次安利一波AI补全插件，只需记住类的开头基本都能补出来！ ")])),_:1}),Ve,Xe,(0,t.bF)(n,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 我们之前命名为TESTFUNC，分组在TEST已经成功映射到蓝图中了！ ")])),_:1}),Ke,Ye,Ze,(0,t.bF)(n,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 点击播放后，窗口中也成功打印红色的hello world! ")])),_:1}),Je,Qe,(0,t.Lk)("table",null,[$e,(0,t.Lk)("tbody",null,[(0,t.Lk)("tr",null,[(0,t.Lk)("td",null,[(0,t.Lk)("strong",null,[(0,t.Lk)("a",ea,[(0,t.eW)(" 知乎大钊"),(0,t.bF)(s)])])])])])]),(0,t.Lk)("table",null,[aa,(0,t.Lk)("tbody",null,[(0,t.Lk)("tr",null,[na,ta,(0,t.Lk)("td",null,[(0,t.Lk)("a",la,[(0,t.eW)("链接"),(0,t.bF)(s)])])]),(0,t.Lk)("tr",null,[sa,ia,(0,t.Lk)("td",null,[(0,t.Lk)("a",ra,[(0,t.eW)("链接"),(0,t.bF)(s)])])]),(0,t.Lk)("tr",null,[oa,ca,(0,t.Lk)("td",null,[(0,t.Lk)("a",da,[(0,t.eW)("链接"),(0,t.bF)(s)])])]),(0,t.Lk)("tr",null,[pa,ua,(0,t.Lk)("td",null,[(0,t.Lk)("a",ka,[(0,t.eW)("链接"),(0,t.bF)(s)])])]),(0,t.Lk)("tr",null,[ba,ma,(0,t.Lk)("td",null,[(0,t.Lk)("a",ha,[(0,t.eW)("链接"),(0,t.bF)(s)])])]),(0,t.Lk)("tr",null,[ga,va,(0,t.Lk)("td",null,[(0,t.Lk)("a",fa,[(0,t.eW)("链接"),(0,t.bF)(s)])])])])])])}]]),_a=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html","title":"c1.GamePlay|导言","lang":"zh-CN","frontmatter":{"title":"c1.GamePlay|导言","order":1,"category":["u++"],"description":"天地除开，诞生了第一缕UObject，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。 导读 UE启动 心血来潮！我要自己搞一...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c1.GamePlay|导言"}],["meta",{"property":"og:description","content":"天地除开，诞生了第一缕UObject，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。 有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。 导读 UE启动 心血来潮！我要自己搞一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T18:34:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-03T18:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c1.GamePlay|导言\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T18:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"导读","slug":"导读","link":"#导读","children":[]},{"level":2,"title":"UE启动","slug":"ue启动","link":"#ue启动","children":[]},{"level":2,"title":"1. 新建一个CPP工程","slug":"_1-新建一个cpp工程","link":"#_1-新建一个cpp工程","children":[]},{"level":2,"title":"2.添加第一个C++类","slug":"_2-添加第一个c-类","link":"#_2-添加第一个c-类","children":[]},{"level":2,"title":"UObject|UE对象","slug":"uobject-ue对象","link":"#uobject-ue对象","children":[]},{"level":2,"title":"UE-GamePlay架构","slug":"ue-gameplay架构","link":"#ue-gameplay架构","children":[{"level":3,"title":"①GamePlay->GameMode","slug":"_1gameplay-gamemode","link":"#_1gameplay-gamemode","children":[]},{"level":3,"title":"② GameState|游戏状态","slug":"_2-gamestate-游戏状态","link":"#_2-gamestate-游戏状态","children":[]},{"level":3,"title":"③ Camera|游戏相机","slug":"_3-camera-游戏相机","link":"#_3-camera-游戏相机","children":[]},{"level":3,"title":"④ Character|游戏角色","slug":"_4-character-游戏角色","link":"#_4-character-游戏角色","children":[]},{"level":3,"title":"⑤ Controller|控制器","slug":"_5-controller-控制器","link":"#_5-controller-控制器","children":[]},{"level":3,"title":"⑥ GameUI|游戏UI","slug":"_6-gameui-游戏ui","link":"#_6-gameui-游戏ui","children":[]},{"level":3,"title":"Component|组件","slug":"component-组件","link":"#component-组件","children":[]},{"level":3,"title":"UWorld|游戏世界","slug":"uworld-游戏世界","link":"#uworld-游戏世界","children":[]},{"level":3,"title":"ULevel|游戏关卡","slug":"ulevel-游戏关卡","link":"#ulevel-游戏关卡","children":[]},{"level":3,"title":"WorldContext|世界上下文","slug":"worldcontext-世界上下文","link":"#worldcontext-世界上下文","children":[]}]},{"level":2,"title":"掌权者","slug":"掌权者","link":"#掌权者","children":[{"level":3,"title":"GameInstance|游戏实例","slug":"gameinstance-游戏实例","link":"#gameinstance-游戏实例","children":[]}]},{"level":2,"title":"大帝","slug":"大帝","link":"#大帝","children":[{"level":3,"title":"UEngine|虚幻游戏引擎","slug":"uengine-虚幻游戏引擎","link":"#uengine-虚幻游戏引擎","children":[]}]},{"level":2,"title":"真神","slug":"真神","link":"#真神","children":[{"level":3,"title":"UE-Refection|UE反射","slug":"ue-refection-ue反射","link":"#ue-refection-ue反射","children":[]},{"level":3,"title":"UHT|Unreal Header Tool（虚幻头文件工具）","slug":"uht-unreal-header-tool-虚幻头文件工具","link":"#uht-unreal-header-tool-虚幻头文件工具","children":[]},{"level":3,"title":"UPK|UE包文件组成","slug":"upk-ue包文件组成","link":"#upk-ue包文件组成","children":[]}]},{"level":2,"title":"进化","slug":"进化","link":"#进化","children":[{"level":3,"title":"Subsystem|子系统","slug":"subsystem-子系统","link":"#subsystem-子系统","children":[]}]},{"level":2,"title":"3. 选择蓝图函数库类","slug":"_3-选择蓝图函数库类","link":"#_3-选择蓝图函数库类","children":[]},{"level":2,"title":"4. 分析系统生成的cpp文件。","slug":"_4-分析系统生成的cpp文件。","link":"#_4-分析系统生成的cpp文件。","children":[]},{"level":2,"title":"5. 新建一个HelloWorld函数","slug":"_5-新建一个helloworld函数","link":"#_5-新建一个helloworld函数","children":[]},{"level":2,"title":"6. 对应的函数实现输出HelloWorld","slug":"_6-对应的函数实现输出helloworld","link":"#_6-对应的函数实现输出helloworld","children":[]},{"level":2,"title":"6. 编译，在关卡蓝图检验。","slug":"_6-编译-在关卡蓝图检验。","link":"#_6-编译-在关卡蓝图检验。","children":[]},{"level":2,"title":"7.运行查看成果！","slug":"_7-运行查看成果","link":"#_7-运行查看成果","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1704306851000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":13.95,"words":4184},"filePathRelative":"unreal/core[核心]/1-Gameplay.md","localizedDate":"2024年1月3日","excerpt":"<blockquote>\\n<p>天地除开，诞生了第一缕<code>UObject</code>，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。<br>\\n有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。</p>\\n</blockquote>\\n","autoDesc":true}')}}]);