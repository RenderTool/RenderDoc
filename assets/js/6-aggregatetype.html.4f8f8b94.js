"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1434],{94438:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>o,data:()=>l});var e=s(20641);const t=s.p+"assets/img/cpp001.91a62a3e.png",p=(0,e.Fv)('<h3 id="聚合类型的定义" tabindex="-1"><a class="header-anchor" href="#聚合类型的定义"><span>聚合类型的定义</span></a></h3><p>根据C++标准，一个类型如果满足以下所有条件，则称为聚合类型：</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><h4 id="简单结构体作为聚合类型" tabindex="-1"><a class="header-anchor" href="#简单结构体作为聚合类型"><span>简单结构体作为聚合类型</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyStruct s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 列表初始化</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>MyStruct</code> 是一个聚合类型，因为它满足所有的条件：没有构造函数、所有成员都是公共的、没有虚函数、没有基类。</p><h4 id="非聚合类型示例" tabindex="-1"><a class="header-anchor" href="#非聚合类型示例"><span>非聚合类型示例</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">NonAggregate</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token comment">// 私有成员</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">NonAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 用户提供的构造函数</span>\n    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 虚函数</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">struct</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">NonAggregate</span></span> <span class="token punctuation">{</span> <span class="token comment">// 继承</span>\n    <span class="token keyword">double</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>NonAggregate</code> 和 <code>Derived</code> 都不是聚合类型，因为它们不满足聚合类型的条件。</p><h3 id="聚合类型的优点" tabindex="-1"><a class="header-anchor" href="#聚合类型的优点"><span>聚合类型的优点</span></a></h3><ol><li><p><strong>易于初始化</strong>：</p><ul><li>聚合类型可以使用列表初始化（brace-enclosed initializer lists），使得对象的初始化更加简洁和直观。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nPoint p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 列表初始化</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>高效</strong>：</p><ul><li>由于聚合类型通常只包含数据成员，不包含复杂的构造函数、析构函数或虚函数，它们的创建和销毁成本较低。</li></ul></li><li><p><strong>直观的数据结构</strong>：</p><ul><li>聚合类型非常适合用来表示简单的数据结构，如配置参数、坐标点、复数等。</li></ul></li></ol><h3 id="使用聚合类型的注意事项" tabindex="-1"><a class="header-anchor" href="#使用聚合类型的注意事项"><span>使用聚合类型的注意事项</span></a></h3><p>尽管聚合类型简单高效，但也有一些使用注意事项：</p><ol><li><p><strong>访问控制</strong>：</p><ul><li>由于聚合类型的所有非静态数据成员必须是公共的，不能直接控制数据成员的访问权限，这在某些情况下可能会带来问题。</li></ul></li><li><p><strong>扩展性</strong>：</p><ul><li>聚合类型不支持继承和多态，因此在需要扩展功能时可能不适合。</li></ul></li><li><p><strong>初始化顺序</strong>：</p><ul><li>列表初始化的顺序必须与类型声明中数据成员的顺序一致，否则会导致编译错误或未定义行为。</li></ul></li></ol>',15),c={},o=(0,s(66262).A)(c,[["render",function(n,a){const s=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 什么是聚合类型？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 通常指具有简单数据结构且不包含复杂成员函数的类型。 聚合类型的特点使得它们易于初始化，并且在许多情况下可以直接使用大括号进行列表初始化。 ")])),_:1}),p])}]]),l=JSON.parse('{"path":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html","title":"c++6.聚合类型（aggregate type）","lang":"zh-CN","frontmatter":{"title":"c++6.聚合类型（aggregate type）","order":6,"category":["c++"],"description":"聚合类型的定义 根据C++标准，一个类型如果满足以下所有条件，则称为聚合类型： 示例 简单结构体作为聚合类型 在这个示例中，MyStruct 是一个聚合类型，因为它满足所有的条件：没有构造函数、所有成员都是公共的、没有虚函数、没有基类。 非聚合类型示例 在这个示例中，NonAggregate 和 Derived 都不是聚合类型，因为它们不满足聚合类型的...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++6.聚合类型（aggregate type）"}],["meta",{"property":"og:description","content":"聚合类型的定义 根据C++标准，一个类型如果满足以下所有条件，则称为聚合类型： 示例 简单结构体作为聚合类型 在这个示例中，MyStruct 是一个聚合类型，因为它满足所有的条件：没有构造函数、所有成员都是公共的、没有虚函数、没有基类。 非聚合类型示例 在这个示例中，NonAggregate 和 Derived 都不是聚合类型，因为它们不满足聚合类型的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-03T22:22:12.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-08-03T22:22:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++6.聚合类型（aggregate type）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-08-03T22:22:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"聚合类型的定义","slug":"聚合类型的定义","link":"#聚合类型的定义","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"聚合类型的优点","slug":"聚合类型的优点","link":"#聚合类型的优点","children":[]},{"level":3,"title":"使用聚合类型的注意事项","slug":"使用聚合类型的注意事项","link":"#使用聚合类型的注意事项","children":[]}],"git":{"createdTime":1722723732000,"updatedTime":1722723732000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.02,"words":605},"filePathRelative":"language/cpp/new[新特性]/6-aggregatetype.md","localizedDate":"2024年8月3日","excerpt":"\\n\\n<h3>聚合类型的定义</h3>\\n<p>根据C++标准，一个类型如果满足以下所有条件，则称为聚合类型：</p>\\n<figure><figcaption></figcaption></figure>\\n<h3>示例</h3>\\n<h4>简单结构体作为聚合类型</h4>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">MyStruct</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">double</span> y<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    MyStruct s <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2.0</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 列表初始化</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);