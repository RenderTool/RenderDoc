"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4883],{93654:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>L,data:()=>f});var e=a(20641);const t=a.p+"assets/img/dequevector.b8a77be4.png",o=a.p+"assets/img/dequesx.89cfeb3a.png",p=(0,e.Lk)("h3",{id:"deque",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#deque"},[(0,e.Lk)("span",null,"deque")])],-1),l=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),c=(0,e.Lk)("h3",{id:"std-deque-定义",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#std-deque-定义"},[(0,e.Lk)("span",null,[(0,e.Lk)("code",null,"std::deque"),(0,e.eW)(" 定义：")])])],-1),i=(0,e.Lk)("p",null,[(0,e.Lk)("code",null,"std::deque"),(0,e.eW)("（双端队列Double Ended Queue）是 C++ 标准库中的容器，它允许在两端高效地进行插入和删除操作。")],-1),u=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},"<deque>")]),(0,e.eW)("\n\nstd"),(0,e.Lk)("span",{class:"token double-colon punctuation"},"::"),(0,e.eW)("deque"),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.Lk)("span",{class:"token keyword"},"int"),(0,e.Lk)("span",{class:"token operator"},">"),(0,e.eW)(" myDeque"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)(),(0,e.Lk)("span",{class:"token comment"},"// 创建一个存储 int 类型的双端队列"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),r=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"template"),(0,e.eW)(),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"T"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"Alloc"),(0,e.eW)(),(0,e.Lk)("span",{class:"token operator"},"="),(0,e.eW)(" allocator"),(0,e.Lk)("span",{class:"token operator"},"<"),(0,e.eW)("T"),(0,e.Lk)("span",{class:"token operator"},">"),(0,e.eW)(),(0,e.Lk)("span",{class:"token operator"},">"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"deque"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"})])],-1),d=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),k=(0,e.Lk)("p",null,[(0,e.eW)("看来你还是停留在普通数组的for遍历实现阶段上，咱们已经说了几乎每个容器都有自己的迭代器，"),(0,e.Lk)("code",null,"std::deque"),(0,e.eW)(" 也提供了迭代器（iterator）来进行遍历，迭代器会隐藏底层的实现细节，使得用户无需关心具体的内存结构。")],-1),g=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myDeque <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用迭代器遍历</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myDeque<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myDeque<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),m=(0,e.Lk)("p",null,[(0,e.eW)("顺带提的是，"),(0,e.Lk)("code",null,"deque"),(0,e.eW)("由于用到了中控器，意味着他的执行访问效率是没有"),(0,e.Lk)("code",null,"vector"),(0,e.eW)("高的。")],-1),v=(0,e.Fv)('<h3 id="deque-vs-ector" tabindex="-1"><a class="header-anchor" href="#deque-vs-ector"><span>deque VS ector</span></a></h3><ol><li><p><strong>动态内存管理</strong>：</p><ul><li><strong><code>std::vector</code></strong>：<code>std::vector</code> 是一个动态数组，元素存储在连续的内存块中，只能在数组的末尾进行快速的插入和删除。当容量不足时，可能需要重新分配内存。</li><li><strong><code>std::deque</code></strong>：<code>std::deque</code> 也是动态数组，但它允许在两端进行快速的插入和删除操作。<code>std::deque</code> 使用块状分配内存，每个块中包含多个元素，这有助于减少重新分配内存的次数。</li></ul></li><li><p><strong>内存结构</strong>：</p><ul><li><strong><code>std::vector</code></strong>：元素在内存中是连续存储的，因此访问元素的速度较快。</li><li><strong><code>std::deque</code></strong>：元素可能存储在多个块中，因此内存不一定是连续的。但由于块的数量相对较小，访问元素的速度仍然可以维持在一个合理的范围内。</li></ul></li><li><p><strong>效率</strong>：</p><ul><li><strong><code>std::vector</code></strong>：在末尾进行操作的效率非常高，但在头部进行插入和删除时可能比较慢，因为需要移动大量元素。</li><li><strong><code>std::deque</code></strong>：在两端进行操作的效率都比较高，因为它使用了块状分配，减少了元素的移动。</li></ul></li><li><p><strong>迭代器的失效问题</strong>：</p><ul><li><strong><code>std::vector</code></strong>：由于元素的连续存储，插入或删除元素可能导致迭代器失效。</li><li><strong><code>std::deque</code></strong>：在两端进行插入或删除不会导致迭代器失效，因为块之间的元素位置关系不会改变。</li></ul></li></ol><h3 id="中控区" tabindex="-1"><a class="header-anchor" href="#中控区"><span>中控区</span></a></h3>',3),b=(0,e.Lk)("p",null,[(0,e.eW)("中控区（Controller）是 "),(0,e.Lk)("code",null,"std::deque"),(0,e.eW)(" 内部用于管理块状结构的一个组件。它本质上是一个数据结构，用于维护对块的引用以及块之间的连接关系。")],-1),q=(0,e.Lk)("ol",null,[(0,e.Lk)("li",null,[(0,e.Lk)("strong",null,"指向前端块的指针（Front Block Pointer）："),(0,e.eW)(" 指向双端队列的前端块。")]),(0,e.Lk)("li",null,[(0,e.Lk)("strong",null,"指向后端块的指针（Back Block Pointer）："),(0,e.eW)(" 指向双端队列的后端块。")]),(0,e.Lk)("li",null,[(0,e.Lk)("strong",null,"块的数量信息："),(0,e.eW)(" 记录了整个 "),(0,e.Lk)("code",null,"std::deque"),(0,e.eW)(" 中有多少块。")])],-1),h={},L=(0,a(66262).A)(h,[["render",function(n,s){const a=(0,e.g2)("chatmessage"),t=(0,e.g2)("CodeTabs");return(0,e.uX)(),(0,e.CE)("div",null,[p,(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 前面我们提到了vector是单端数组，遵循左闭右开，那么有没有两边都能插入元素的数组？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 还真有，deque就是一个。 ")])),_:1}),l,c,(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[i])),_:1}),(0,e.bF)(t,{id:"16",data:[{id:"实例化"},{id:"标准库中的定义"}],"tab-id":"language"},{title0:(0,e.k6)((({value:n,isActive:s})=>[(0,e.eW)("实例化")])),title1:(0,e.k6)((({value:n,isActive:s})=>[(0,e.eW)("标准库中的定义")])),tab0:(0,e.k6)((({value:n,isActive:s})=>[u])),tab1:(0,e.k6)((({value:n,isActive:s})=>[r])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我不理解，vector是连续内存空间，导致不能头部插入新元素，那么deque却可以，他是如何实现的呢？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 因为他用到了中控器（controller）来管理块状结构。这个中控器负责维护对块的引用以及块之间的连接关系。每个块内部的元素是连续存储的，但不同块之间的元素不一定是连续的。 ")])),_:1}),d,(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 问题来了，那么我怎么遍历呢？你都不是连续空间了！ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:(0,e.k6)((()=>[k])),_:1}),g,(0,e.bF)(a,{avatar:"../../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:(0,e.k6)((()=>[m])),_:1}),v,(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我还是不理解中控区是什么？ ")])),_:1}),(0,e.bF)(a,{avatar:"../../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:(0,e.k6)((()=>[b])),_:1}),q])}]]),f=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html","title":"c++4.deque容器","lang":"zh-CN","frontmatter":{"title":"c++4.deque容器","order":4,"category":["c++"],"description":"deque std::deque 定义： deque VS ector 动态内存管理： std::vector：std::vector 是一个动态数组，元素存储在连续的内存块中，只能在数组的末尾进行快速的插入和删除。当容量不足时，可能需要重新分配内存。 std::deque：std::deque 也是动态数组，但它允许在两端进行快速的插入和删除操作。s...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++4.deque容器"}],["meta",{"property":"og:description","content":"deque std::deque 定义： deque VS ector 动态内存管理： std::vector：std::vector 是一个动态数组，元素存储在连续的内存块中，只能在数组的末尾进行快速的插入和删除。当容量不足时，可能需要重新分配内存。 std::deque：std::deque 也是动态数组，但它允许在两端进行快速的插入和删除操作。s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++4.deque容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"deque","slug":"deque","link":"#deque","children":[]},{"level":3,"title":"std::deque 定义：","slug":"std-deque-定义","link":"#std-deque-定义","children":[]},{"level":3,"title":"deque VS ector","slug":"deque-vs-ector","link":"#deque-vs-ector","children":[]},{"level":3,"title":"中控区","slug":"中控区","link":"#中控区","children":[]}],"git":{"createdTime":1703074087000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.34,"words":1003},"filePathRelative":"language/cpp/stl[标准模板]/4-deque.md","localizedDate":"2023年12月20日","excerpt":"<h3>deque</h3>\\n\\n\\n<figure><figcaption></figcaption></figure>\\n<h3><code>std::deque</code> 定义：</h3>\\n\\n\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;deque&gt;</span></span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>deque<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> myDeque <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">4</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 使用迭代器遍历</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>std<span class=\\"token double-colon punctuation\\">::</span>deque<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span><span class=\\"token double-colon punctuation\\">::</span>iterator it <span class=\\"token operator\\">=</span> myDeque<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">begin</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> it <span class=\\"token operator\\">!=</span> myDeque<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">end</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token operator\\">++</span>it<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token operator\\">*</span>it <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);