"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1808],{57322:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>x,data:()=>T});var e=s(20641);const t=s.p+"assets/img/serverrpc001.55ceab92.png",i=s.p+"assets/img/serverrpc003.78a09f7f.png",p=s.p+"assets/img/serverrpc002.4428d935.png",l=s.p+"assets/img/serverrpc004.0c708391.png",o=s.p+"assets/img/serverrpc006.3262cd98.png",c=s.p+"assets/img/serverrpc007.4d5499cd.png",r=s.p+"assets/img/serverrpc008.17d87b3c.png",d=s.p+"assets/img/serverrpc009.991b4240.jpg",u=s.p+"assets/img/serverrpc010.bff5d801.jpg",k=s.p+"assets/img/serverrpc011.86278f18.png",g=s.p+"assets/img/serverrpc012.a4b54ab8.png",v=(0,e.Lk)("h2",{id:"本章概要",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#本章概要"},[(0,e.Lk)("span",null,"本章概要")])],-1),h=(0,e.Lk)("p",null,"ReplicatedUsing同步触发条件 蓝图和C++的区别",-1),m=(0,e.Lk)("h2",{id:"问题",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#问题"},[(0,e.Lk)("span",null,"问题")])],-1),f=(0,e.Fv)('<h3 id="_1-准备一个组件设置为可复制" tabindex="-1"><a class="header-anchor" href="#_1-准备一个组件设置为可复制"><span>1. 准备一个组件设置为可复制</span></a></h3><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-新建一个数组变量-并且使用replicatedusing标记为可复制。" tabindex="-1"><a class="header-anchor" href="#_2-新建一个数组变量-并且使用replicatedusing标记为可复制。"><span>2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。</span></a></h3><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-增加1个rpc-标记为server执行-用于添加内容到数组" tabindex="-1"><a class="header-anchor" href="#_3-增加1个rpc-标记为server执行-用于添加内容到数组"><span>3. 增加1个RPC，标记为Server执行，用于添加内容到数组</span></a></h3><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-客户端-服务端上触发函数" tabindex="-1"><a class="header-anchor" href="#_4-客户端-服务端上触发函数"><span>4. 客户端/服务端上触发函数</span></a></h3><p><a href="..%2Fassets%2Fserverrpc005.png"></a></p>',9),b=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),y=(0,e.Fv)('<h3 id="_5-增加1个rpc-标记为server执行-用于修改数组里的内容。" tabindex="-1"><a class="header-anchor" href="#_5-增加1个rpc-标记为server执行-用于修改数组里的内容。"><span>5.增加1个RPC，标记为Server执行，用于修改数组里的内容。</span></a></h3><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-运行" tabindex="-1"><a class="header-anchor" href="#_6-运行"><span>6.运行</span></a></h3><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',4),_=(0,e.Fv)('<figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><h3 id="_1-本地使用tick监听数组" tabindex="-1"><a class="header-anchor" href="#_1-本地使用tick监听数组"><span>1. 本地使用Tick监听数组</span></a></h3>',4),R=(0,e.Fv)('<h3 id="_2-使用临时变量传递一次-触发数组变量改变。" tabindex="-1"><a class="header-anchor" href="#_2-使用临时变量传递一次-触发数组变量改变。"><span>2. 使用临时变量传递一次，触发数组变量改变。</span></a></h3><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-用其他变量代替。" tabindex="-1"><a class="header-anchor" href="#_3-用其他变量代替。"><span>3. 用其他变量代替。</span></a></h3><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-c-pushmodel" tabindex="-1"><a class="header-anchor" href="#_4-c-pushmodel"><span>4.C++ PushModel</span></a></h3>',5),A=(0,e.Lk)("p",null,[(0,e.Lk)("code",null,"PushModel"),(0,e.eW)(" 机制时，复制系统依赖于开发者明确标记属性为脏来触发网络复制。这意味着即使属性发生了变化，如果没有手动标记，系统不会将其复制到客户端。")],-1),P=(0,e.Fv)('<ol><li><strong>引入必要的头文件</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Net/UnrealNetwork.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Net/Core/PushModel/PushModel.h&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>定义类和属性</strong></li></ol><p>定义属性，确保被标记为可复制，并使用 <code>ReplicatedUsing</code> 指定相应的通知函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameFramework/Actor.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;YourClass.generated.h&quot;</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">YOURPROJECT_API</span> AYourClass <span class="token operator">:</span> <span class="token keyword">public</span> AActor\n<span class="token punctuation">{</span>\n    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">AYourClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">protected</span><span class="token operator">:</span>\n    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>ReplicatedUsing <span class="token operator">=</span> OnRep_Array<span class="token punctuation">)</span>\n    TArray<span class="token operator">&lt;</span>AActor<span class="token operator">*</span><span class="token operator">&gt;</span> ReplicatedArray<span class="token punctuation">;</span>\n\n    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">OnRep_Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">,</span> WithValidation<span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">ServerModifyArray</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> NewActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>实现复制通知函数</strong></li></ol><p>实现 <code>OnRep_Array</code> 和 <code>OnRep_ArrayTrigger</code> 函数。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AYourClass</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 处理数组变化后的逻辑</span>\n    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Array has been replicated!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token class-name">AYourClass</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    FDoRepLifetimeParams SharedParams<span class="token punctuation">;</span>\n\tSharedParams<span class="token punctuation">.</span>bIsPushBased <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">DOREPLIFETIME_WITH_PARAMS_FAST</span><span class="token punctuation">(</span>AYourClass<span class="token punctuation">,</span> ReplicatedArray<span class="token punctuation">,</span> SharedParams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>手动标记属性为脏</strong></li></ol><p>在修改数组内容时，使用 <code>PushModel</code> 手动标记属性为脏。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AYourClass</span><span class="token double-colon punctuation">::</span><span class="token function">ServerModifyArray</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> NewActor<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 修改数组内容</span>\n        MyReplicatedArray<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>NewActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 手动标记数组属性为脏</span>\n        <span class="token function">MARK_PROPERTY_DIRTY_FROM_NAME</span><span class="token punctuation">(</span>AYourClass<span class="token punctuation">,</span> ReplicatedArray<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2>',12),w={href:"https://forums.unrealengine.com/t/push-model-networking/510684",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.kierannewland.co.uk/2024/01/15/push-model-networking-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},C={},x=(0,s(66262).A)(C,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("gifwithbutton"),i=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[v,h,m,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" BABA!ReplicatedUsing到底怎么用？为什么我修改了某个背包中的物体堆叠数后并没有触发ReplicatedUsing函数？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 别急，我们先来用简单的Demo复刻一下你的问题 ")])),_:1}),f,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 无论是客户端还是服务端触发这个RPC，只要修改了数组内容都会触发ReplicatedUsing。提到了ReplicatedUsing我们来复习一下 ReplicatedUsing定义 ")])),_:1}),b,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 现在回到我们的问题，如果我们不去修改这个数组，而是改变数组中的变量会发生什么？ ")])),_:1}),y,(0,e.bF)(t,{src:"../../assets/unrealgif/hpup39.gif"}),(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 对对对！就是这样！后面无论怎么重复触发都不会打印改变的信息。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 数组这个变量只有在发生改变时才会触发复制，但数组内成员对象内的成员变量修改并不会触发数组这个变量变化。 ")])),_:1}),_,(0,e.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这个方案好像挺方便！就是挺消耗性能。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 是的Tick的方法可以一直检测数组，相当于每个Tick都在更新数组 ")])),_:1}),R,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[A])),_:1}),P,(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,[(0,e.Lk)("a",w,[(0,e.eW)(" 官方论坛"),(0,e.bF)(i)])])]),(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,[(0,e.Lk)("a",L,[(0,e.eW)("大佬博客"),(0,e.bF)(i)])])])])}]]),T=JSON.parse('{"path":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html","title":"NT-2.3.2|网络同步PushModel","lang":"zh-CN","frontmatter":{"title":"NT-2.3.2|网络同步PushModel","order":26,"category":["unreal"],"description":"本章概要 ReplicatedUsing同步触发条件 蓝图和C++的区别 问题 1. 准备一个组件设置为可复制 2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。 3. 增加1个RPC，标记为Server执行，用于添加内容到数组 4. 客户端/服务端上触发函数 5.增加1个RPC，标记为Server执行，用于修改数组里的内容。...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"NT-2.3.2|网络同步PushModel"}],["meta",{"property":"og:description","content":"本章概要 ReplicatedUsing同步触发条件 蓝图和C++的区别 问题 1. 准备一个组件设置为可复制 2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。 3. 增加1个RPC，标记为Server执行，用于添加内容到数组 4. 客户端/服务端上触发函数 5.增加1个RPC，标记为Server执行，用于修改数组里的内容。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-25T23:34:33.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-10-25T23:34:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NT-2.3.2|网络同步PushModel\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-25T23:34:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"本章概要","slug":"本章概要","link":"#本章概要","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[{"level":3,"title":"1. 准备一个组件设置为可复制","slug":"_1-准备一个组件设置为可复制","link":"#_1-准备一个组件设置为可复制","children":[]},{"level":3,"title":"2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。","slug":"_2-新建一个数组变量-并且使用replicatedusing标记为可复制。","link":"#_2-新建一个数组变量-并且使用replicatedusing标记为可复制。","children":[]},{"level":3,"title":"3. 增加1个RPC，标记为Server执行，用于添加内容到数组","slug":"_3-增加1个rpc-标记为server执行-用于添加内容到数组","link":"#_3-增加1个rpc-标记为server执行-用于添加内容到数组","children":[]},{"level":3,"title":"4. 客户端/服务端上触发函数","slug":"_4-客户端-服务端上触发函数","link":"#_4-客户端-服务端上触发函数","children":[]},{"level":3,"title":"5.增加1个RPC，标记为Server执行，用于修改数组里的内容。","slug":"_5-增加1个rpc-标记为server执行-用于修改数组里的内容。","link":"#_5-增加1个rpc-标记为server执行-用于修改数组里的内容。","children":[]},{"level":3,"title":"6.运行","slug":"_6-运行","link":"#_6-运行","children":[]}]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[{"level":3,"title":"1. 本地使用Tick监听数组","slug":"_1-本地使用tick监听数组","link":"#_1-本地使用tick监听数组","children":[]},{"level":3,"title":"2. 使用临时变量传递一次，触发数组变量改变。","slug":"_2-使用临时变量传递一次-触发数组变量改变。","link":"#_2-使用临时变量传递一次-触发数组变量改变。","children":[]},{"level":3,"title":"3. 用其他变量代替。","slug":"_3-用其他变量代替。","link":"#_3-用其他变量代替。","children":[]},{"level":3,"title":"4.C++ PushModel","slug":"_4-c-pushmodel","link":"#_4-c-pushmodel","children":[]}]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]}],"git":{"createdTime":1722723732000,"updatedTime":1729899273000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":2.73,"words":820},"filePathRelative":"unreal/network[网络]/2.3.2-GamePlayNetWork.md","localizedDate":"2024年8月3日","excerpt":"<h2>本章概要</h2>\\n<p>ReplicatedUsing同步触发条件\\n蓝图和C++的区别</p>\\n<h2>问题</h2>\\n\\n\\n<h3>1. 准备一个组件设置为可复制</h3>\\n<figure><figcaption></figcaption></figure>\\n<figure><figcaption></figcaption></figure>\\n<h3>2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。</h3>\\n<figure><figcaption></figcaption></figure>\\n<h3>3. 增加1个RPC，标记为Server执行，用于添加内容到数组</h3>","autoDesc":true}')}}]);