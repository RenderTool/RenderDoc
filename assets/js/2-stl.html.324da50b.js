"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[9264],{63803:(t,d,r)=>{r.r(d),r.d(d,{comp:()=>s,data:()=>i});var n=r(20641);const e=(0,n.Lk)("h3",{id:"stl",tabindex:"-1"},[(0,n.Lk)("a",{class:"header-anchor",href:"#stl"},[(0,n.Lk)("span",null,"STL")])],-1),a=(0,n.Fv)('<h3 id="核心组件" tabindex="-1"><a class="header-anchor" href="#核心组件"><span>核心组件</span></a></h3><table><thead><tr><th>类别</th><th>组件</th><th>描述</th></tr></thead><tbody><tr><td>容器（Containers）</td><td>vector</td><td>动态数组，支持快速随机访问和尾部插入操作。</td></tr><tr><td></td><td>list</td><td>双向链表，支持在任意位置插入和删除操作。</td></tr><tr><td></td><td>deque</td><td>双端队列，支持在两端快速插入和删除操作。</td></tr><tr><td></td><td>queue</td><td>队列，先进先出（FIFO）数据结构。</td></tr><tr><td></td><td>stack</td><td>栈，后进先出（LIFO）数据结构。</td></tr><tr><td></td><td>set</td><td>集合，元素唯一，有序。</td></tr><tr><td></td><td>map</td><td>映射，键-值对的集合，键唯一，有序。</td></tr><tr><td></td><td>unordered_set</td><td>无序集合，元素唯一。</td></tr><tr><td></td><td>unordered_map</td><td>无序映射，键-值对的集合，键唯一。</td></tr><tr><td></td><td>stack</td><td>栈，后进先出（LIFO）数据结构。</td></tr><tr><td>迭代器（Iterators）</td><td>input_iterator</td><td>用于遍历序列的输入迭代器。</td></tr><tr><td></td><td>output_iterator</td><td>用于向序列写入的输出迭代器。</td></tr><tr><td></td><td>forward_iterator</td><td>单向遍历序列的迭代器，支持逐个增加。</td></tr><tr><td></td><td>bidirectional_iterator</td><td>双向遍历序列的迭代器，支持逐个增加或逐个减少。</td></tr><tr><td></td><td>random_access_iterator</td><td>随机访问序列的迭代器，支持直接跳跃访问。</td></tr><tr><td>算法（Algorithms）</td><td>sort</td><td>对序列进行排序。</td></tr><tr><td></td><td>find</td><td>在序列中查找特定元素。</td></tr><tr><td></td><td>transform</td><td>对序列进行变换操作。</td></tr><tr><td></td><td>accumulate</td><td>计算序列元素的累积值。</td></tr><tr><td></td><td>for_each</td><td>对序列的每个元素执行指定操作。</td></tr><tr><td>适配器（Adapters）</td><td>stack</td><td>适配器，将栈的操作添加到其他容器上。</td></tr><tr><td></td><td>queue</td><td>适配器，将队列的操作添加到其他容器上。</td></tr><tr><td></td><td>priority_queue</td><td>适配器，将优先队列的操作添加到其他容器上。</td></tr><tr><td>仿函数（Functors）</td><td>less</td><td>二元谓词，用于比较两个元素。</td></tr><tr><td></td><td>greater</td><td>二元谓词，用于比较两个元素。</td></tr><tr><td></td><td>plus</td><td>二元函数对象，实现加法。</td></tr><tr><td></td><td>minus</td><td>二元函数对象，实现减法。</td></tr><tr><td></td><td>negate</td><td>一元函数对象，实现取反。</td></tr><tr><td>空间配置器（Allocators）</td><td>allocator</td><td>分配和释放内存的对象。</td></tr><tr><td></td><td>allocator_traits</td><td>提供对分配器属性和操作的访问。</td></tr></tbody></table>',2),o={},s=(0,r(66262).A)(o,[["render",function(t,d){const r=(0,n.g2)("chatmessage");return(0,n.uX)(),(0,n.CE)("div",null,[e,(0,n.bF)(r,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" C++ STL（标准模板库）是一套功能强大的 C++ 模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。 ")])),_:1}),a])}]]),i=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","title":"c++2.stl模板概述","lang":"zh-CN","frontmatter":{"title":"c++2.stl模板概述","order":2,"category":["c++"],"description":"STL 核心组件","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++2.stl模板概述"}],["meta",{"property":"og:description","content":"STL 核心组件"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++2.stl模板概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"STL","slug":"stl","link":"#stl","children":[]},{"level":3,"title":"核心组件","slug":"核心组件","link":"#核心组件","children":[]}],"git":{"createdTime":1701893836000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.79,"words":536},"filePathRelative":"language/cpp/stl[标准模板]/2-stl.md","localizedDate":"2023年12月6日","excerpt":"<h3>STL</h3>\\n\\n<h3>核心组件</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>类别</th>\\n<th>组件</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>容器（Containers）</td>\\n<td>vector</td>\\n<td>动态数组，支持快速随机访问和尾部插入操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>list</td>\\n<td>双向链表，支持在任意位置插入和删除操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>deque</td>\\n<td>双端队列，支持在两端快速插入和删除操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>queue</td>\\n<td>队列，先进先出（FIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>stack</td>\\n<td>栈，后进先出（LIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>set</td>\\n<td>集合，元素唯一，有序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>map</td>\\n<td>映射，键-值对的集合，键唯一，有序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>unordered_set</td>\\n<td>无序集合，元素唯一。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>unordered_map</td>\\n<td>无序映射，键-值对的集合，键唯一。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>stack</td>\\n<td>栈，后进先出（LIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td>迭代器（Iterators）</td>\\n<td>input_iterator</td>\\n<td>用于遍历序列的输入迭代器。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>output_iterator</td>\\n<td>用于向序列写入的输出迭代器。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>forward_iterator</td>\\n<td>单向遍历序列的迭代器，支持逐个增加。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>bidirectional_iterator</td>\\n<td>双向遍历序列的迭代器，支持逐个增加或逐个减少。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>random_access_iterator</td>\\n<td>随机访问序列的迭代器，支持直接跳跃访问。</td>\\n</tr>\\n<tr>\\n<td>算法（Algorithms）</td>\\n<td>sort</td>\\n<td>对序列进行排序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>find</td>\\n<td>在序列中查找特定元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>transform</td>\\n<td>对序列进行变换操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>accumulate</td>\\n<td>计算序列元素的累积值。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>for_each</td>\\n<td>对序列的每个元素执行指定操作。</td>\\n</tr>\\n<tr>\\n<td>适配器（Adapters）</td>\\n<td>stack</td>\\n<td>适配器，将栈的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>queue</td>\\n<td>适配器，将队列的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>priority_queue</td>\\n<td>适配器，将优先队列的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td>仿函数（Functors）</td>\\n<td>less</td>\\n<td>二元谓词，用于比较两个元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>greater</td>\\n<td>二元谓词，用于比较两个元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>plus</td>\\n<td>二元函数对象，实现加法。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>minus</td>\\n<td>二元函数对象，实现减法。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>negate</td>\\n<td>一元函数对象，实现取反。</td>\\n</tr>\\n<tr>\\n<td>空间配置器（Allocators）</td>\\n<td>allocator</td>\\n<td>分配和释放内存的对象。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>allocator_traits</td>\\n<td>提供对分配器属性和操作的访问。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);