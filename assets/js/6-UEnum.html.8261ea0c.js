"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6803],{50883:(n,a,s)=>{n.exports=s.p+"assets/img/classadd.75f4997d.png"},87541:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>r,data:()=>u});var e=s(20641),t=s(50883);const p=(0,e.Fv)('<h3 id="常规" tabindex="-1"><a class="header-anchor" href="#常规"><span>常规</span></a></h3><ol><li>Rider添加一个类</li></ol><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>添加代码</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UENUM</span><span class="token punctuation">(</span>Meta <span class="token operator">=</span> <span class="token punctuation">(</span>Bitflags<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EColorBits</span>\n<span class="token punctuation">{</span>\n    ECB_Red<span class="token punctuation">,</span>\n    ECB_Green<span class="token punctuation">,</span>\n    ECB_Blue\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明前置" tabindex="-1"><a class="header-anchor" href="#声明前置"><span>声明前置</span></a></h3>',6),i=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"enum"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"EColorBits"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token base-clause"},[(0,e.Lk)("span",{class:"token class-name"},"uint8")]),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"})])],-1),l=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token keyword"},"enum"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"EColorBits"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token base-clause"},[(0,e.Lk)("span",{class:"token class-name"},"uint8")]),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    ECB_Red"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n    ECB_Green"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)("\n    ECB_Blue\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),c=(0,e.Fv)('<h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>C++ 中的枚举类型并不是严格类型安全的，而且它们的大小是由编译器决定的，因此无法直接用作成员变量的类型。 在UE中需要用对应的模板函数声明，有点像TObjcetPtr的味道</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//带命名空间</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span>Category <span class="token operator">=</span> <span class="token string">&quot;ViewLock&quot;</span><span class="token punctuation">)</span>\nTEnumAsByte<span class="token operator">&lt;</span> EDrawDebugTrace<span class="token double-colon punctuation">::</span>Type<span class="token operator">&gt;</span> DebugType<span class="token punctuation">;</span>\n\n<span class="token comment">//不带UPROPERTY的普通枚举</span>\n EColorBits ColorType<span class="token punctuation">;</span>\n \n<span class="token comment">//带UPROPERTY，不带命名空间</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span>Category <span class="token operator">=</span> <span class="token string">&quot;ViewLock&quot;</span><span class="token punctuation">)</span>\nTEnumAsByte<span class="token operator">&lt;</span>EViewLockType<span class="token operator">&gt;</span> ViewLockType<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),o={},r=(0,s(66262).A)(o,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("CodeTabs");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" UEC++中怎么写Enum ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 安排! ")])),_:1}),p,(0,e.bF)(t,{id:"26",data:[{id:".h"},{id:".cpp"}],"tab-id":"language"},{title0:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)(".h")])),title1:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)(".cpp")])),tab0:(0,e.k6)((({value:n,isActive:a})=>[i])),tab1:(0,e.k6)((({value:n,isActive:a})=>[l])),_:1},8,["data"]),c])}]]),u=JSON.parse('{"path":"/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html","title":"F6.UEnum|枚举","lang":"zh-CN","frontmatter":{"title":"F6.UEnum|枚举","order":6,"category":["u++"],"description":"常规 Rider添加一个类 添加代码 声明前置 使用 C++ 中的枚举类型并不是严格类型安全的，而且它们的大小是由编译器决定的，因此无法直接用作成员变量的类型。 在UE中需要用对应的模板函数声明，有点像TObjcetPtr的味道","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"F6.UEnum|枚举"}],["meta",{"property":"og:description","content":"常规 Rider添加一个类 添加代码 声明前置 使用 C++ 中的枚举类型并不是严格类型安全的，而且它们的大小是由编译器决定的，因此无法直接用作成员变量的类型。 在UE中需要用对应的模板函数声明，有点像TObjcetPtr的味道"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-26T05:45:35.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-02-26T05:45:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"F6.UEnum|枚举\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-26T05:45:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"常规","slug":"常规","link":"#常规","children":[]},{"level":3,"title":"声明前置","slug":"声明前置","link":"#声明前置","children":[]},{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1708926335000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":0.65,"words":195},"filePathRelative":"unreal/function[函数]/6-UEnum.md","localizedDate":"2024年1月3日","excerpt":"\\n\\n<h3>常规</h3>\\n<ol>\\n<li>Rider添加一个类</li>\\n</ol>\\n<figure><figcaption></figcaption></figure>\\n<ol start=\\"2\\">\\n<li>添加代码</li>\\n</ol>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UENUM</span><span class=\\"token punctuation\\">(</span>Meta <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>Bitflags<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">enum</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">EColorBits</span>\\n<span class=\\"token punctuation\\">{</span>\\n    ECB_Red<span class=\\"token punctuation\\">,</span>\\n    ECB_Green<span class=\\"token punctuation\\">,</span>\\n    ECB_Blue\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);