"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4438],{37260:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>i,data:()=>l});var t=s(20641);const e=(0,t.Lk)("h2",{id:"选择排序-selection-sort",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#选择排序-selection-sort"},[(0,t.Lk)("span",null,"选择排序 (Selection Sort)")])],-1),o=(0,t.Fv)('<h3 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤"><span>实现步骤</span></a></h3><ol><li>首先在<code>未排序</code>序列中找到最小（大）元素，存放到排序序列的起始位置.</li><li>再从剩余<code>未排序</code>元素中继续寻找最小（大）元素，然后放到<code>已排序</code>序列的末尾。</li><li>以此类推，直到所有元素均排序完毕。</li></ol>',2),p=(0,t.Fv)('<h3 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>T arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),c={},i=(0,s(66262).A)(c,[["render",function(n,a){const s=(0,t.g2)("chatmessage"),c=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 简单选择排序是通过不断选择剩余元素中的最小值，并将其放在已排序部分的末尾。 ")])),_:1}),(0,t.bF)(c,{src:"../../assets/algorithmgif/selctionsort.gif"}),o,(0,t.bF)(s,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 时间复杂度是O(n^2)，其中n是数组的长度，优势在于交换次数相对较少，且不受输入数据分布的影响(相对稳定)。 ")])),_:1}),p])}]]),l=JSON.parse('{"path":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html","title":"Sort|选择排序(Selection Sort)","lang":"zh-CN","frontmatter":{"title":"Sort|选择排序(Selection Sort)","order":1,"category":["algorithm"],"description":"选择排序 (Selection Sort)","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"Sort|选择排序(Selection Sort)"}],["meta",{"property":"og:description","content":"选择排序 (Selection Sort)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sort|选择排序(Selection Sort)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"选择排序 (Selection Sort)","slug":"选择排序-selection-sort","link":"#选择排序-selection-sort","children":[{"level":3,"title":"实现步骤","slug":"实现步骤","link":"#实现步骤","children":[]},{"level":3,"title":"代码实现","slug":"代码实现","link":"#代码实现","children":[]}]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":0.82,"words":245},"filePathRelative":"algorithm/sort[排序]/01selectionSort1.md","localizedDate":"2023年11月23日","excerpt":"<h2>选择排序 (Selection Sort)</h2>\\n\\n","autoDesc":true}')}}]);