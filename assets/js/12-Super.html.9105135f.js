"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4217],{64371:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>m,data:()=>b});var e=s(20641);const t=(0,e.Lk)("h2",{id:"问题描述",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#问题描述"},[(0,e.Lk)("span",null,"问题描述")])],-1),i=(0,e.Lk)("p",null,[(0,e.Lk)("code",null,"Super::XXXX()"),(0,e.eW)(" 中"),(0,e.Lk)("code",null," return"),(0,e.eW)(" 不会中断子类函数执行的问题")],-1),p=(0,e.Lk)("h3",{id:"问题复现",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#问题复现"},[(0,e.Lk)("span",null,"问题复现")])],-1),o=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UExorcistViewModelBase</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bInitialized<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\tbInitialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\t<span class="token function">check</span><span class="token punctuation">(</span>DataCollection<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UVM_LobbyHero</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token class-name">UKismetSystemLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">PrintString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>CurrentInfo<span class="token punctuation">.</span>SelectedCategory<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> FColor<span class="token double-colon punctuation">::</span>Blue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),c=(0,e.Lk)("p",null,[(0,e.eW)("结果是派生类多次调用"),(0,e.Lk)("code",null,"Initialize()"),(0,e.eW)("会一直打印")],-1),u=(0,e.Lk)("h3",{id:"问题提出",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#问题提出"},[(0,e.Lk)("span",null,"问题提出")])],-1),r=(0,e.Lk)("p",null,[(0,e.eW)("父类里 "),(0,e.Lk)("code",null,"if (bInitialized) return"),(0,e.eW)("; 后已经 "),(0,e.Lk)("code",null,"return"),(0,e.eW)(" 了，为什么子类自己的后续代码仍然会继续执行？")],-1),d=(0,e.Fv)('<h3 id="问题解答" tabindex="-1"><a class="header-anchor" href="#问题解答"><span>问题解答</span></a></h3><h3 id="_1-return-只作用于当前函数" tabindex="-1"><a class="header-anchor" href="#_1-return-只作用于当前函数"><span>1. <code>return</code> 只作用于<strong>当前函数</strong></span></a></h3><ul><li>在 C++ 中，<code>return;</code> 语句只会让<strong>当前执行的函数</strong>立即结束。</li><li>也就是说，<code>UExorcistViewModelBase::Initialize()</code> 在遇到 <code>return</code> 后会停止执行<strong>父类自己的剩余代码</strong>，并<strong>返回到子类</strong>继续执行子类的 <code>Initialize()</code> 后续内容。</li><li><strong>不会</strong>因为父类 <code>return;</code>，而中断子类 <code>Initialize()</code> 的流程。</li></ul><h3 id="_2-函数调用有调用栈" tabindex="-1"><a class="header-anchor" href="#_2-函数调用有调用栈"><span>2. 函数调用有<strong>调用栈</strong></span></a></h3><ul><li>调用栈里是按层级顺序压入的。</li><li>子类 <code>Initialize()</code> 调用 <code>Super::Initialize()</code> → 进入父类 → 父类执行结束 → 返回子类继续执行。</li></ul><blockquote><p>示意流程：</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>子类 Initialize()\n└── 调用 → 父类 Initialize()\n    └── (父类遇到 return 提前结束)\n└── 返回 → 继续子类 Initialize() 后续代码\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3>',8),k=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UVM_LobbyHero</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// 子类也要加这一行！</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>bInitialized<span class="token punctuation">)</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),v={},m=(0,s(66262).A)(v,[["render",function(n,a){const s=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[t,(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,e.k6)((()=>[i])),_:1}),p,(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这是基类 ")])),_:1}),o,(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 这是派生类 ")])),_:1}),l,(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,e.k6)((()=>[c])),_:1}),u,(0,e.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,e.k6)((()=>[r])),_:1}),d,(0,e.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 子类需要自己判断并中断执行 ")])),_:1}),k])}]]),b=JSON.parse('{"path":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/12-Super.html","title":"EXP12.Super::XXXX() 中 return 不会中断子类函数执行的问题","lang":"zh-CN","frontmatter":{"title":"EXP12.Super::XXXX() 中 return 不会中断子类函数执行的问题","order":11,"category":["u++"],"description":"问题描述 问题复现 问题提出 问题解答 1. return 只作用于当前函数 在 C++ 中，return; 语句只会让当前执行的函数立即结束。 也就是说，UExorcistViewModelBase::Initialize() 在遇到 return 后会停止执行父类自己的剩余代码，并返回到子类继续执行子类的 Initialize() 后续内容。 不会...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/exp_%E7%BB%8F%E9%AA%8C_/12-Super.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"EXP12.Super::XXXX() 中 return 不会中断子类函数执行的问题"}],["meta",{"property":"og:description","content":"问题描述 问题复现 问题提出 问题解答 1. return 只作用于当前函数 在 C++ 中，return; 语句只会让当前执行的函数立即结束。 也就是说，UExorcistViewModelBase::Initialize() 在遇到 return 后会停止执行父类自己的剩余代码，并返回到子类继续执行子类的 Initialize() 后续内容。 不会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-28T02:40:32.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-04-28T02:40:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EXP12.Super::XXXX() 中 return 不会中断子类函数执行的问题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-04-28T02:40:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[{"level":3,"title":"问题复现","slug":"问题复现","link":"#问题复现","children":[]},{"level":3,"title":"问题提出","slug":"问题提出","link":"#问题提出","children":[]},{"level":3,"title":"问题解答","slug":"问题解答","link":"#问题解答","children":[]},{"level":3,"title":"1. return 只作用于当前函数","slug":"_1-return-只作用于当前函数","link":"#_1-return-只作用于当前函数","children":[]},{"level":3,"title":"2. 函数调用有调用栈","slug":"_2-函数调用有调用栈","link":"#_2-函数调用有调用栈","children":[]},{"level":3,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}]}],"git":{"createdTime":1745808032000,"updatedTime":1745808032000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.26,"words":379},"filePathRelative":"unreal/exp[经验]/12-Super.md","localizedDate":"2025年4月28日","excerpt":"<h2>问题描述</h2>\\n\\n<h3>问题复现</h3>\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token class-name\\">UExorcistViewModelBase</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token class-name\\">Super</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">Initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>bInitialized<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span><span class=\\"token punctuation\\">;</span>\\n\\tbInitialized <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">check</span><span class=\\"token punctuation\\">(</span>DataCollection<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);