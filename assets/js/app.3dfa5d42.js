"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3524],{61709:(n,a,s)=>{s.d(a,{l:()=>t});const t={category:{"/":{path:"/category/",map:{algorithm:{path:"/category/algorithm/",indexes:[0,1,2]},unreal:{path:"/category/unreal/",indexes:[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},"c++":{path:"/category/c++/",indexes:[31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]},java:{path:"/category/java/",indexes:[81]},lua:{path:"/category/lua/",indexes:[82]},Markdown:{path:"/category/markdown/",indexes:[83,84,85,86,87,88,89]},Git:{path:"/category/git/",indexes:[90,91,92,93,94,95,96]},Github:{path:"/category/github/",indexes:[97,98,99,100,101,102]},IDEA:{path:"/category/idea/",indexes:[103]},rider:{path:"/category/rider/",indexes:[104,105,106,107]},visualstudio:{path:"/category/visualstudio/",indexes:[108]},visualStudio:{path:"/category/visualstudio/",indexes:[109]},vscode:{path:"/category/vscode/",indexes:[110,111,112]},vuepress:{path:"/category/vuepress/",indexes:[113,114]},vue:{path:"/category/vue/",indexes:[115]},"u++":{path:"/category/u++/",indexes:[116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180]}}}},tag:{"/":{path:"/tag/",map:{unreal:{path:"/tag/unreal/",indexes:[30]},介绍:{path:"/tag/介绍/",indexes:[81,109,80,107,82,113,96,102,112,83]},"c++":{path:"/tag/c++/",indexes:[80]},java:{path:"/tag/java/",indexes:[81]},lua:{path:"/tag/lua/",indexes:[82]},Markdown:{path:"/tag/markdown/",indexes:[83,84,85,86,87,88,89]},示例:{path:"/tag/示例/",indexes:[84]},husky:{path:"/tag/husky/",indexes:[94]},踩坑记录:{path:"/tag/踩坑记录/",indexes:[90,91,97,98,99,100,101]},Git:{path:"/tag/git/",indexes:[96]},Github:{path:"/tag/github/",indexes:[102]},rider:{path:"/tag/rider/",indexes:[107]},visualStudio:{path:"/tag/visualstudio/",indexes:[109]},VSCode:{path:"/tag/vscode/",indexes:[112]},VuePress:{path:"/tag/vuepress/",indexes:[113]},Specifiers:{path:"/tag/specifiers/",indexes:[162,163,168,169,170,171]},Emoji:{path:"/tag/emoji/",indexes:[85,86,87,88,89]}}}}}},94776:(n,a,s)=>{s.d(a,{M:()=>t});const t=["/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html","/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html","/algorithm/01Swap.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/4-lyraCamera.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.5-GamePlayNetWork.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/2-lyraMessageBox.html","/unreal/plugins_%E6%8F%92%E4%BB%B6_/2-HightLight.html","/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/1-Architecture.html","/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/2-Architecture2.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html","/unreal/plugins_%E6%8F%92%E4%BB%B6_/1-ViewLock.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/SafeZone.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/2-BRDF.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/1-HPBar.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/1-lyra.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/3-lyraSubtitle.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/1-editortoolPlugin.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/1-editortoolBP.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/2-editortoolBP2.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/NameSlot.html","/unreal/network_%E7%BD%91%E7%BB%9C_/1-HTTP.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/1-CommonUI.html","/unreal/","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/7-for.html","/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html","/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html","/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/3-FactoryPattern.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/10-Functor.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/11-Map.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/6-stack.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/7-queue.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/9-Set.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/5-Diamond%20Inheritance.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/8-Keywords%20sizeof.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-function%20brace%20initialization.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/8-operator.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/9-Big%20Four.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/1-Namespace%20scope.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/2-Lvalues%20and%20Rvalues.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/6-Ptr-Function.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/7-Ptr-this.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/0-where%20use%20a%20semicolon.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/1-function%20Declaration_%20Definition.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/2-Variable%20Declaration_%20Definition.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-VariablePassbyValue%20_%20Reference.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/1-Keywords%20continue_%20break.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/2-Keywords%20inline.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/1-insidePtr.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html","/language/cpp/","/language/java/","/language/lua/","/language/markdown/","/language/markdown/demo.html","/language/markdown/emoji/nature.html","/language/markdown/emoji/object.html","/language/markdown/emoji/people.html","/language/markdown/emoji/place.html","/language/markdown/emoji/symbol.html","/tools/git/6-rebase-merge.html","/tools/git/5-path-problem.html","/tools/git/1-gitignore.html","/tools/git/2-repo-tool.html","/tools/git/3-commit-message.html","/tools/git/4-submodule.html","/tools/git/","/tools/github/5-autoaction.html","/tools/github/1-download-huge-project-from-github.html","/tools/github/2-switch-multiple-github-accounts.html","/tools/github/3-sync-a-fork.html","/tools/github/4-ssh-push-failed.html","/tools/github/","/tools/idea/","/tools/rider/3-npm.html","/tools/rider/2-poddoc.html","/tools/rider/1-errors.html","/tools/rider/","/tools/visualstudio/1-classtool.html","/tools/visualstudio/","/tools/vscode/1-errors.html","/tools/vscode/2-fix-todo-highlight-links.html","/tools/vscode/","/tools/vuepress/","/tools/vuepress/vuepress-add-comp.html","/tools/vuepress/vue.html","/unreal/core_%E6%A0%B8%E5%BF%83_/11-DevelopSettings.html","/unreal/error_%E9%94%99%E8%AF%AF_/12SetIsReplicated.html","/unreal/error_%E9%94%99%E8%AF%AF_/13GASGEInit.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8.2-GASAbility.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/10-inputvector.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/9-svg.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.3-EnhancedInput.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.4-EnhancedInput.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/7-CameraLag.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/8-SpaceAdditive.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/6-DerivedDataCache.html","/unreal/function_%E5%87%BD%E6%95%B0_/21-Spawn%20actor%20with%20dynamic%20data.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.1GamePlayNetWork.html","/unreal/function_%E5%87%BD%E6%95%B0_/20-Vector.html","/unreal/master_%E5%85%A5%E9%AD%94_/1-InventorySystem.html","/unreal/function_%E5%87%BD%E6%95%B0_/19-RegisterComponent.html","/unreal/function_%E5%87%BD%E6%95%B0_/18-UE_LOG.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8.1-GASGE.html","/unreal/error_%E9%94%99%E8%AF%AF_/11GamePadFocus.html","/unreal/function_%E5%87%BD%E6%95%B0_/17-BlueprintImplementableEvent.html","/unreal/error_%E9%94%99%E8%AF%AF_/10KeepCPU.html","/unreal/function_%E5%87%BD%E6%95%B0_/16-SetViewTargetWithBlend.html","/unreal/error_%E9%94%99%E8%AF%AF_/01Build%20Fail.html","/unreal/error_%E9%94%99%E8%AF%AF_/02ClassRedirects.html","/unreal/error_%E9%94%99%E8%AF%AF_/03CreateSessionError.html","/unreal/error_%E9%94%99%E8%AF%AF_/04EncodeError.html","/unreal/error_%E9%94%99%E8%AF%AF_/05GameFeatureError.html","/unreal/error_%E9%94%99%E8%AF%AF_/06Mouse.html","/unreal/error_%E9%94%99%E8%AF%AF_/07SubsystemError.html","/unreal/error_%E9%94%99%E8%AF%AF_/08TObjectPtrError.html","/unreal/error_%E9%94%99%E8%AF%AF_/09SkeletalMeshAnimError.html","/unreal/core_%E6%A0%B8%E5%BF%83_/10-GameSave.html","/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html","/unreal/function_%E5%87%BD%E6%95%B0_/15-LoadAsset.html","/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html","/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html","/unreal/core_%E6%A0%B8%E5%BF%83_/3-Singleton.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4-Subsystem.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.1-SubsystemUse.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.2-EnhancedInput.html","/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","/unreal/core_%E6%A0%B8%E5%BF%83_/6-Delegate.html","/unreal/core_%E6%A0%B8%E5%BF%83_/6.1-DelegateUse.html","/unreal/core_%E6%A0%B8%E5%BF%83_/7-GameFeature.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8-GAS.html","/unreal/core_%E6%A0%B8%E5%BF%83_/9-Spectating.html","/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html","/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html","/unreal/function_%E5%87%BD%E6%95%B0_/11-Getactorofclass.html","/unreal/function_%E5%87%BD%E6%95%B0_/12-CE_KE.html","/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html","/unreal/function_%E5%87%BD%E6%95%B0_/14-SpawnActorfromClass.html","/unreal/function_%E5%87%BD%E6%95%B0_/2-GENERATED_BODY.html","/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html","/unreal/function_%E5%87%BD%E6%95%B0_/4-UPARAM.html","/unreal/function_%E5%87%BD%E6%95%B0_/5-UPROPERTY.html","/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html","/unreal/function_%E5%87%BD%E6%95%B0_/7-UStruct.html","/unreal/function_%E5%87%BD%E6%95%B0_/8-TMap.html","/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/1-GoodJob.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/2-Blueprint2CPP.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/4-BPShowCVariables.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/5-EventFunctionMacro.html","/language/java/8-Redis.html","/language/java/6-srpingvalidation.html","/language/java/7-JWT.html","/language/java/1-lombok.html","/language/java/2-mybatis.html","/language/java/3-swagger.html","/language/java/4-springsecurity.html","/language/java/5-application.html","/tools/idea/1-errors.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/RichTextBlock.html","/algorithm/"]},53781:(n,a,s)=>{s.d(a,{U:()=>t});const t={article:{"/":{path:"/article/",indexes:[116,117,118,119,120,3,4,5,6,7,115,181,182,183,184,185,186,187,188,81,189,103,104,8,9,121,190,122,123,10,11,31,32,33,34,35,12,124,125,126,127,128,129,130,13,14,15,131,132,133,16,17,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,18,19,20,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,105,21,108,109,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,22,23,57,58,59,60,61,62,24,25,26,27,63,64,28,29,176,177,178,179,65,66,0,1,106,110,180,67,68,69,70,71,72,73,74,75,76,77,78,79,2,191,80,107,90,82,91,97,113,114,30,92,93,94,95,98,99,100,101,111,96,102,112,83,84,85,86,87,88,89]}},star:{"/":{path:"/star/",indexes:[]}},timeline:{"/":{path:"/timeline/",indexes:[116,117,118,119,120,3,4,5,6,7,115,181,182,183,184,185,186,187,188,81,189,103,104,8,9,121,190,122,123,10,11,31,32,33,34,35,12,124,125,126,127,128,129,130,13,14,15,131,132,133,16,17,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,18,19,20,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,105,21,108,109,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,22,23,57,58,59,60,61,62,24,25,26,27,63,64,28,29,176,177,178,179,65,66,0,1,106,110,180,67,68,69,70,71,72,73,74,75,76,77,78,79,2,191,80,107,90,82,91,97,113,114,30,92,93,94,95,98,99,100,101,111,96,102,112,83,84,85,86,87,88,89]}}}},84356:(n,a,s)=>{s.d(a,{B:()=>X});var t=s(8278),e=s(23812),o=s(13073),p=s(70596),c=s(79403);const l=(0,t.re)({enhance:({app:n})=>{(0,e.L4)("Badge")||n.component("Badge",p.A),(0,e.L4)("FontIcon")||n.component("FontIcon",c.A)},setup:()=>{(0,o.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,o.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,o.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var i=s(26358),r=s(99588),u=s(80355),d=s(60560),k=s(31599),g=s(45496),m=s(76988),h=s(73825),E=s(47152),_=s(5214),f=s(24367),B=s(83027),y=s(79884),A=s(47120),b=s(69589);const w=(0,t.re)({enhance:({app:n})=>{n.component("CodeTabs",E.A),(0,e.L4)("CodeGroup",n)||n.component("CodeGroup",_.lF),(0,e.L4)("CodeGroupItem",n)||n.component("CodeGroupItem",_.E7),n.component("CodeDemo",f.A),n.component("MdDemo",B.A),n.component("Playground",A.A),n.component("Tabs",b.A)},setup:()=>{(0,y.n)()}});var F=s(23004),v=s(73191),S=s(63727);const C=(0,t.re)({setup:()=>{(0,v.K)("service-worker.js",!0),(0,S.x)()},rootComponents:[]});var D=s(98940),x=s(80783),G=s(38465),P=s(20641),T=s(18030),I=s(79920);(0,G.M_)((n=>{const a=n.t,s=!1!==n.I,t=n.i;return s?{title:a,content:t?()=>[(0,P.h)(x.GB,{icon:t}),a]:null,order:n.O,index:n.I}:null}));const O=(0,t.re)({enhance:({app:n,router:a})=>{const{scrollBehavior:s}=a.options;a.options.scrollBehavior=async(...n)=>(await(0,x.MK)().wait(),s(...n)),(0,x.fk)(n),n.component("HopeIcon",x.GB),n.component("BloggerInfo",T.tI),n.component("GlobalEncrypt",I.J),n.component("LocalEncrypt",I.n)},setup:()=>{(0,x.PV)(),(0,x.i$)(),(0,T.su)()},layouts:{Layout:x.PE,NotFound:x.Mk,BlogCategory:T.Pn,BlogHome:T.qX,BlogType:T.z7,Timeline:T.Kf}});var U=s(90033);const R={class:"avatar"},M=["src"],N={class:"message"},L={props:{avatar:String,avatarWidth:Number,alignLeft:Boolean}};var V=s(66262);const q=(0,V.A)(L,[["render",function(n,a,s,t,e,o){return(0,P.uX)(),(0,P.CE)("div",{class:(0,U.C4)(["chat-message",{"align-left":s.alignLeft}])},[(0,P.Lk)("div",R,[(0,P.Lk)("img",{src:s.avatar,style:(0,U.Tr)({width:s.avatarWidth+"px"}),alt:"头像"},null,12,M)]),(0,P.Lk)("div",N,[(0,P.RG)(n.$slots,"default",{},void 0,!0)])],2)}],["__scopeId","data-v-1e9920a4"]]),j={class:"boxstyle"},H=["src"];var W=s(33829);const K={props:{src:String,buttonBackground:String},data:()=>({isPlaying:!1,uniqueId:(0,W.A)()}),methods:{togglePlay(){this.play()},play(){this.isPlaying=!0,this.$refs.gifContainer.src=this.$refs.gifContainer.src+"?"+this.uniqueId,setTimeout((()=>{this.isPlaying=!1}),300)}}},z=(0,V.A)(K,[["render",function(n,a,s,t,e,o){return(0,P.uX)(),(0,P.CE)("div",j,[(0,P.Lk)("img",{ref:"gifContainer",src:s.src,alt:"GIF",class:(0,U.C4)({playing:e.isPlaying}),style:(0,U.Tr)({opacity:e.isPlaying?0:1})},null,14,H),(0,P.Lk)("a",{onClick:a[0]||(a[0]=(...n)=>o.togglePlay&&o.togglePlay(...n)),style:(0,U.Tr)({backgroundImage:"url("+s.buttonBackground+")",opacity:e.isPlaying?0:1})},null,4)])}],["__scopeId","data-v-1f4e702e"]]),Y=(0,t.re)({enhance({app:n,router:a,siteData:s}){n.component("chatmessage",q),n.component("gifwithbutton",z),a.beforeEach((n=>{console.log("before navigation")})),a.afterEach((n=>{console.log("after navigation")}))},setup(){},layouts:{},rootComponents:[]}),X=[{},l,i.A,r.A,u.A,d.A,k.A,g.A,m.A,h.A,w,F.A,C,D.A,O,Y]},68164:(n,a,s)=>{s.d(a,{J:()=>e,c:()=>t});const t=JSON.parse('{"/algorithm/sort[排序]/01selectionSort1.html":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html","/algorithm/sort[排序]/01selectionSort1.md":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html","/algorithm/sort[排序]/02bubbleSort.html":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html","/algorithm/sort[排序]/02bubbleSort.md":"/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html","/unreal/core[核心]/1-Gameplay.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html","/unreal/core[核心]/1-Gameplay.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html","/unreal/core[核心]/10-GameSave.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/10-GameSave.html","/unreal/core[核心]/10-GameSave.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/10-GameSave.html","/unreal/core[核心]/10.1-JsonTOString.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html","/unreal/core[核心]/10.1-JsonTOString.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html","/unreal/core[核心]/11-DevelopSettings.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/11-DevelopSettings.html","/unreal/core[核心]/11-DevelopSettings.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/11-DevelopSettings.html","/unreal/core[核心]/2-GameMode.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html","/unreal/core[核心]/2-GameMode.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html","/unreal/core[核心]/3-Singleton.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/3-Singleton.html","/unreal/core[核心]/3-Singleton.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/3-Singleton.html","/unreal/core[核心]/4-Subsystem.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/4-Subsystem.html","/unreal/core[核心]/4-Subsystem.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/4-Subsystem.html","/unreal/core[核心]/4.1-SubsystemUse.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.1-SubsystemUse.html","/unreal/core[核心]/4.1-SubsystemUse.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.1-SubsystemUse.html","/unreal/core[核心]/4.2-EnhancedInput.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.2-EnhancedInput.html","/unreal/core[核心]/4.2-EnhancedInput.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.2-EnhancedInput.html","/unreal/core[核心]/4.3-EnhancedInput.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.3-EnhancedInput.html","/unreal/core[核心]/4.3-EnhancedInput.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.3-EnhancedInput.html","/unreal/core[核心]/4.4-EnhancedInput.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.4-EnhancedInput.html","/unreal/core[核心]/4.4-EnhancedInput.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/4.4-EnhancedInput.html","/unreal/core[核心]/5-Interface.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","/unreal/core[核心]/5-Interface.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","/unreal/core[核心]/6-Delegate.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/6-Delegate.html","/unreal/core[核心]/6-Delegate.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/6-Delegate.html","/unreal/core[核心]/6.1-DelegateUse.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/6.1-DelegateUse.html","/unreal/core[核心]/6.1-DelegateUse.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/6.1-DelegateUse.html","/unreal/core[核心]/7-GameFeature.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/7-GameFeature.html","/unreal/core[核心]/7-GameFeature.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/7-GameFeature.html","/unreal/core[核心]/8-GAS.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/8-GAS.html","/unreal/core[核心]/8-GAS.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/8-GAS.html","/unreal/core[核心]/8.1-GASGE.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/8.1-GASGE.html","/unreal/core[核心]/8.1-GASGE.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/8.1-GASGE.html","/unreal/core[核心]/8.2-GASAbility.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/8.2-GASAbility.html","/unreal/core[核心]/8.2-GASAbility.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/8.2-GASAbility.html","/unreal/core[核心]/9-Spectating.html":"/unreal/core_%E6%A0%B8%E5%BF%83_/9-Spectating.html","/unreal/core[核心]/9-Spectating.md":"/unreal/core_%E6%A0%B8%E5%BF%83_/9-Spectating.html","/unreal/error[错误]/01Build Fail.html":"/unreal/error_%E9%94%99%E8%AF%AF_/01Build%20Fail.html","/unreal/error[错误]/01Build Fail.md":"/unreal/error_%E9%94%99%E8%AF%AF_/01Build%20Fail.html","/unreal/error[错误]/02ClassRedirects.html":"/unreal/error_%E9%94%99%E8%AF%AF_/02ClassRedirects.html","/unreal/error[错误]/02ClassRedirects.md":"/unreal/error_%E9%94%99%E8%AF%AF_/02ClassRedirects.html","/unreal/error[错误]/03CreateSessionError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/03CreateSessionError.html","/unreal/error[错误]/03CreateSessionError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/03CreateSessionError.html","/unreal/error[错误]/04EncodeError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/04EncodeError.html","/unreal/error[错误]/04EncodeError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/04EncodeError.html","/unreal/error[错误]/05GameFeatureError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/05GameFeatureError.html","/unreal/error[错误]/05GameFeatureError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/05GameFeatureError.html","/unreal/error[错误]/06Mouse.html":"/unreal/error_%E9%94%99%E8%AF%AF_/06Mouse.html","/unreal/error[错误]/06Mouse.md":"/unreal/error_%E9%94%99%E8%AF%AF_/06Mouse.html","/unreal/error[错误]/07SubsystemError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/07SubsystemError.html","/unreal/error[错误]/07SubsystemError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/07SubsystemError.html","/unreal/error[错误]/08TObjectPtrError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/08TObjectPtrError.html","/unreal/error[错误]/08TObjectPtrError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/08TObjectPtrError.html","/unreal/error[错误]/09SkeletalMeshAnimError.html":"/unreal/error_%E9%94%99%E8%AF%AF_/09SkeletalMeshAnimError.html","/unreal/error[错误]/09SkeletalMeshAnimError.md":"/unreal/error_%E9%94%99%E8%AF%AF_/09SkeletalMeshAnimError.html","/unreal/error[错误]/10KeepCPU.html":"/unreal/error_%E9%94%99%E8%AF%AF_/10KeepCPU.html","/unreal/error[错误]/10KeepCPU.md":"/unreal/error_%E9%94%99%E8%AF%AF_/10KeepCPU.html","/unreal/error[错误]/11GamePadFocus.html":"/unreal/error_%E9%94%99%E8%AF%AF_/11GamePadFocus.html","/unreal/error[错误]/11GamePadFocus.md":"/unreal/error_%E9%94%99%E8%AF%AF_/11GamePadFocus.html","/unreal/error[错误]/12SetIsReplicated.html":"/unreal/error_%E9%94%99%E8%AF%AF_/12SetIsReplicated.html","/unreal/error[错误]/12SetIsReplicated.md":"/unreal/error_%E9%94%99%E8%AF%AF_/12SetIsReplicated.html","/unreal/error[错误]/13GASGEInit.html":"/unreal/error_%E9%94%99%E8%AF%AF_/13GASGEInit.html","/unreal/error[错误]/13GASGEInit.md":"/unreal/error_%E9%94%99%E8%AF%AF_/13GASGEInit.html","/unreal/exp[经验]/1-GoodJob.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/1-GoodJob.html","/unreal/exp[经验]/1-GoodJob.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/1-GoodJob.html","/unreal/exp[经验]/10-inputvector.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/10-inputvector.html","/unreal/exp[经验]/10-inputvector.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/10-inputvector.html","/unreal/exp[经验]/2-Blueprint2CPP.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/2-Blueprint2CPP.html","/unreal/exp[经验]/2-Blueprint2CPP.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/2-Blueprint2CPP.html","/unreal/exp[经验]/3-Blueprint2CPP-1.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html","/unreal/exp[经验]/3-Blueprint2CPP-1.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html","/unreal/exp[经验]/4-BPShowCVariables.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/4-BPShowCVariables.html","/unreal/exp[经验]/4-BPShowCVariables.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/4-BPShowCVariables.html","/unreal/exp[经验]/5-EventFunctionMacro.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/5-EventFunctionMacro.html","/unreal/exp[经验]/5-EventFunctionMacro.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/5-EventFunctionMacro.html","/unreal/exp[经验]/6-DerivedDataCache.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/6-DerivedDataCache.html","/unreal/exp[经验]/6-DerivedDataCache.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/6-DerivedDataCache.html","/unreal/exp[经验]/7-CameraLag.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/7-CameraLag.html","/unreal/exp[经验]/7-CameraLag.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/7-CameraLag.html","/unreal/exp[经验]/8-SpaceAdditive.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/8-SpaceAdditive.html","/unreal/exp[经验]/8-SpaceAdditive.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/8-SpaceAdditive.html","/unreal/exp[经验]/9-svg.html":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/9-svg.html","/unreal/exp[经验]/9-svg.md":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/9-svg.html","/unreal/function[函数]/1-XXXAPI.html":"/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html","/unreal/function[函数]/1-XXXAPI.md":"/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html","/unreal/function[函数]/10-PTRINUE.html":"/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html","/unreal/function[函数]/10-PTRINUE.md":"/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html","/unreal/function[函数]/11-Getactorofclass.html":"/unreal/function_%E5%87%BD%E6%95%B0_/11-Getactorofclass.html","/unreal/function[函数]/11-Getactorofclass.md":"/unreal/function_%E5%87%BD%E6%95%B0_/11-Getactorofclass.html","/unreal/function[函数]/12-CE&KE.html":"/unreal/function_%E5%87%BD%E6%95%B0_/12-CE_KE.html","/unreal/function[函数]/12-CE&KE.md":"/unreal/function_%E5%87%BD%E6%95%B0_/12-CE_KE.html","/unreal/function[函数]/13-BeginPlay.html":"/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html","/unreal/function[函数]/13-BeginPlay.md":"/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html","/unreal/function[函数]/14-SpawnActorfromClass.html":"/unreal/function_%E5%87%BD%E6%95%B0_/14-SpawnActorfromClass.html","/unreal/function[函数]/14-SpawnActorfromClass.md":"/unreal/function_%E5%87%BD%E6%95%B0_/14-SpawnActorfromClass.html","/unreal/function[函数]/15-LoadAsset.html":"/unreal/function_%E5%87%BD%E6%95%B0_/15-LoadAsset.html","/unreal/function[函数]/15-LoadAsset.md":"/unreal/function_%E5%87%BD%E6%95%B0_/15-LoadAsset.html","/unreal/function[函数]/16-SetViewTargetWithBlend.html":"/unreal/function_%E5%87%BD%E6%95%B0_/16-SetViewTargetWithBlend.html","/unreal/function[函数]/16-SetViewTargetWithBlend.md":"/unreal/function_%E5%87%BD%E6%95%B0_/16-SetViewTargetWithBlend.html","/unreal/function[函数]/17-BlueprintImplementableEvent.html":"/unreal/function_%E5%87%BD%E6%95%B0_/17-BlueprintImplementableEvent.html","/unreal/function[函数]/17-BlueprintImplementableEvent.md":"/unreal/function_%E5%87%BD%E6%95%B0_/17-BlueprintImplementableEvent.html","/unreal/function[函数]/18-UE_LOG.html":"/unreal/function_%E5%87%BD%E6%95%B0_/18-UE_LOG.html","/unreal/function[函数]/18-UE_LOG.md":"/unreal/function_%E5%87%BD%E6%95%B0_/18-UE_LOG.html","/unreal/function[函数]/19-RegisterComponent.html":"/unreal/function_%E5%87%BD%E6%95%B0_/19-RegisterComponent.html","/unreal/function[函数]/19-RegisterComponent.md":"/unreal/function_%E5%87%BD%E6%95%B0_/19-RegisterComponent.html","/unreal/function[函数]/2-GENERATED_BODY.html":"/unreal/function_%E5%87%BD%E6%95%B0_/2-GENERATED_BODY.html","/unreal/function[函数]/2-GENERATED_BODY.md":"/unreal/function_%E5%87%BD%E6%95%B0_/2-GENERATED_BODY.html","/unreal/function[函数]/20-Vector.html":"/unreal/function_%E5%87%BD%E6%95%B0_/20-Vector.html","/unreal/function[函数]/20-Vector.md":"/unreal/function_%E5%87%BD%E6%95%B0_/20-Vector.html","/unreal/function[函数]/21-Spawn actor with dynamic data.html":"/unreal/function_%E5%87%BD%E6%95%B0_/21-Spawn%20actor%20with%20dynamic%20data.html","/unreal/function[函数]/21-Spawn actor with dynamic data.md":"/unreal/function_%E5%87%BD%E6%95%B0_/21-Spawn%20actor%20with%20dynamic%20data.html","/unreal/function[函数]/3-EditorUsing.html":"/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html","/unreal/function[函数]/3-EditorUsing.md":"/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html","/unreal/function[函数]/4-UPARAM.html":"/unreal/function_%E5%87%BD%E6%95%B0_/4-UPARAM.html","/unreal/function[函数]/4-UPARAM.md":"/unreal/function_%E5%87%BD%E6%95%B0_/4-UPARAM.html","/unreal/function[函数]/5-UPROPERTY.html":"/unreal/function_%E5%87%BD%E6%95%B0_/5-UPROPERTY.html","/unreal/function[函数]/5-UPROPERTY.md":"/unreal/function_%E5%87%BD%E6%95%B0_/5-UPROPERTY.html","/unreal/function[函数]/6-UEnum.html":"/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html","/unreal/function[函数]/6-UEnum.md":"/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html","/unreal/function[函数]/7-UStruct.html":"/unreal/function_%E5%87%BD%E6%95%B0_/7-UStruct.html","/unreal/function[函数]/7-UStruct.md":"/unreal/function_%E5%87%BD%E6%95%B0_/7-UStruct.html","/unreal/function[函数]/8-TMap.html":"/unreal/function_%E5%87%BD%E6%95%B0_/8-TMap.html","/unreal/function[函数]/8-TMap.md":"/unreal/function_%E5%87%BD%E6%95%B0_/8-TMap.html","/unreal/function[函数]/9-Iterator.html":"/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html","/unreal/function[函数]/9-Iterator.md":"/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html","/unreal/hotfix[热更新]/1-Architecture.html":"/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/1-Architecture.html","/unreal/hotfix[热更新]/1-Architecture.md":"/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/1-Architecture.html","/unreal/hotfix[热更新]/2-Architecture2.html":"/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/2-Architecture2.html","/unreal/hotfix[热更新]/2-Architecture2.md":"/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/2-Architecture2.html","/unreal/lyra[天秤座]/1-lyra.html":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/1-lyra.html","/unreal/lyra[天秤座]/1-lyra.md":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/1-lyra.html","/unreal/lyra[天秤座]/2-lyraMessageBox.html":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/2-lyraMessageBox.html","/unreal/lyra[天秤座]/2-lyraMessageBox.md":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/2-lyraMessageBox.html","/unreal/lyra[天秤座]/3-lyraSubtitle.html":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/3-lyraSubtitle.html","/unreal/lyra[天秤座]/3-lyraSubtitle.md":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/3-lyraSubtitle.html","/unreal/lyra[天秤座]/4-lyraCamera.html":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/4-lyraCamera.html","/unreal/lyra[天秤座]/4-lyraCamera.md":"/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/4-lyraCamera.html","/unreal/master[入魔]/1-InventorySystem.html":"/unreal/master_%E5%85%A5%E9%AD%94_/1-InventorySystem.html","/unreal/master[入魔]/1-InventorySystem.md":"/unreal/master_%E5%85%A5%E9%AD%94_/1-InventorySystem.html","/unreal/network[网络]/1-HTTP.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/1-HTTP.html","/unreal/network[网络]/1-HTTP.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/1-HTTP.html","/unreal/network[网络]/2-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html","/unreal/network[网络]/2-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html","/unreal/network[网络]/2.1.-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html","/unreal/network[网络]/2.1.-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html","/unreal/network[网络]/2.2.-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.-GamePlayNetWork.html","/unreal/network[网络]/2.2.-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.-GamePlayNetWork.html","/unreal/network[网络]/2.2.1GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.1GamePlayNetWork.html","/unreal/network[网络]/2.2.1GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.1GamePlayNetWork.html","/unreal/network[网络]/2.3.-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html","/unreal/network[网络]/2.3.-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html","/unreal/network[网络]/2.3.1-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html","/unreal/network[网络]/2.3.1-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html","/unreal/network[网络]/2.3.2-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html","/unreal/network[网络]/2.3.2-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html","/unreal/network[网络]/2.4-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html","/unreal/network[网络]/2.4-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html","/unreal/network[网络]/2.5-GamePlayNetWork.html":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.5-GamePlayNetWork.html","/unreal/network[网络]/2.5-GamePlayNetWork.md":"/unreal/network_%E7%BD%91%E7%BB%9C_/2.5-GamePlayNetWork.html","/unreal/plugins[插件]/1-ViewLock.html":"/unreal/plugins_%E6%8F%92%E4%BB%B6_/1-ViewLock.html","/unreal/plugins[插件]/1-ViewLock.md":"/unreal/plugins_%E6%8F%92%E4%BB%B6_/1-ViewLock.html","/unreal/plugins[插件]/2-HightLight.html":"/unreal/plugins_%E6%8F%92%E4%BB%B6_/2-HightLight.html","/unreal/plugins[插件]/2-HightLight.md":"/unreal/plugins_%E6%8F%92%E4%BB%B6_/2-HightLight.html","/unreal/shader[着色器]/1-HPBar.html":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/1-HPBar.html","/unreal/shader[着色器]/1-HPBar.md":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/1-HPBar.html","/unreal/shader[着色器]/2-BRDF.html":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/2-BRDF.html","/unreal/shader[着色器]/2-BRDF.md":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/2-BRDF.html","/unreal/shader[着色器]/3-图片投影.html":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html","/unreal/shader[着色器]/3-图片投影.md":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html","/unreal/shader[着色器]/4-始于灯光.html":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html","/unreal/shader[着色器]/4-始于灯光.md":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html","/language/cpp/BaseGuide[基础概念]/0-where use a semicolon.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/0-where%20use%20a%20semicolon.html","/language/cpp/BaseGuide[基础概念]/0-where use a semicolon.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/0-where%20use%20a%20semicolon.html","/language/cpp/BaseGuide[基础概念]/1-function Declaration& Definition.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/1-function%20Declaration_%20Definition.html","/language/cpp/BaseGuide[基础概念]/1-function Declaration& Definition.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/1-function%20Declaration_%20Definition.html","/language/cpp/BaseGuide[基础概念]/10-Functor.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/10-Functor.html","/language/cpp/BaseGuide[基础概念]/10-Functor.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/10-Functor.html","/language/cpp/BaseGuide[基础概念]/2-Variable Declaration& Definition.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/2-Variable%20Declaration_%20Definition.html","/language/cpp/BaseGuide[基础概念]/2-Variable Declaration& Definition.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/2-Variable%20Declaration_%20Definition.html","/language/cpp/BaseGuide[基础概念]/3-Forward declaration.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html","/language/cpp/BaseGuide[基础概念]/3-Forward declaration.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html","/language/cpp/BaseGuide[基础概念]/4-VariablePassbyValue & Reference.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-VariablePassbyValue%20_%20Reference.html","/language/cpp/BaseGuide[基础概念]/4-VariablePassbyValue & Reference.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-VariablePassbyValue%20_%20Reference.html","/language/cpp/BaseGuide[基础概念]/4-function brace initialization.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-function%20brace%20initialization.html","/language/cpp/BaseGuide[基础概念]/4-function brace initialization.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-function%20brace%20initialization.html","/language/cpp/BaseGuide[基础概念]/5-copymode.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html","/language/cpp/BaseGuide[基础概念]/5-copymode.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html","/language/cpp/BaseGuide[基础概念]/7-i++and++i.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html","/language/cpp/BaseGuide[基础概念]/7-i++and++i.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html","/language/cpp/BaseGuide[基础概念]/8-operator.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/8-operator.html","/language/cpp/BaseGuide[基础概念]/8-operator.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/8-operator.html","/language/cpp/BaseGuide[基础概念]/9-Big Four.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/9-Big%20Four.html","/language/cpp/BaseGuide[基础概念]/9-Big Four.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/9-Big%20Four.html","/language/cpp/designer[设计模式]/1-Sington.html":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html","/language/cpp/designer[设计模式]/1-Sington.md":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html","/language/cpp/designer[设计模式]/2-SimpleFactory.html":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html","/language/cpp/designer[设计模式]/2-SimpleFactory.md":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html","/language/cpp/designer[设计模式]/3-FactoryPattern.html":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/3-FactoryPattern.html","/language/cpp/designer[设计模式]/3-FactoryPattern.md":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/3-FactoryPattern.html","/language/cpp/keywords[关键字]/1-Keywords continue& break.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/1-Keywords%20continue_%20break.html","/language/cpp/keywords[关键字]/1-Keywords continue& break.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/1-Keywords%20continue_%20break.html","/language/cpp/keywords[关键字]/2-Keywords inline.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/2-Keywords%20inline.html","/language/cpp/keywords[关键字]/2-Keywords inline.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/2-Keywords%20inline.html","/language/cpp/keywords[关键字]/3-Keywords new-delete-malloc-free.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html","/language/cpp/keywords[关键字]/3-Keywords new-delete-malloc-free.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html","/language/cpp/keywords[关键字]/4-1-final.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html","/language/cpp/keywords[关键字]/4-1-final.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html","/language/cpp/keywords[关键字]/4-Modifiers- public-protected-private.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html","/language/cpp/keywords[关键字]/4-Modifiers- public-protected-private.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html","/language/cpp/keywords[关键字]/5-Diamond Inheritance.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/5-Diamond%20Inheritance.html","/language/cpp/keywords[关键字]/5-Diamond Inheritance.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/5-Diamond%20Inheritance.html","/language/cpp/keywords[关键字]/6-Keywords friend.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html","/language/cpp/keywords[关键字]/6-Keywords friend.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html","/language/cpp/keywords[关键字]/7-Modifiers-Constants-Static.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html","/language/cpp/keywords[关键字]/7-Modifiers-Constants-Static.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html","/language/cpp/keywords[关键字]/8-Keywords sizeof.html":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/8-Keywords%20sizeof.html","/language/cpp/keywords[关键字]/8-Keywords sizeof.md":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/8-Keywords%20sizeof.html","/language/cpp/new[新特性]/1-Namespace scope.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/1-Namespace%20scope.html","/language/cpp/new[新特性]/1-Namespace scope.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/1-Namespace%20scope.html","/language/cpp/new[新特性]/2-Lvalues and Rvalues.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/2-Lvalues%20and%20Rvalues.html","/language/cpp/new[新特性]/2-Lvalues and Rvalues.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/2-Lvalues%20and%20Rvalues.html","/language/cpp/new[新特性]/3-lambda.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html","/language/cpp/new[新特性]/3-lambda.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html","/language/cpp/new[新特性]/4-default.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html","/language/cpp/new[新特性]/4-default.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html","/language/cpp/new[新特性]/5-union.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html","/language/cpp/new[新特性]/5-union.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html","/language/cpp/new[新特性]/6-aggregatetype.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html","/language/cpp/new[新特性]/6-aggregatetype.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html","/language/cpp/new[新特性]/7-for.html":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/7-for.html","/language/cpp/new[新特性]/7-for.md":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/7-for.html","/language/cpp/stl[标准模板]/1-template.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html","/language/cpp/stl[标准模板]/1-template.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html","/language/cpp/stl[标准模板]/10-Pair.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html","/language/cpp/stl[标准模板]/10-Pair.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html","/language/cpp/stl[标准模板]/11-Map.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/11-Map.html","/language/cpp/stl[标准模板]/11-Map.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/11-Map.html","/language/cpp/stl[标准模板]/2-stl.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","/language/cpp/stl[标准模板]/2-stl.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","/language/cpp/stl[标准模板]/3-vector.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html","/language/cpp/stl[标准模板]/3-vector.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html","/language/cpp/stl[标准模板]/4-deque.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html","/language/cpp/stl[标准模板]/4-deque.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html","/language/cpp/stl[标准模板]/5-fstream.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html","/language/cpp/stl[标准模板]/5-fstream.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html","/language/cpp/stl[标准模板]/6-stack.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/6-stack.html","/language/cpp/stl[标准模板]/6-stack.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/6-stack.html","/language/cpp/stl[标准模板]/7-queue.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/7-queue.html","/language/cpp/stl[标准模板]/7-queue.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/7-queue.html","/language/cpp/stl[标准模板]/8-List.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html","/language/cpp/stl[标准模板]/8-List.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html","/language/cpp/stl[标准模板]/9-Set.html":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/9-Set.html","/language/cpp/stl[标准模板]/9-Set.md":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/9-Set.html","/unreal/ui[界面]/commonui[ui框架]/1-CommonUI.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/1-CommonUI.html","/unreal/ui[界面]/commonui[ui框架]/1-CommonUI.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/1-CommonUI.html","/unreal/ui[界面]/slate[ui框架]/1-editortoolPlugin.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/1-editortoolPlugin.html","/unreal/ui[界面]/slate[ui框架]/1-editortoolPlugin.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/1-editortoolPlugin.html","/unreal/ui[界面]/umg[ui框架]/1-editortoolBP.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/1-editortoolBP.html","/unreal/ui[界面]/umg[ui框架]/1-editortoolBP.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/1-editortoolBP.html","/unreal/ui[界面]/umg[ui框架]/2-editortoolBP2.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/2-editortoolBP2.html","/unreal/ui[界面]/umg[ui框架]/2-editortoolBP2.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/2-editortoolBP2.html","/unreal/ui[界面]/umg[ui框架]/NameSlot.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/NameSlot.html","/unreal/ui[界面]/umg[ui框架]/NameSlot.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/NameSlot.html","/unreal/ui[界面]/umg[ui框架]/RichTextBlock.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/RichTextBlock.html","/unreal/ui[界面]/umg[ui框架]/RichTextBlock.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/RichTextBlock.html","/unreal/ui[界面]/umg[ui框架]/SafeZone.html":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/SafeZone.html","/unreal/ui[界面]/umg[ui框架]/SafeZone.md":"/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/SafeZone.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/0insidePtrgy.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/0insidePtrgy.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/1-insidePtr.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/1-insidePtr.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/1-insidePtr.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/1-insidePtr.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/2-constModifierPtr.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/2-constModifierPtr.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/3-Ptr-Array.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/3-Ptr-Array.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/4-Ptr-Struct.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/4-Ptr-Struct.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/5-Ptr-Enum.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/5-Ptr-Enum.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/6-Ptr-Function.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/6-Ptr-Function.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/6-Ptr-Function.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/6-Ptr-Function.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/7-Ptr-this.html":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/7-Ptr-this.html","/language/cpp/BaseGuide[基础概念]/ptr[指针]/7-Ptr-this.md":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/7-Ptr-this.html"}'),e=Object.fromEntries([["/",{loader:()=>s.e(4470).then(s.bind(s,2342)),meta:{y:"h",t:"主页",i:"home"}}],["/algorithm/01Swap.html",{loader:()=>s.e(8564).then(s.bind(s,29212)),meta:{d:1699973702e3,c:["algorithm"],e:'<h3>交换函数</h3>\n<p><code>swap</code> 是一个用于交换两个变量值的常见算法。在 C++ 中，可以通过以下两种方式实现 <code>swap</code> 函数：</p>\n<ol>\n<li>\n<p><strong>传统的交换方式：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    T temp <span class="token operator">=</span> a<span class="token punctuation">;</span>\n    a <span class="token operator">=</span> b<span class="token punctuation">;</span>\n    b <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Before swap: x = "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">", y = "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"After swap: x = "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">", y = "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n</ol>',r:{minutes:.65,words:195},y:"a",t:"Swap|交换函数",O:1}}],["/algorithm/",{loader:()=>s.e(4470).then(s.bind(s,88411)),meta:{d:1699973702e3,e:'\n<h2>数据结构</h2>\n<iframe src="//player.bilibili.com/player.html?aid=833445598&amp;bvid=BV1hg4y1Q74x&amp;cid=1331191342&amp;p=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="500"> </iframe>\n',r:{minutes:.11,words:32},y:"a",t:"算法"}}],["/preface/",{loader:()=>s.e(4470).then(s.bind(s,627)),meta:{y:"p",t:"写在前面",i:"lightbulb"}}],["/unreal/",{loader:()=>s.e(4470).then(s.bind(s,86632)),meta:{d:1698994095e3,c:["unreal"],g:["unreal"],e:'<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2>UnrealEngine</h2>\n<p>虚幻引擎（英语：Unreal Engine）是一款由Epic Games开发的游戏引擎。</p>\n\n<h2>前言</h2>\n<p>工欲善其事必先利其器。</p>\n<h2>软件下载</h2>\n<ol>\n<li><a href="/RenderDoc/unreal/%22https:/www.unrealengine.com/zh-CN/" target="_blank">中文官网</a></li>\n</ol>',r:{minutes:2.02,words:606},y:"a",t:"unreal",i:"u",O:2}}],["/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html",{loader:()=>s.e(4438).then(s.bind(s,37260)),meta:{d:170073813e4,c:["algorithm"],e:"<h2>选择排序 (Selection Sort)</h2>\n\n",r:{minutes:.82,words:245},y:"a",t:"Sort|选择排序(Selection Sort)",O:1}}],["/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html",{loader:()=>s.e(5232).then(s.bind(s,69672)),meta:{d:170073813e4,c:["algorithm"],e:"<h2>冒泡排序 (Bubble Sort)</h2>\n\n<h3>实现步骤</h3>\n<ol>\n<li>第一次，左边开始两两对比,如果左边的值大于右边的值,就交换它们，对比结束时末尾是最大数字</li>\n<li>第二次，剔除末尾，重复步骤1。</li>\n<li>依此类推，进行第三次、第四次，直到整个数组有序。</li>\n</ol>\n\n",r:{minutes:1.23,words:370},y:"a",t:"Sort|冒泡排序 (Bubble Sort)",O:2}}],["/language/cpp/",{loader:()=>s.e(4470).then(s.bind(s,50673)),meta:{d:1699887822e3,c:["c++"],g:["介绍","c++"],e:"<figure><figcaption></figcaption></figure>\n<h2>须知</h2>\n<blockquote>\n<p>万丈高楼平地起,这是U++的基石，这里许多演示都是基于UE蓝图/C++加深理解。</p>\n</blockquote>\n<h2>c++</h2>\n<p>C++是一种被广泛使用的计算机程序设计语言。它是一种通用程序设计语言，支持多重编程范式，例如过程化程序设计、面向对象程序设计、泛型程序设计和函数式程序设计等。</p>\n\n",r:{minutes:18.88,words:5665},y:"a",t:"c++",i:"c",O:1}}],["/language/java/1-lombok.html",{loader:()=>s.e(7654).then(s.bind(s,7463)),meta:{d:1723490066e3,e:'<h2>描述</h2>\n\n\n\n<h2>说明</h2>\n\n<h3>添加依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>{{ LOMBOK_VERSION }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:.73,words:220},y:"a",t:"JDK|1.Lombok",O:1}}],["/language/java/2-mybatis.html",{loader:()=>s.e(3948).then(s.bind(s,87678)),meta:{d:1723490066e3,e:'<h2>描述</h2>\n\n\n<h2>原生方法</h2>\n<h3>1. 引入mybatis依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- pom.xml --&gt;</span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:2.36,words:708},y:"a",t:"JDK|2.mybatis",O:2}}],["/language/java/3-swagger.html",{loader:()=>s.e(9994).then(s.bind(s,34479)),meta:{d:1723490066e3,e:'<h2>描述</h2>\n\n<h3>1. 引入Springdoc-openapi依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- pom.xml --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springdoc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springdoc-openapi-starter-webmvc-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div>',r:{minutes:2.39,words:716},y:"a",t:"JDK|2.Swagger&knife4j",O:3}}],["/language/java/4-springsecurity.html",{loader:()=>s.e(5784).then(s.bind(s,21486)),meta:{d:1723490066e3,e:'<h2>描述</h2>\n\n<h3>1. 引入Spring Security依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- pom.xml --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:.3,words:90},y:"a",t:"JDK|4.SpringSecurity",O:4}}],["/language/java/5-application.html",{loader:()=>s.e(6778).then(s.bind(s,8424)),meta:{d:1723490066e3,e:'<h2>描述</h2>\n\n<h3>配置信息书写|application.yml</h3>\n<div class="language-yaml" data-ext="yml" data-title="yml"><pre class="language-yaml"><code><span class="token key atrule">email</span><span class="token punctuation">:</span>\n  <span class="token key atrule">user</span><span class="token punctuation">:</span> username\n  <span class="token key atrule">password</span><span class="token punctuation">:</span> password\n  <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.163.com\n</code></pre></div>',r:{minutes:.47,words:142},y:"a",t:"JDK|application自定义配置信息",O:5}}],["/language/java/6-srpingvalidation.html",{loader:()=>s.e(7351).then(s.bind(s,8248)),meta:{d:1725226075e3,e:'<h2>描述</h2>\n\n<h3>1. 引入依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- pom.xml --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:1.83,words:550},y:"a",t:"JDK|springValidation",O:6}}],["/language/java/7-JWT.html",{loader:()=>s.e(3523).then(s.bind(s,40361)),meta:{d:1725226075e3,e:"<blockquote>\n<p>前文我们已经得知一些数据需要后端简单有验证，比如手机号位数、账号长度限制等。\n而HTTP又是一种无状态协议，不能像Websocket那样保持连接，一些登录后才能访问的数据，该如何判断验证？\n如何保证信息安全？</p>\n</blockquote>\n<h2>描述</h2>\n\n<h2>JWT的结构</h2>\n<figure><figcaption></figcaption></figure>\n\n<ol>\n<li><strong>Header（头部）</strong>：描述JWT的元数据</li>\n<li><strong>Payload（负载）</strong>：承载实际传输的信息</li>\n<li><strong>Signature（签名）</strong>：用于验证信息的完整性和真实性</li>\n</ol>",r:{minutes:3.94,words:1182},y:"a",t:"JDK|JWT",O:7}}],["/language/java/8-Redis.html",{loader:()=>s.e(5724).then(s.bind(s,89892)),meta:{d:1725369092e3,e:'<h2>描述</h2>\n\n<h2>Redis基本使用</h2>\n<h3>1. 引入依赖</h3>\n<div class="language-xml" data-ext="xml" data-title="xml"><pre class="language-xml"><code>   <span class="token comment">&lt;!-- pom.xml --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:.59,words:178},y:"a",t:"JDK|Redis",O:8}}],["/language/java/",{loader:()=>s.e(4470).then(s.bind(s,41317)),meta:{d:1723490066e3,c:["java"],g:["介绍","java"],e:'<h2>java</h2>\n<h2>环境变量配置</h2>\n<h3>一、jdk下载安装</h3>\n<ol>\n<li>jdk22下载链接:https://www.oracle.com/cn/java/technologies/downloads/#jdk22-windows</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start="2">\n<li>双击安装</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start="3">\n<li>路径不能有中文</li>\n</ol>',r:{minutes:1.5,words:449},y:"a",t:"java",i:"j",O:1}}],["/language/lua/",{loader:()=>s.e(4470).then(s.bind(s,74126)),meta:{d:1699270024e3,c:["lua"],g:["介绍","lua"],e:'<figure><figcaption></figcaption></figure>\n<h2>须知</h2>\n<blockquote>\n<p>本站只是简单介绍一下lua基础，具体入门还是看大佬教程吧，重点还是关注我自己的项目问题。</p>\n</blockquote>\n<h2>lua</h2>\n<p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，\n其设计目的是为了嵌入应用程序中，比如我们的主角<a href="%22https://www.unrealengine.com/zh-CN/download%22">unreal engine</a></p>\n\n',r:{minutes:6.79,words:2038},y:"a",t:"lua",i:"l",O:1}}],["/language/markdown/",{loader:()=>s.e(4470).then(s.bind(s,22541)),meta:{d:1698921358e3,c:["Markdown"],g:["介绍","Markdown"],e:"<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2>Markdown</h2>\n<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n\n",r:{minutes:19.2,words:5761},y:"a",t:"Markdown",i:"fab fa-markdown",O:2}}],["/language/markdown/demo.html",{loader:()=>s.e(7815).then(s.bind(s,83297)),meta:{d:1698921358e3,c:["Markdown"],g:["示例","Markdown"],e:'\x3c!-- markdownlint-disable --\x3e\n<h1 style="display: block;">一级标题</h1>\n\x3c!-- markdownlint-restore --\x3e\n<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token title important"><span class="token punctuation">#</span> 一级标题</span>\n</code></pre></div>',r:{minutes:2.98,words:894},y:"a",t:"Markdown 示例",i:"fab fa-markdown",O:2}}],["/tools/git/1-gitignore.html",{loader:()=>s.e(7802).then(s.bind(s,20551)),meta:{d:1698994095e3,c:["Git"],e:"<h2>忽略规则</h2>\n<blockquote>\n<p>首先你需要在项目根目录下新建一个 <code>.gitignore</code> 文件</p>\n</blockquote>\n<ul>\n<li>空格不匹配任何文件，可以作为分隔符号</li>\n<li>以 <code>#</code> 开始的为注释</li>\n<li><code>\\</code> 表示转义符</li>\n<li><code>!</code> 开始的表示否定，也就是开启跟踪</li>\n<li><code>/</code> 开始的表示项目根目录</li>\n<li><code>/</code> 结尾的表示某个文件夹，但是不匹配该文件</li>\n<li><code>**</code> 表示多级，其位置可在开始，中间，结束</li>\n<li><code>?</code> 表示单个字符</li>\n<li><code>[]</code> 表示单个字符列表</li>\n</ul>",r:{minutes:1.68,words:503},y:"a",t:"Git-1.忽略跟踪的文件",O:1}}],["/tools/git/2-repo-tool.html",{loader:()=>s.e(9804).then(s.bind(s,20863)),meta:{d:1698994095e3,c:["Git"],e:'<h2>前言</h2>\n<p>有个小任务，拉取 <a href="https://www.chromium.org/chromium-os/quick-start-guide" target="_blank" rel="noopener noreferrer">Chromium OS</a> 的代码：</p>\n<h2>实践</h2>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">${SOURCE_REPO}</span>\nrepo init <span class="token parameter variable">-u</span> https://chromium.googlesource.com/chromiumos/manifest.git\n\n<span class="token comment"># Optional: Make any changes to .repo/local_manifests/local_manifest.xml before syncing</span>\nrepo <span class="token function">sync</span>\n</code></pre></div>',r:{minutes:.35,words:104},y:"a",t:"Git-2.多仓库工具 Repo",O:2}}],["/tools/git/3-commit-message.html",{loader:()=>s.e(7555).then(s.bind(s,26864)),meta:{d:1698994095e3,c:["Git"],g:["husky"],e:'<h2>前言</h2>\n<p>规范的 commit message 有助于团队其它人员 review<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noopener noreferrer">Angular 规范</a>。</p>\n<h2>规范(commit)</h2>\n<p>Commit message 包括三个部分：</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span> <span class="token comment"># 必填</span>\n<span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span>\n<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> <span class="token comment"># 可选</span>\n<span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span>\n<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span> <span class="token comment"># 可选</span>\n</code></pre></div>',r:{minutes:2.77,words:832},y:"a",t:"Git-3.规范 Git 提交信息并生成日志",O:3}}],["/tools/git/4-submodule.html",{loader:()=>s.e(2805).then(s.bind(s,17588)),meta:{d:1698994095e3,c:["Git"],e:'<p>当希望某个项目依赖于另外一个项目，虽然有 lerna 的方案可以选择，但若希望它具有独立的 <code>issue</code>、<code>feature</code> 管理，那么可能需要 <code>multi-repo</code> 的形式。</p>\n<p>而 <code>submodule</code> 可以做到该行为。</p>\n<h2>使用 submodule</h2>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule <span class="token parameter variable">-h</span>\n\n<span class="token function">git</span> submodule <span class="token punctuation">[</span>--quiet<span class="token punctuation">]</span> <span class="token function">add</span> <span class="token punctuation">[</span>-b <span class="token operator">&lt;</span>branch<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token operator">|</span>--force<span class="token punctuation">]</span> <span class="token punctuation">[</span>--name <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--reference <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>--<span class="token punctuation">]</span> <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>path<span class="token operator">&gt;</span><span class="token punctuation">]</span>\n</code></pre></div>',r:{minutes:.47,words:142},y:"a",t:"Git-4.使用子模块",O:4}}],["/tools/git/5-path-problem.html",{loader:()=>s.e(1407).then(s.bind(s,68680)),meta:{d:1699253815e3,c:["Git"],g:["踩坑记录"],e:'<h2>问题详情</h2>\n\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2>解决思路</h2>\n<blockquote>\n<ol>\n<li>本地开发环境和部署服务器环境之间的路径解析方式不同所致。</li>\n</ol>\n</blockquote>\n<div class="language-html" data-ext="html" data-title="html"><pre html="" class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chatmessage</span> <span class="token attr-name">avatar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/assets/emoji/blzt.png<span class="token punctuation">"</span></span> <span class="token attr-name">:avatarWidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n处于项目的根目录，所以相对路径 blzt.png 可以直接找到图片。\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chatmessage</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',r:{minutes:1.01,words:304},y:"a",t:"Git-5.路径引发的思考",O:5}}],["/tools/git/6-rebase-merge.html",{loader:()=>s.e(1092).then(s.bind(s,51807)),meta:{d:1699373749e3,c:["Git"],g:["踩坑记录"],e:'<h2>问题详情</h2>\n\n<h2>解析</h2>\n<ol>\n<li>\n<p><strong>合并（Merge）：</strong></p>\n<ul>\n<li>合并是将两个分支的历史记录合并在一起，创建一个新的合并提交来整合两者的修改。</li>\n<li>合并会保留原分支的完整历史记录，因此可以清晰地看到哪些修改来自于哪个分支。</li>\n<li>合并会创建一个新的合并提交，这个提交有多个父节点，指向被合并的分支的最新提交和合并分支的最新提交。</li>\n</ul>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o   (分支A)\n \\         /\n  o---o---o   (分支B)\n</code></pre></div><ul>\n<li>合并后：</li>\n</ul>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>o---o---o---o---o---o---o   (合并提交)\n \\         /           /\n  o---o---o   (分支A)   (分支B)\n</code></pre></div></li>\n</ol>',r:{minutes:1.51,words:454},y:"a",t:"Git-6.变基(rebase)和合并(merge)区别？",O:6}}],["/tools/git/",{loader:()=>s.e(4470).then(s.bind(s,33986)),meta:{d:1698921635e3,c:["Git"],g:["介绍","Git"],e:'<h2>版本控制工具 Git</h2>\n<figure><figcaption></figcaption></figure>\n<p><a href="%22https://git-scm.com/%22">Git</a>是世界上先进的开源「分布式的版本控制系统」，而SVN是「集中式的版本控制系统」，SVN对于版本的管理集中于中央服务器中，而Git对于版本的管理可以在本地。</p>\n<h2>安装</h2>\n<p>工欲善其事必先利其器。<a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">下载地址</a></p>',r:{minutes:6.09,words:1827},y:"a",t:"Git",i:"code-compare"}}],["/tools/github/1-download-huge-project-from-github.html",{loader:()=>s.e(7501).then(s.bind(s,22073)),meta:{d:1698994095e3,c:["Github"],g:["踩坑记录"],e:"<h2>问题详情</h2>\n<p>每次下载的项目大一点就很慢。</p>\n<h2>解决方案</h2>\n<h3>1. 梯子</h3>\n<blockquote>\n<p>国内比较敏感，这个就自己解决吧。</p>\n</blockquote>\n<h3>2. 使用 Gitee（码云）</h3>\n<blockquote>\n<p>Gitee提供了下载 Github 项目的服务。</p>\n</blockquote>\n<figure><figcaption>github上复制代码</figcaption></figure>\n<figure><figcaption>码云上同步</figcaption></figure>",r:{minutes:.33,words:99},y:"a",t:"Github-1.仓库文件下载慢",O:1}}],["/tools/github/2-switch-multiple-github-accounts.html",{loader:()=>s.e(8633).then(s.bind(s,69492)),meta:{d:1698994095e3,c:["Github"],g:["踩坑记录"],e:'<h2>问题详情</h2>\n<p>有时候要对多个 github 账号进行切换。</p>\n<h2>解决思路</h2>\n<h3>前置准备</h3>\n<table>\n<thead>\n<tr>\n<th>账户名</th>\n<th>邮箱</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>username-1</td>\n<td>your_email_a@example.com</td>\n</tr>\n<tr>\n<td>username-n</td>\n<td>your_email_n@example.com</td>\n</tr>\n</tbody>\n</table>\n<div id="section1">\n</div>',r:{minutes:2.08,words:624},y:"a",t:"Github-2.切换多个账号",O:2}}],["/tools/github/3-sync-a-fork.html",{loader:()=>s.e(3162).then(s.bind(s,29807)),meta:{d:1698994095e3,c:["Github"],g:["踩坑记录"],e:'<h2>问题详情</h2>\n<p>如何同步一个fork?</p>\n<h2>解决思路</h2>\n<h3>1. 配置 upstream</h3>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看远程仓库</span>\n<span class="token function">git</span> remote <span class="token parameter variable">-v</span>\n<span class="token comment"># 以 `ant-design-vue` 示例</span>\n<span class="token function">git</span> remote <span class="token function">add</span> upstream https://github.com/vueComponent/ant-design-vue.git\n<span class="token function">git</span> remote <span class="token parameter variable">-v</span> <span class="token comment"># 验证</span>\n</code></pre></div>',r:{minutes:.28,words:84},y:"a",t:"Github-3.同步一个 fork",O:3}}],["/tools/github/4-ssh-push-failed.html",{loader:()=>s.e(8902).then(s.bind(s,147)),meta:{d:1698994095e3,c:["Github"],g:["踩坑记录"],e:'<h2>问题详情</h2>\n<p>本着能用一个IDE来完成各自的想法，尝试用<em>Rider</em>开发前端，结果一开始Push就出问题了。</p>\n<blockquote>\n<ol>\n<li>远程空仓库已经建立</li>\n</ol>\n</blockquote>\n<figure><figcaption>无法推送</figcaption></figure>\n<blockquote>\n<ol start="2">\n<li>无法推送项目</li>\n</ol>\n</blockquote>\n<p>git@github.com: Permission denied (publickey). fatal: Could not read from remote...</p>',r:{minutes:.59,words:178},y:"a",t:"Github-4.ssh key引发的push failed",O:4}}],["/tools/github/5-autoaction.html",{loader:()=>s.e(7927).then(s.bind(s,19505)),meta:{d:1699224774e3,c:["Github"],g:["踩坑记录"],n:!0,r:{minutes:.34,words:101},y:"a",t:"Github-5.自动部署",O:5}}],["/tools/github/",{loader:()=>s.e(4470).then(s.bind(s,25945)),meta:{d:1698921635e3,c:["Github"],g:["介绍","Github"],e:'<h2>Github</h2>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<p><a href="https://help.github.com/cn" target="_blank" rel="noopener noreferrer">Github</a> 是一个基于 web 的代码托管平台，它提供了版本控制和协作功能，使得开发者可以在项目中共同合作、管理和分享代码。</p>\n<h2>参考资料</h2>\n<ol>\n<li><a href="https://help.github.com/cn" target="_blank" rel="noopener noreferrer">Github</a></li>\n</ol>',r:{minutes:.27,words:80},y:"a",t:"Github",i:"fab fa-github"}}],["/tools/idea/1-errors.html",{loader:()=>s.e(7853).then(s.bind(s,64340)),meta:{d:1723490066e3,e:'<h2>包体镜像问题</h2>\n<h3>1. 找到路径</h3>\n<blockquote>\n<p>C:\\Users\\admin.m2\\wrapper\\dists\\apache-maven-3.9.7-bin\\3k9n615lchs6mp84v355m633uo\\apache-maven-3.9.7\\conf</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h3>2.修改镜像源</h3>\n<div class="language-xaml" data-ext="xaml" data-title="xaml"><pre class="language-xaml"><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n\n&lt;!--\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n"License"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n--&gt;\n\n&lt;settings xmlns="http://maven.apache.org/SETTINGS/1.2.0"\n          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 https://maven.apache.org/xsd/settings-1.2.0.xsd"&gt;\n\n    &lt;pluginGroups&gt;\n\n    &lt;/pluginGroups&gt;\n\n    &lt;proxies&gt;\n\n    &lt;/proxies&gt;\n\n    &lt;servers&gt;\n\n    &lt;/servers&gt;\n\n    &lt;mirrors&gt;\n\n        &lt;mirror&gt;\n            &lt;id&gt;alimaven&lt;/id&gt;\n            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n            &lt;name&gt;aliyun maven&lt;/name&gt;\n            &lt;url&gt;https://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;\n        &lt;/mirror&gt;\n\n        &lt;!-- 中央仓库1 --&gt;\n        &lt;mirror&gt;\n            &lt;id&gt;repo1&lt;/id&gt;\n            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;\n            &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;\n        &lt;/mirror&gt;\n\n        &lt;!-- 中央仓库2 --&gt;\n        &lt;mirror&gt;\n            &lt;id&gt;repo2&lt;/id&gt;\n            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;\n            &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;\n            &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt;\n        &lt;/mirror&gt;\n        &lt;mirror&gt;\n            &lt;id&gt;maven-default-http-blocker&lt;/id&gt;\n            &lt;mirrorOf&gt;external:http:*&lt;/mirrorOf&gt;\n            &lt;name&gt;Pseudo repository to mirror external repositories initially using HTTP.&lt;/name&gt;\n            &lt;url&gt;http://0.0.0.0/&lt;/url&gt;\n            &lt;blocked&gt;true&lt;/blocked&gt;\n        &lt;/mirror&gt;\n\n    &lt;/mirrors&gt;\n\n    &lt;profiles&gt;\n        &lt;profile&gt;\n            &lt;repositories&gt;\n                &lt;repository&gt;\n                    &lt;id&gt;spring&lt;/id&gt;\n                    &lt;url&gt;https://maven.aliyun.com/repository/spring&lt;/url&gt;\n                    &lt;releases&gt;\n                        &lt;enabled&gt;true&lt;/enabled&gt;\n                    &lt;/releases&gt;\n                    &lt;snapshots&gt;\n                        &lt;enabled&gt;true&lt;/enabled&gt;\n                    &lt;/snapshots&gt;\n                &lt;/repository&gt;\n                &lt;repository&gt;\n                    &lt;id&gt;central&lt;/id&gt;\n                    &lt;url&gt;http://host:port/content/groups/public&lt;/url&gt;\n                &lt;/repository&gt;\n            &lt;/repositories&gt;\n            &lt;pluginRepositories&gt;\n                &lt;pluginRepository&gt;\n                    &lt;id&gt;central&lt;/id&gt;\n                    &lt;url&gt;http://host:port/content/groups/public&lt;/url&gt;\n                &lt;/pluginRepository&gt;\n            &lt;/pluginRepositories&gt;\n        &lt;/profile&gt;\n    &lt;/profiles&gt;\n\n&lt;/settings&gt;\n</code></pre></div>',r:{minutes:1.12,words:337},y:"a",t:"网络导致的包体安装失败",O:1}}],["/tools/idea/",{loader:()=>s.e(4470).then(s.bind(s,37183)),meta:{d:1723490066e3,c:["IDEA"],e:"<h2>IDEA</h2>\n",r:{minutes:.03,words:10},y:"a",t:"IDEA",i:"i",O:5}}],["/tools/rider/1-errors.html",{loader:()=>s.e(7853).then(s.bind(s,32980)),meta:{d:170073813e4,c:["rider"],e:'<h2>修复Rider在UE5.2报错找不到DirectX符号问题</h2>\n<h2>问题复现</h2>\n\n<figure><figcaption></figcaption></figure>\n<h2>解决思路</h2>\n<figure><figcaption></figcaption></figure>\n<h3>1.下载文件</h3>\n<blockquote>\n<p>UE5.2的源码Github中下载<a href="https://github.com/EpicGames/UnrealEngine/blob/5.2/Engine/Source/ThirdParty/Windows/DirectX/DirectX.Build.cs" target="_blank" rel="noopener noreferrer">DirectX.Build.cs</a><br>\n放入<span style="color : red ;">UE_5.2(UE根目录)\\Engine\\Source\\ThirdParty\\Windows\\DirectX</span></p>\n</blockquote>',r:{minutes:.84,words:253},y:"a",t:"Rider-1.修复在UE5.2报错找不到DirectX符号问题",O:1}}],["/tools/rider/2-poddoc.html",{loader:()=>s.e(482).then(s.bind(s,99823)),meta:{d:1704191403e3,c:["rider"],e:'<h2>word转md</h2>\n\n\n<h2>1.下载pandoc.exe</h2>\n<p><a href="https://github.com/jgm/pandoc/tree/3.1.9" target="_blank" rel="noopener noreferrer">https://github.com/jgm/pandoc/tree/3.1.9</a></p>\n<h2>2.安装</h2>\n<figure><figcaption></figcaption></figure>\n<h2>3. Powershell或者CMD</h2>\n\n<figure><figcaption></figcaption></figure>',r:{minutes:.64,words:193},y:"a",t:"Rider-2.Word转MD",O:2}}],["/tools/rider/3-npm.html",{loader:()=>s.e(8291).then(s.bind(s,57283)),meta:{d:1723490066e3,c:["rider"],e:"<h2>NPM老包升级</h2>\n\n<h3>1. npm-check-updates</h3>\n<figure><figcaption></figcaption></figure>\n<h3>2. ncu -u</h3>\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.13,words:38},y:"a",t:"Rider-3.Npm自动更新",O:3}}],["/tools/rider/",{loader:()=>s.e(4470).then(s.bind(s,38765)),meta:{d:1699887822e3,c:["rider"],g:["介绍","rider"],e:'<h2>Rider</h2>\n<figure><figcaption></figcaption></figure>\n<p><a href="https://www.jetbrains.com/zh-cn/rider/" target="_blank" rel="noopener noreferrer">Rider</a>\nRider 是一个成熟的跨平台 .NET IDE。 Rider 可以打开，管理，构建和调试各种基于 .NET Framework，Mono 和 .NET Core 的解决方案，并为 .NET 开发中使用的大多数语言提供编辑支持：C#, VB.NET, ASP.NET 语法，XAML, XML, JavaScript, TypeScript, JSON, HTML, CSS, 和 SQL。</p>',r:{minutes:.31,words:94},y:"a",t:"Rider",i:"r",O:4}}],["/tools/visualstudio/1-classtool.html",{loader:()=>s.e(8466).then(s.bind(s,53061)),meta:{d:1703391495e3,c:["visualstudio"],e:"<h2>类图查看工具</h2>\n<h3>打开installer</h3>\n<figure><figcaption></figcaption></figure>\n<h3>安装类设计器</h3>\n<figure><figcaption></figcaption></figure>\n<h3>启动一个UE项目</h3>\n<figure><figcaption></figcaption></figure>\n<h3>任意一个类右键——点击查看类图</h3>\n",r:{minutes:.18,words:54},y:"a",t:"vs-1.类图查看工具",O:1}}],["/tools/visualstudio/",{loader:()=>s.e(4470).then(s.bind(s,12498)),meta:{d:1703391495e3,c:["visualStudio"],g:["介绍","visualStudio"],e:"<h2>VisualStudio</h2>\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.06,words:18},y:"a",t:"visual Studio",i:"code",O:3}}],["/tools/vscode/1-errors.html",{loader:()=>s.e(7853).then(s.bind(s,99661)),meta:{d:170073813e4,c:["vscode"],e:'<h2>无法监视文件变化</h2>\n<p>其实这个问题存在已久，但是一直没有去处理。</p>\n<p>当 VSCode 弹出该提示时会给一个对应的<a href="https://code.visualstudio.com/docs/setup/linux#_visual-studio-code-is-unable-to-watch-for-file-changes-in-this-large-workspace-error-enospc" target="_blank" rel="noopener noreferrer">链接</a>，执行它提供的命令：</p>\n<div class="language-bash" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">cat</span> /proc/sys/fs/inotify/max_user_watches <span class="token comment"># 19200</span>\n</code></pre></div>',r:{minutes:.97,words:291},y:"a",t:"vscode-1.处理 VSCode 错误",O:1}}],["/tools/vscode/2-fix-todo-highlight-links.html",{loader:()=>s.e(4410).then(s.bind(s,87438)),meta:{d:1698994095e3,c:["vscode"],e:'<p><a href="https://github.com/wayou/vscode-todo-highlight" target="_blank" rel="noopener noreferrer">VSCODE-TODO-HIGHLIGHT</a> 在 linux 平台下输出所有事项时对路径进行了编码，导致跳转失败。</p>\n<h2>修复</h2>\n<p>由于作者许久未维护且不想发包，所以本地进行修改即可，打开插件安装位置 <code>~/.vscode/extensions</code>，找到 <code>vscode-todo-highlight</code> 的 <code>util</code> 文件：</p>',r:{minutes:.39,words:118},y:"a",t:"vscode-2.修复 TODO HIGHLIGHT 的链接",O:2}}],["/tools/vscode/",{loader:()=>s.e(4470).then(s.bind(s,4863)),meta:{d:1698921635e3,c:["vscode"],g:["介绍","VSCode"],e:'<h2>VSCode</h2>\n<figure><figcaption></figcaption></figure>\n<p><a href="https://code.visualstudio.com/docs" target="_blank" rel="noopener noreferrer">Visual Studio Code</a>（简称 VS Code）是一款由微软开发且跨平台的免费源代码编辑器。\n如果部署Rider开发UEc++更好真的极力推荐使用。</p>\n<h2>下载 VSCode</h2>\n<p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">下载地址</a></p>',r:{minutes:2.35,words:706},y:"a",t:"VSCode",i:"code",O:3}}],["/tools/vuepress/",{loader:()=>s.e(4470).then(s.bind(s,53495)),meta:{d:1699224774e3,c:["vuepress"],g:["介绍","VuePress"],e:'<h2>VuePress</h2>\n<figure><figcaption></figcaption></figure>\n<p><a href="%22https://v2.vuepress.vuejs.org/%22">VuePress</a> 是一个以 Markdown 为中心的静态网站生成器。你可以使用 <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener noreferrer">Markdown</a> 来书写内容 (如文档、博客等) ，然后 VuePress 会帮助你生成一个静态网站来展示它们。\n<br>我们这里使用的是<a href="%22https://theme-hope.vuejs.press/zh/%22">VuePress Theme Hope</a> 版本。</p>\n',r:{minutes:.32,words:95},y:"a",t:"VuePress",i:"fab fa-vuejs",O:3}}],["/tools/vuepress/vue.html",{loader:()=>s.e(4542).then(s.bind(s,2979)),meta:{d:1727252804e3,c:["vue"],e:'<h2>基本指令</h2>\n<figure><figcaption></figcaption></figure>\n<h3>指令官网</h3>\n<p><a href="https://cn.vuejs.org/api/built-in-directives.html#v-bind" target="_blank" rel="noopener noreferrer">https://cn.vuejs.org/api/built-in-directives.html#v-bind</a></p>\n',r:{minutes:.11,words:32},y:"a",t:"vue2.基本使用",O:1}}],["/tools/vuepress/vuepress-add-comp.html",{loader:()=>s.e(5501).then(s.bind(s,40752)),meta:{d:1699224774e3,c:["vuepress"],e:'<h2>问题描述</h2>\n<p>vuepress添加自定义组件-以实现聊天气泡为例。</p>\n<h2>实现目标</h2>\n\n<h2>实现思路</h2>\n<h3>方案1：Markdown镶嵌HTML</h3>\n<h4>1. 添加到 VuePress 项目中的 Markdown 文件中：</h4>\n<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-container<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chat-message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">:style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{ width: avatarWidth + \'px\' }<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>头像<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是一条聊天消息。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre></div>',r:{minutes:1.9,words:569},y:"a",t:"vuepress-1.添加自定义组件",O:1}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html",{loader:()=>s.e(4146).then(s.bind(s,3646)),meta:{d:1704306851e3,c:["u++"],e:"<blockquote>\n<p>天地除开，诞生了第一缕<code>UObject</code>，各自进化成Actor+Component、Level、World、WorldContext、GameInstance等。<br>\n有这么一天，UEngine大佬出现自称为帝，掌管所有UObject，还给各种UObject划分职责。有的管理游戏逻辑、有的管理游戏表现、有的管理游戏数据。</p>\n</blockquote>\n",r:{minutes:13.95,words:4184},y:"a",t:"c1.GamePlay|导言",O:1}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/10-GameSave.html",{loader:()=>s.e(5361).then(s.bind(s,23597)),meta:{d:17059468e5,c:["u++"],e:'\n<h3>JSON</h3>\n<p><strong>1. 安装官方插件</strong></p>\n<figure><figcaption></figcaption></figure>\n<p><strong>2. Build.cs</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>PrivateDependencyModuleNames<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"JsonUtilities"</span> <span class="token punctuation">,</span><span class="token string">"Json"</span><span class="token punctuation">,</span> <span class="token string">"JsonBlueprintUtilities"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.91,words:273},y:"a",t:"c10.GameLoad&Save",O:1e3}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html",{loader:()=>s.e(8115).then(s.bind(s,83103)),meta:{d:17059468e5,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n<h3>1.找到定义</h3>\n<figure><figcaption></figcaption></figure>\n<h3>2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code> P_NATIVE_BEGIN\n    bResult <span class="token operator">=</span> <span class="token class-name">FJsonObjectConverter</span><span class="token double-colon punctuation">::</span><span class="token function">UStructToJsonObjectString</span><span class="token punctuation">(</span>StructProperty<span class="token operator">-&gt;</span>Struct<span class="token punctuation">,</span> ValuePtr<span class="token punctuation">,</span> OutJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    P_NATIVE_END\n</code></pre></div>',r:{minutes:.43,words:130},y:"a",t:"c10.1JsonToString",O:1001}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/11-DevelopSettings.html",{loader:()=>s.e(1647).then(s.bind(s,13350)),meta:{d:1730368163e3,c:["u++"],e:'\n\n\n<figure><figcaption></figcaption></figure>\n\n<h2>方案1 ISettingsModule</h2>\n<ol>\n<li>模块激活/销毁时</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token keyword">void</span> <span class="token class-name">FCommonGameModule</span><span class="token double-colon punctuation">::</span><span class="token function">StartupModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">RegisterSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token class-name">FCommonGameModule</span><span class="token double-colon punctuation">::</span><span class="token function">ShutdownModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">UObjectInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function">UnregisterSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.41,words:422},y:"a",t:"c11.编辑器配置属性|DevelopSettings",O:1100}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html",{loader:()=>s.e(4616).then(s.bind(s,70062)),meta:{d:1704306851e3,c:["u++"],e:"\n<h2>1. 新建GameMode类</h2>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>类名</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>APawn class</td>\n<td>游戏中的角色</td>\n<td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td>\n</tr>\n<tr>\n<td>AHUD class</td>\n<td>Heads-Up Display (HUD)</td>\n<td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td>\n</tr>\n<tr>\n<td>APlayerController class</td>\n<td>玩家控制器</td>\n<td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td>\n</tr>\n<tr>\n<td>AGameState class</td>\n<td>游戏状态</td>\n<td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td>\n</tr>\n<tr>\n<td>APlayerState class</td>\n<td>玩家状态</td>\n<td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td>\n</tr>\n<tr>\n<td>ASpectatorPawn class</td>\n<td>观察者角色</td>\n<td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:1.47,words:440},y:"a",t:"c2.GameMode|游戏模式",O:200}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/3-Singleton.html",{loader:()=>s.e(6139).then(s.bind(s,92482)),meta:{d:1704306851e3,c:["u++"],e:'\n\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>  \n<span class="token punctuation">}</span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyClass<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//Do Someting</span>\n    <span class="token keyword">delete</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:6.75,words:2024},y:"a",t:"c3.Singleton|单例",O:300}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/4-Subsystem.html",{loader:()=>s.e(9120).then(s.bind(s,7331)),meta:{d:1704306851e3,c:["u++"],e:'\n\n<figure><figcaption></figcaption></figure>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/** Subsystems are auto instanced classes that share the lifetime of certain engine constructs\n * \n *\tCurrently supported Subsystem lifetimes are:\n *\t\tEngine\t\t -&gt; inherit UEngineSubsystem\n *\t\tEditor\t\t -&gt; inherit UEditorSubsystem\n *\t\tGameInstance -&gt; inherit UGameInstanceSubsystem\n *\t\tWorld\t\t -&gt; inherit UWorldSubsystem\n *\t\tLocalPlayer\t -&gt; inherit ULocalPlayerSubsystem\n *\n *\n *\tNormal Example:\n *\t\tclass UMySystem : public UGameInstanceSubsystem\n *\tWhich can be accessed by:\n *\t\tUGameInstance* GameInstance = ...;\n *\t\tUMySystem* MySystem = GameInstance-&gt;GetSubsystem&lt;UMySystem&gt;();\n *\n *\tor the following if you need protection from a null GameInstance\n *\t\tUGameInstance* GameInstance = ...;\n *\t\tUMyGameSubsystem* MySubsystem = UGameInstance::GetSubsystem&lt;MyGameSubsystem&gt;(GameInstance);\n *\n *\n *\tYou can get also define interfaces that can have multiple implementations.\n *\tInterface Example :\n *      MySystemInterface\n *    With 2 concrete derivative classes:\n *      MyA : public MySystemInterface\n *      MyB : public MySystemInterface\n *\n *\tWhich can be accessed by:\n *\t\tUGameInstance* GameInstance = ...;\n *\t\tconst TArray&lt;UMyGameSubsystem*&gt;&amp; MySubsystems = GameInstance-&gt;GetSubsystemArray&lt;MyGameSubsystem&gt;();\n *\n */</span>\n</code></pre></div>',r:{minutes:9.21,words:2764},y:"a",t:"c4.Subsystem|子系统",O:400}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/4.1-SubsystemUse.html",{loader:()=>s.e(6986).then(s.bind(s,15478)),meta:{d:1704306851e3,c:["u++"],e:'<h2>Subsystem|实践</h2>\n\n<h3>1. 继承对应的子系统</h3>\n<div class="language-markdown" data-ext="md" data-title="md"><pre class="language-markdown"><code><span class="token list punctuation">-</span> 引擎\t\t-&gt; 继承 UEngineSubsystem\n<span class="token list punctuation">-</span> 编辑器\t\t-&gt; 继承 UEditorSubsystem\n<span class="token list punctuation">-</span> 游戏实例\t-&gt; 继承 UGameInstanceSubsystem\n<span class="token list punctuation">-</span> 世界\t\t-&gt; 继承 UWorldSubsystem\n<span class="token list punctuation">-</span> 本地玩家\t-&gt; 继承 ULocalPlayerSubsystem\n</code></pre></div>',r:{minutes:1.03,words:310},y:"a",t:"c4.1Subsystem|实践",O:401}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/4.2-EnhancedInput.html",{loader:()=>s.e(8117).then(s.bind(s,73015)),meta:{d:1704306851e3,c:["u++"],e:"<h3>导读</h3>\n\n<h2>EnhancedInput|增强输入系统</h2>\n\n<h3>1.插件</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>2.项目设置</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>3.输入动作（Input Actions）</h3>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>",r:{minutes:8.56,words:2567},y:"a",t:"c4.2Subsystem|EnhancedInput",O:402}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/4.3-EnhancedInput.html",{loader:()=>s.e(6914).then(s.bind(s,92700)),meta:{d:172293278e4,c:["u++"],e:'<h3>导读</h3>\n\n<h2>EnhancedInput|Action绑定</h2>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">const</span> APlayerController<span class="token operator">*</span> PC <span class="token operator">=</span> <span class="token function">GetOwningPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tLocalPlayer <span class="token operator">=</span> PC<span class="token operator">-&gt;</span><span class="token function">GetLocalPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>LocalPlayer<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>UEnhancedInputLocalPlayerSubsystem<span class="token operator">*</span> Subsystem <span class="token operator">=</span> LocalPlayer<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetSubsystem</span><span class="token generic class-name"><span class="token operator">&lt;</span>UEnhancedInputLocalPlayerSubsystem<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t<span class="token comment">// 检查是否已经添加了输入映射上下文</span>\n\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Subsystem<span class="token operator">-&gt;</span><span class="token function">HasMappingContext</span><span class="token punctuation">(</span>InputMappingContext<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t\tSubsystem<span class="token operator">-&gt;</span><span class="token function">AddMappingContext</span><span class="token punctuation">(</span>InputMappingContext<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 绑定聊天切换动作</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>UEnhancedInputComponent<span class="token operator">*</span> EnhancedInputComponent <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>UEnhancedInputComponent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">GetOwningPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>InputComponent<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>InputAction_ChatToggle<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tEnhancedInputComponent<span class="token operator">-&gt;</span><span class="token function">BindAction</span><span class="token punctuation">(</span>InputAction_ChatToggle<span class="token punctuation">,</span> ETriggerEvent<span class="token double-colon punctuation">::</span>Triggered<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>UChatWidgetBase<span class="token double-colon punctuation">::</span>HandleChatAction<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.37,words:412},y:"a",t:"c4.3Subsystem|EnhancedInput优先级",O:403}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/4.4-EnhancedInput.html",{loader:()=>s.e(4611).then(s.bind(s,21581)),meta:{d:172293278e4,c:["u++"],e:"<h2>前置条件</h2>\n<blockquote>\n<p>安装插件CommonUI</p>\n</blockquote>\n<h2>实践</h2>\n<blockquote>\n<p>日常心血来潮，想给我的游戏菜单背景加一个角色查看功能，即：可以操作UI的同时控制游戏模型（比如旋转、缩放等）。</p>\n</blockquote>\n\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p>悲剧发生了！</p>\n</blockquote>\n\n",r:{minutes:6.62,words:1985},y:"a",t:"c4.4Subsystem|EnhancedInput利用路由显示鼠标",O:404}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html",{loader:()=>s.e(1895).then(s.bind(s,4454)),meta:{d:1704306851e3,c:["u++"],e:'\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token keyword">class</span> <span class="token class-name">IMyInterface</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 实现接口的类</span>\n    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IMyInterface</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>\n        <span class="token punctuation">{</span>\n            <span class="token comment">// 实现接口方法的具体逻辑</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.26,words:378},y:"a",t:"c5.Interface|接口",O:500}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/6-Delegate.html",{loader:()=>s.e(3190).then(s.bind(s,28632)),meta:{d:1704306851e3,c:["u++"],e:"<h2>委托|Delegate</h2>\n\n\n<figure><figcaption></figcaption></figure>\n\n\n<ol>\n<li>\n<p><strong>泛型但类型安全的方式：</strong></p>\n<ul>\n<li>委托是一种泛型但类型安全的机制，允许在运行时动态绑定到对象的成员函数。这意味着你可以在不知道对象类型的情况下，安全地调用其成员函数。</li>\n</ul>\n</li>\n<li>\n<p><strong>动态绑定到任意对象的成员函数：</strong></p>\n<ul>\n<li>委托允许你动态地绑定到任意对象的成员函数。这种灵活性使得在运行时能够决定要调用的函数，而不需要在编译时就确定。</li>\n</ul>\n</li>\n<li>\n<p><strong>安全地复制委托对象：</strong></p>\n<ul>\n<li>复制委托对象是安全的。这意味着你可以创建一个委托的副本，而不会影响原始委托的状态。每个委托对象都独立于其他委托对象。</li>\n</ul>\n</li>\n<li>\n<p><strong>值传递委托需要在堆上分配内存：</strong></p>\n<ul>\n<li>值传递委托，即通过值传递委托对象，需要在堆上分配内存。这样的操作相对较慢，因此通常不推荐。最好通过引用传递委托，以避免额外的内存分配。</li>\n</ul>\n</li>\n<li>\n<p><strong>尽量通过引用传递委托：</strong></p>\n<ul>\n<li>为了避免性能开销，推荐通过引用传递委托，而不是通过值传递。这样可以避免在堆上分配内存，提高代码执行效率。</li>\n</ul>\n</li>\n</ol>",r:{minutes:14.9,words:4471},y:"a",t:"c6.Delegate|委托",O:600}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/6.1-DelegateUse.html",{loader:()=>s.e(8570).then(s.bind(s,95737)),meta:{d:1704306851e3,c:["u++"],e:'<h2>单播委托</h2>\n<h3>1. <strong>声明委托：</strong></h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">DECLARE_DELEGATE</span><span class="token punctuation">(</span>FMyDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无参数</span>\n<span class="token function">DECLARE_DELEGATE_OneParam</span><span class="token punctuation">(</span>FMyDelegateOneParam<span class="token punctuation">,</span>int32<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//带参数</span>\n</code></pre></div>',r:{minutes:3.78,words:1134},y:"a",t:"c6.1Delegate|实践",O:601}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/7-GameFeature.html",{loader:()=>s.e(698).then(s.bind(s,30595)),meta:{d:1704306851e3,c:["u++"],e:"<h2>GameplayFeature</h2>\n<p>游戏功能（Game Features） 和 模块化Gameplay（Modular Gameplay） 插件可以帮助开发人员为项目创建独立功能。</p>\n<h3>概念</h3>\n\n\n<figure><figcaption></figcaption></figure>\n\n\n<h2>实践</h2>\n<h3>1.插件</h3>\n<figure><figcaption></figcaption></figure>\n<h3>2.错误提示</h3>\n<figure><figcaption></figcaption></figure>\n<h3>3. 根据游戏模式设置特性</h3>",r:{minutes:2.57,words:772},y:"a",t:"c7.GF|GameplayFeature",O:700}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/8-GAS.html",{loader:()=>s.e(4946).then(s.bind(s,29461)),meta:{d:1704306851e3,c:["u++"],e:'<h2>GAS概述</h2>\n<p>Gameplay技能系统（Gameplay Ability System） 是构建Actor可以拥有和触发的技能和交互的一种框架。</p>\n<h2>基本流程</h2>\n<h3>插件引入</h3>\n<figure><figcaption></figcaption></figure>\n<h3>模块引入</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>PublicDependencyModuleNames<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span><span class="token keyword">new</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> \n<span class="token string">"GameplayTags"</span><span class="token punctuation">,</span>\n<span class="token string">"GameplayTasks"</span><span class="token punctuation">,</span>\n<span class="token string">"GameplayAbilities"</span><span class="token punctuation">,</span> \n</code></pre></div>',r:{minutes:15.83,words:4749},y:"a",t:"c8.GAS|Gameplay Ability System",O:800}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/8.1-GASGE.html",{loader:()=>s.e(6339).then(s.bind(s,38382)),meta:{d:1708130422e3,c:["u++"],e:"<h2><strong>GameplayEffect</strong></h2>\n<p>GameplayEffect简称GE，它是技能Buff、被动技能、技能伤害等各种游戏效果的抽象</p>\n<blockquote>\n<p>本章是对GE各个属性的理解。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h2><strong>Periodic</strong></h2>\n<h3>Period</h3>\n<figure><figcaption></figcaption></figure>\n<h3>Periodic Inhibition Policy</h3>",r:{minutes:3.56,words:1069},y:"a",t:"c8.1GAS|GameplayEffect属性理解",O:801}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/8.2-GASAbility.html",{loader:()=>s.e(8114).then(s.bind(s,80136)),meta:{d:1729899273e3,c:["u++"],e:'<h2>回顾</h2>\n\n<h3>网络权限</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<h3>GiveAbility</h3>\n\n\n<figure><figcaption></figcaption></figure>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintAuthorityOnly<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"Gameplay Abilities"</span><span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Give Ability"</span><span class="token punctuation">,</span> ScriptName <span class="token operator">=</span> <span class="token string">"GiveAbility"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tFGameplayAbilitySpecHandle <span class="token function">K2_GiveAbility</span><span class="token punctuation">(</span>TSubclassOf<span class="token operator">&lt;</span>UGameplayAbility<span class="token operator">&gt;</span> AbilityClass<span class="token punctuation">,</span> int32 Level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> int32 InputID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:6.07,words:1820},y:"a",t:"c8.1GAS|GameplayAbility实践-翻滚、受击",O:801}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/9-Spectating.html",{loader:()=>s.e(8974).then(s.bind(s,12424)),meta:{d:1704306851e3,c:["u++"],e:'<h2>Spectating System</h2>\n<p>观战系统直观的分为两类，一类是主动观战系统比如比赛、观战模式。一类则是被动的，比如死亡观战。</p>\n\n\n<h3>1.观战类|SpectatorPawn</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>UMySpectatorPawnr <span class="token operator">:</span> <span class="token keyword">public</span> APawn\n</code></pre></div>',r:{minutes:.68,words:203},y:"a",t:"c9.Spectating System|观战系统",O:900}}],["/unreal/error_%E9%94%99%E8%AF%AF_/01Build%20Fail.html",{loader:()=>s.e(1015).then(s.bind(s,6124)),meta:{d:1706221621e3,c:["u++"],e:"\n<figure><figcaption></figcaption></figure>\n<h2>解决思路</h2>\n<ol>\n<li>\n<p><strong>检查代码中的拼写和语法错误</strong>：</p>\n<ul>\n<li>确保代码中没有拼写错误或语法错误，可能导致编译器无法识别符号。</li>\n</ul>\n</li>\n<li>\n<p><strong>检查头文件和库的包含路径</strong>：</p>\n<ul>\n<li>确保你在项目中正确包含了所需的头文件和库文件。</li>\n</ul>\n</li>\n<li>\n<p><strong>确保依赖项正确链接</strong>：</p>\n<ul>\n<li>确保项目正确链接了所需的库文件，一般情况下都是对应的<code>xxx.build.cs</code>没有引入模块依赖。</li>\n</ul>\n</li>\n</ol>",r:{minutes:.82,words:247},y:"a",t:"无法解析外部符号，无法解析外部命令 和命令“xxx”已退出。",O:1,s:"Error1.无法解析外部符号..."}}],["/unreal/error_%E9%94%99%E8%AF%AF_/02ClassRedirects.html",{loader:()=>s.e(1315).then(s.bind(s,28208)),meta:{d:1706221621e3,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n<h2>问题复现</h2>\n\n<figure><figcaption></figcaption></figure>\n<h2>解决思路</h2>\n<h3>1. DefaultEngine/Game.ini添加对应类的重定向</h3>\n<div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">CoreRedirects</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">+ClassRedirects</span><span class="token punctuation">=</span><span class="token value attr-value">(OldName="/Script/Lyra.GameUIPolicy(旧项目名.类)",NewName="/Script/NEW.GameUIPolicy(新项目名.类)")</span>\n</code></pre></div>',r:{minutes:.53,words:160},y:"a",t:"Error2.项目迁移蓝图父类重定向",O:2}}],["/unreal/error_%E9%94%99%E8%AF%AF_/03CreateSessionError.html",{loader:()=>s.e(8555).then(s.bind(s,28715)),meta:{d:1706221621e3,c:["u++"],e:'\n<h3>解决思路</h3>\n<div class="language-ini" data-ext="ini" data-title="ini"><pre class="language-ini"><code><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">/Script/Engine.GameEngine</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">+NetDriverDefinitions</span><span class="token punctuation">=</span><span class="token value attr-value">(DefName="GameNetDriver",DriverClassName="OnlineSubsystemSteam.SteamNetDriver",DriverClassNameFallback="OnlineSubsystemUtils.IpNetDriver")</span>\n\n<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">OnlineSubsystem</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">DefaultPlatformService</span><span class="token punctuation">=</span><span class="token value attr-value">Steam</span>\n\n<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">OnlineSubsystemSteam</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">bEnabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">SteamDevAppId</span><span class="token punctuation">=</span><span class="token value attr-value">480</span>\n<span class="token comment">;这一行必须的</span>\n<span class="token key attr-name">bInitServerOnClient</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n\n<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">/Script/OnlineSubsystemSteam.SteamNetDriver</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">NetConnectionClassName</span><span class="token punctuation">=</span><span class="token value attr-value">OnlineSubsystemSteam.SteamNetConnection</span>\n</code></pre></div>',r:{minutes:.3,words:89},y:"a",t:"Error3.会话创建失败问题",O:3}}],["/unreal/error_%E9%94%99%E8%AF%AF_/04EncodeError.html",{loader:()=>s.e(7086).then(s.bind(s,10280)),meta:{d:1706221621e3,c:["u++"],e:"\n\n<h3>解决思路</h3>\n<figure><figcaption></figcaption></figure>\n\n<h3>扩展阅读</h3>\n\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字符集</td>\n<td>一组字符的集合，每个字符有唯一的数值（码点）和表示方式。常见有ASCII、ISO-8859、UTF-8等。</td>\n</tr>\n<tr>\n<td>Unicode</td>\n<td>全球字符编码标准，为世界上各种语言和符号提供唯一的数字代码，每个字符有唯一的码点。</td>\n</tr>\n<tr>\n<td>UTF-8</td>\n<td>一种变长的字符编码方式，用于存储Unicode字符，兼容ASCII，使用1到4个字节表示不同范围的字符。</td>\n</tr>\n<tr>\n<td>UTF-16</td>\n<td>Unicode字符编码的变体，使用16位编码单元表示字符，使用1或2个16位编码单元表示不同范围的字符。</td>\n</tr>\n<tr>\n<td>字符编码</td>\n<td>规定字符如何映射到数字编码的规则，决定了字符在计算机内存和文本文件中的表示方式。常见有ASCII、ISO-8859、UTF-8、UTF-16等。</td>\n</tr>\n<tr>\n<td>乱码</td>\n<td>使用不同字符编码读取或显示文本时导致的问题，表现为预期的字符无法正确显示或被错误解释。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:1.44,words:432},y:"a",t:"Error4.编码格式导致的中文乱码",O:4}}],["/unreal/error_%E9%94%99%E8%AF%AF_/05GameFeatureError.html",{loader:()=>s.e(4473).then(s.bind(s,69375)),meta:{d:1706221621e3,c:["u++"],e:"\n<figure><figcaption></figcaption></figure>\n\n<h3>解决思路</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.48,words:143},y:"a",t:"Error5.GameplayFeature不显示插件目录",O:5}}],["/unreal/error_%E9%94%99%E8%AF%AF_/06Mouse.html",{loader:()=>s.e(1631).then(s.bind(s,73241)),meta:{d:1706221621e3,c:["u++"],e:"\n<h3>解决思路</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<blockquote>\n<p>编辑器中</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n\n<blockquote>\n<p>独立运行</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>",r:{minutes:.82,words:247},y:"a",t:"Error6.增强输入优先级",O:6}}],["/unreal/error_%E9%94%99%E8%AF%AF_/07SubsystemError.html",{loader:()=>s.e(8710).then(s.bind(s,23764)),meta:{d:1706221621e3,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\tInventorySubsystem <span class="token operator">=</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetGameInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetSubsystem</span><span class="token generic class-name"><span class="token operator">&lt;</span>UExorcistInventorySubsystem<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">check</span><span class="token punctuation">(</span>InventorySubsystem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\tExtensionSubsystem <span class="token operator">=</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetGameInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">GetSubsystem</span><span class="token generic class-name"><span class="token operator">&lt;</span>UUIExtensionSubsystem<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">check</span><span class="token punctuation">(</span>ExtensionSubsystem<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.34,words:101},y:"a",t:"Error7.TSubsystemClass must be derived from TBaseType",O:7}}],["/unreal/error_%E9%94%99%E8%AF%AF_/08TObjectPtrError.html",{loader:()=>s.e(8921).then(s.bind(s,85036)),meta:{d:1706221621e3,c:["u++"],e:'\n<figure><figcaption>functionerror001.png</figcaption></figure>\n<ol>\n<li>目前只有属性中可以使用TObjectPtr</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nTObjectPtr<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> MYActor<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.38,words:114},y:"a",t:"Error8.UFunctions cannot take a TObjectPtr as a parameter.",O:8}}],["/unreal/error_%E9%94%99%E8%AF%AF_/09SkeletalMeshAnimError.html",{loader:()=>s.e(5260).then(s.bind(s,39150)),meta:{d:1706221621e3,c:["u++"],e:"<blockquote>\n<p>202411/13补\nUE5.4BUG已经修复，5.3没试过，5.2是有这个问题的</p>\n</blockquote>\n\n\n\n<figure><figcaption></figcaption></figure>\n\n",r:{minutes:2.08,words:623},y:"a",t:"Error9.骨骼网格体动画天坑！",O:9}}],["/unreal/error_%E9%94%99%E8%AF%AF_/10KeepCPU.html",{loader:()=>s.e(8160).then(s.bind(s,14101)),meta:{d:1706314309e3,c:["u++"],e:"\n\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.29,words:86},y:"a",t:"Error10. 切出活动窗口/后台运行时掉帧问题",O:10}}],["/unreal/error_%E9%94%99%E8%AF%AF_/11GamePadFocus.html",{loader:()=>s.e(7399).then(s.bind(s,98407)),meta:{d:1706597613e3,c:["u++"],e:"\n\n<h3>1.前提</h3>\n\n<h3>2.去掉虚线选择轮廓</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>3.聚焦组件</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>4.重写函数GetDesiredFocus</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>",r:{minutes:1.28,words:385},y:"a",t:"Error11. ListView手柄聚焦失效无法操作",O:11}}],["/unreal/error_%E9%94%99%E8%AF%AF_/12SetIsReplicated.html",{loader:()=>s.e(7650).then(s.bind(s,52899)),meta:{d:1730368163e3,c:["u++"],e:"\n<figure><figcaption></figcaption></figure>\n\n",r:{minutes:.15,words:46},y:"a",t:"Error12. SetIsReplicated",O:12}}],["/unreal/error_%E9%94%99%E8%AF%AF_/13GASGEInit.html",{loader:()=>s.e(7713).then(s.bind(s,64465)),meta:{d:1730368163e3,c:["u++"],e:'<h2>省流</h2>\n<blockquote>\n<p>先设置Max的属性，再设置正常的属性。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h2>问题描述</h2>\n\n\n\n<figure><figcaption></figcaption></figure>\n<h2>问题排除</h2>\n<h3>检查AttributeSet</h3>\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">ATTRIBUTE_ACCESSORS</span><span class="token expression"><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_PROPERTY_GETTER</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_GETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_SETTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n<span class="token expression"><span class="token function">GAMEPLAYATTRIBUTE_VALUE_INITTER</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span></span></span>\n\n\t<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> UExorcistAttributeSet <span class="token operator">:</span> <span class="token keyword">public</span> UAttributeSet\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token function">UExorcistAttributeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//重写复制函数</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//属性修改前调用的函数，用于钳制输出或者一些规则设定，但他不会真正的修改某个Attributes属性</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">PreAttributeChange</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttribute<span class="token operator">&amp;</span> Attribute<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> NewValue<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t\n\t<span class="token comment">//设置Health</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadOnly<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"Health"</span><span class="token punctuation">,</span> ReplicatedUsing <span class="token operator">=</span> OnRep_Health<span class="token punctuation">)</span>\n\tFGameplayAttributeData Health<span class="token punctuation">;</span>\n\n\t<span class="token function">ATTRIBUTE_ACCESSORS</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> Health<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token comment">//设置最大Health</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadOnly<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"Health"</span><span class="token punctuation">,</span> ReplicatedUsing <span class="token operator">=</span> OnRep_MaxHealth<span class="token punctuation">)</span>\n\tFGameplayAttributeData MaxHealth<span class="token punctuation">;</span>\n\n\t<span class="token function">ATTRIBUTE_ACCESSORS</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> MaxHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">UExorcistAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">UExorcistAttributeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">InitHealth</span><span class="token punctuation">(</span><span class="token number">100.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">InitMaxHealth</span><span class="token punctuation">(</span><span class="token number">100.f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">UExorcistAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>FLifetimeProperty<span class="token operator">&gt;</span><span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> COND_None<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> MaxHealth<span class="token punctuation">,</span> COND_None<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">void</span> <span class="token class-name">UExorcistAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_Health</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GAMEPLAYATTRIBUTE_REPNOTIFY</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> Health<span class="token punctuation">,</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">UExorcistAttributeSet</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_MaxHealth</span><span class="token punctuation">(</span><span class="token keyword">const</span> FGameplayAttributeData<span class="token operator">&amp;</span> OldHealth<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GAMEPLAYATTRIBUTE_REPNOTIFY</span><span class="token punctuation">(</span>UExorcistAttributeSet<span class="token punctuation">,</span> MaxHealth<span class="token punctuation">,</span> OldHealth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.08,words:623},y:"a",t:"Error13. GAS|属性顺序导致的GE错乱",O:13}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/1-GoodJob.html",{loader:()=>s.e(7420).then(s.bind(s,84566)),meta:{d:1701100984e3,c:["u++"],e:"\n<h2>操作记录</h2>\n<h3>1.归档</h3>\n<figure><figcaption></figcaption></figure>\n<h3>2.备份</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>3.迁移</h3>\n\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.34,words:102},y:"a",t:"EXP1.保存|归档|备份",O:1}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/10-inputvector.html",{loader:()=>s.e(3991).then(s.bind(s,37570)),meta:{d:1729899273e3,c:["u++"],e:'\n\n<h3>GetLastMovementInputVector</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**\n * 返回上一次由 ConsumeMovementInputVector() 处理的世界空间中的输入向量，这通常由 Pawn 或 PawnMovementComponent 完成。\n * 任何需要了解上次影响移动的输入的用户都应该使用此函数。\n * 例如，动画更新会使用这个函数，因为默认情况下，帧中更新的顺序是：\n * PlayerController（设备输入）-&gt; MovementComponent -&gt; Pawn -&gt; Mesh（动画）\n *\n * @return 上一次由 ConsumeMovementInputVector() 处理的世界空间中的输入向量。\n * @see AddMovementInput(), GetPendingMovementInputVector(), ConsumeMovementInputVector()\n */</span>\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">"Pawn|Input"</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>Keywords<span class="token operator">=</span><span class="token string">"GetMovementInput GetInput"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nENGINE_API FVector <span class="token function">GetLastMovementInputVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>\n\n</code></pre></div>',r:{minutes:1.89,words:568},y:"a",t:"EXP10.用户输入向量区别",O:10}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/2-Blueprint2CPP.html",{loader:()=>s.e(9013).then(s.bind(s,26478)),meta:{d:1701100984e3,c:["u++"],e:"\n<h2>实践</h2>\n<h3>1. 创建对应的蓝图版本</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>2.  蓝图实现一遍功能，前往定义查看C++</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>3. 使用GPT。</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>4. 代码补全插件</h3>\n\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>",r:{minutes:.91,words:273},y:"a",t:"EXP2.蓝图节点对应C++源码",O:2}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html",{loader:()=>s.e(972).then(s.bind(s,9279)),meta:{d:1701100984e3,c:["u++"],e:'\n<h2>实践</h2>\n<h3>1. 新建一个蓝图函数库类</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>2. Const控制</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">"TEST"</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">"值传递"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyValue</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span>Camera<span class="token punctuation">,</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">"TEST"</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">"值引用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyConstReference</span><span class="token punctuation">(</span><span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span> <span class="token keyword">const</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">"TEST"</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">"const修饰的值引用"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    \t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span>int32 <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.64,words:192},y:"a",t:"EXP3.C++控制蓝图节点输入输出",O:3}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/4-BPShowCVariables.html",{loader:()=>s.e(7566).then(s.bind(s,17411)),meta:{d:1701100984e3,c:["u++"],e:"<h2>问题描述</h2>\n\n<h2>解决思路</h2>\n<h3>点击齿轮图标——显示继承的变量即可。</h3>\n<figure><figcaption></figcaption></figure>\n",r:{minutes:.19,words:57},y:"a",t:"EXP4.C++变量在蓝图中显示",O:4}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/5-EventFunctionMacro.html",{loader:()=>s.e(5610).then(s.bind(s,43672)),meta:{d:170073813e4,c:["u++"],e:'\n<h2>执行引脚</h2>\n\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h2>delay节点</h2>\n<figure><figcaption><a href="https://space.bilibili.com/304436074" target="_blank" rel="noopener noreferrer">图片作者</a></figcaption></figure>\n<h2>总结</h2>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>事件</th>\n<th>宏</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>执行时机</td>\n<td>立即执行</td>\n<td>等待执行结束</td>\n<td>手动调用</td>\n</tr>\n<tr>\n<td>输入引脚</td>\n<td>一个</td>\n<td>可以有多个</td>\n<td>两个</td>\n</tr>\n<tr>\n<td>输出引脚</td>\n<td>一个</td>\n<td>一个</td>\n<td>一个</td>\n</tr>\n<tr>\n<td>延迟执行</td>\n<td>否</td>\n<td>是</td>\n<td>否</td>\n</tr>\n<tr>\n<td>调用方式</td>\n<td>事件触发</td>\n<td>明确调用</td>\n<td>手动调用</td>\n</tr>\n</tbody>\n</table>',r:{minutes:.64,words:193},y:"a",t:"EXP5.函数|事件|宏函数",O:5}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/6-DerivedDataCache.html",{loader:()=>s.e(9716).then(s.bind(s,56584)),meta:{d:1714485583e3,c:["u++"],e:'\n<h2>方案1</h2>\n<h3>1.修改Config</h3>\n<p>Program Files\\Epic Games\\UE_5.0\\Engine\\Config\\BaseEngine.ini"</p>\n<h3>2. 替换内容</h3>\n<p><code>Path="%ENGINEVERSIONAGNOSTICUSERDIR%DerivedDataCache"</code></p>\n<p>替换为</p>\n<p><code>Path="%GAMEDIR%DerivedDataCache"</code></p>\n<h2>方案2 2024/8/14</h2>\n\n<h3>1.移动文件</h3>\n<blockquote>\n<p>把C盘中C:\\Users\\admin\\AppData\\Local\\JetBrains文件移动到你想要的地方</p>\n</blockquote>',r:{minutes:.93,words:280},y:"a",t:"EXP6 C盘缓存过大问题",O:6}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/7-CameraLag.html",{loader:()=>s.e(3403).then(s.bind(s,64616)),meta:{d:1719390005e3,c:["u++"],e:"\n\n<blockquote>\n<p>未开启</p>\n</blockquote>\n",r:{minutes:.35,words:104},y:"a",t:"EXP7.相机01|相机延迟",O:7}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/8-SpaceAdditive.html",{loader:()=>s.e(4241).then(s.bind(s,91511)),meta:{d:1719390005e3,c:["u++"],e:"\n<figure><figcaption></figcaption></figure>\n\n<h2>准备</h2>\n\n<figure><figcaption></figcaption></figure>\n<h3>1D混合空间</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<h3>应用网格体空间叠加型姿势（Apply Mesh Space Additive）</h3>\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<figure><figcaption>Get Lean Amount</figcaption></figure>",r:{minutes:.67,words:201},y:"a",t:"EXP8.SpaceAdditive",O:"08"}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/9-svg.html",{loader:()=>s.e(962).then(s.bind(s,34265)),meta:{d:1723489536e3,c:["u++"],e:"\n\n<blockquote>\n<p>SVG（Scalable Vector Graphics）是一种基于XML的矢量图形格式，用于在网页和应用程序中显示二维图形。由于SVG是矢量图形，它们可以在任何分辨率下无损放大或缩小，非常适合需要清晰图形展示的场景，如图标、插图、图表等。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h3>1.下载任意一个svg</h3>\n<figure><figcaption></figcaption></figure>\n\n<h3>2.调整尺寸</h3>\n<figure><figcaption></figcaption></figure>",r:{minutes:1.55,words:464},y:"a",t:"EXP9.svg图片缩放",O:"09"}}],["/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html",{loader:()=>s.e(4705).then(s.bind(s,99351)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:'\n\n\n<figure><figcaption></figcaption></figure>\n\n\n\n\n\n<h2>模块（项目）名_API</h2>\n\n\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Kismet/BlueprintFunctionLibrary.h"</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"TEST.generated.h"</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">MYGame_API</span> UTEST <span class="token operator">:</span> <span class="token keyword">public</span> UBlueprintFunctionLibrary\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">"TEST"</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.53,words:1060},y:"a",t:"F1.模块（项目）名_API",O:1}}],["/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html",{loader:()=>s.e(3291).then(s.bind(s,57286)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:'<h3>类和对象</h3>\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    string Name<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> Age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3.66,words:1099},y:"a",t:"F10.Class&OBJ|类和对象",O:10}}],["/unreal/function_%E5%87%BD%E6%95%B0_/11-Getactorofclass.html",{loader:()=>s.e(4079).then(s.bind(s,48172)),meta:{d:1704306851e3,c:["u++"],e:"<h2>GetActorOfClass</h2>\n<h3>节点介绍</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>节点案例</h3>\n",r:{minutes:5.29,words:1587},y:"a",t:"F11.GetActorOfClass",O:11}}],["/unreal/function_%E5%87%BD%E6%95%B0_/12-CE_KE.html",{loader:()=>s.e(4943).then(s.bind(s,66197)),meta:{d:1704306851e3,c:["u++"],e:"\n\n<blockquote>\n<p><strong>语法：CE+函数名+空格+参数</strong></p>\n</blockquote>\n",r:{minutes:.48,words:144},y:"a",t:"F12.CE|KE",O:12}}],["/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html",{loader:()=>s.e(6526).then(s.bind(s,84102)),meta:{d:1704306851e3,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n\n<blockquote>\n<p>新建一个测试actor</p>\n</blockquote>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"GameFramework/Actor.h"</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyTest.generated.h"</span></span>\n\n<span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">EXORCIST_API</span> AMyTest <span class="token operator">:</span> <span class="token keyword">public</span> AActor\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token comment">// Sets default values for this actor\'s properties</span>\n\t<span class="token function">AMyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">protected</span><span class="token operator">:</span>\n\t<span class="token comment">// Called when the game starts or when spawned</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">BeginPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token comment">// Called every frame</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Tick</span><span class="token punctuation">(</span><span class="token keyword">float</span> DeltaTime<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.39,words:716},y:"a",t:"F13.BeginPlay|启动事件",O:13}}],["/unreal/function_%E5%87%BD%E6%95%B0_/14-SpawnActorfromClass.html",{loader:()=>s.e(7552).then(s.bind(s,74053)),meta:{d:1704306851e3,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n<h3>简单实例</h3>\n<blockquote>\n<p>角色按1生成一个球</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<iframe src="https://blueprintue.com/render/tabw8zu8/" width="100%" height="500" scrolling="no" allowfullscreen=""></iframe>\n<h3>cpp</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token comment">//获取玩家ActorforwardVector</span>\n\tFVector forwardVector <span class="token operator">=</span> <span class="token function">GetActorForwardVector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">//获取玩家ActorLocation</span>\n\tFVector location <span class="token operator">=</span> <span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">//ForwardVector*200+Location</span>\n\tFVector <span class="token keyword">const</span> spawnLocation <span class="token operator">=</span> forwardVector <span class="token operator">*</span> <span class="token number">200</span> <span class="token operator">+</span> location<span class="token punctuation">;</span>\n\n\tUWorld<span class="token operator">*</span> <span class="token keyword">const</span> World <span class="token operator">=</span> <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">//断言</span>\n\t<span class="token function">check</span><span class="token punctuation">(</span>World<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t World<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">SpawnActor</span><span class="token generic class-name"><span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>CurrentTarget<span class="token punctuation">,</span>spawnLocation<span class="token punctuation">,</span>FRotator<span class="token double-colon punctuation">::</span>ZeroRotator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.55,words:164},y:"a",t:"F14.SpawnActorFromClass",O:14}}],["/unreal/function_%E5%87%BD%E6%95%B0_/15-LoadAsset.html",{loader:()=>s.e(7903).then(s.bind(s,54956)),meta:{d:1704872551e3,c:["u++"],e:'\n<h2>前置</h2>\n\n<h2>异步</h2>\n<figure><figcaption></figcaption></figure>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//定义句柄</span>\nTSharedPtr<span class="token operator">&lt;</span>FStreamableHandle<span class="token operator">&gt;</span> Handle<span class="token punctuation">;</span>\n\nTSoftObjectPtr<span class="token operator">&lt;</span>UInventorySubConfig<span class="token operator">&gt;</span> SubConfig<span class="token punctuation">;</span><span class="token comment">//如果是软引用，需要先ToSoftObjectPath()，使用需要先ToSoftObjectPath重载版本</span>\n\n<span class="token keyword">const</span> UInventoryTotalConfig<span class="token operator">*</span> SubConfig<span class="token punctuation">;</span><span class="token comment">//如果是对象指针，可以直接放进去,会有对应的重载版本</span>\n\n<span class="token comment">//委托</span>\nFStreamableDelegate SubConfigLoadDelegate <span class="token operator">=</span> <span class="token class-name">FStreamableDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>你的类<span class="token double-colon punctuation">::</span>回调函数<span class="token punctuation">,</span> Index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//异步加载</span>\nHandle <span class="token operator">=</span> <span class="token class-name">UAssetManager</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStreamableManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequestAsyncLoad</span><span class="token punctuation">(</span>SubConfig<span class="token punctuation">,</span> SubConfigLoadDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nHandle<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否有效</span>\nHandle<span class="token operator">-&gt;</span><span class="token function">HasLoadCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进度 </span>\nHandle<span class="token punctuation">.</span><span class="token function">GetLoadedAsset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取资源</span>\nHandle<span class="token punctuation">.</span><span class="token function">ReleaseHandle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放句柄</span>\n\n</code></pre></div>',r:{minutes:1.93,words:578},y:"a",t:"F15.AssetLoad的几种方法",O:15}}],["/unreal/function_%E5%87%BD%E6%95%B0_/16-SetViewTargetWithBlend.html",{loader:()=>s.e(3555).then(s.bind(s,52912)),meta:{d:1706314309e3,c:["u++"],e:'\n<figure><figcaption></figcaption></figure>\n<h2>方案1</h2>\n<ol>\n<li>定义一个接口和一个相机数组</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token comment">//用于存场景中的相机</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> Category <span class="token operator">=</span> Input<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>AllowPrivateAccess <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nTArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span> CameraArr<span class="token punctuation">;</span>\n\n<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintNativeEvent<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"CameraInterface"</span><span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">IChangeCamera</span> <span class="token punctuation">(</span>int32 CameraID<span class="token punctuation">,</span><span class="token keyword">float</span> CameraSwitchTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.56,words:467},y:"a",t:"F16.SetViewTargetWithBlend|相机平滑切换",O:16}}],["/unreal/function_%E5%87%BD%E6%95%B0_/17-BlueprintImplementableEvent.html",{loader:()=>s.e(5381).then(s.bind(s,15703)),meta:{d:1706597613e3,c:["u++"],e:'\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UCLASS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">YOURPROJECT_API</span> UYourClass <span class="token operator">:</span> <span class="token keyword">public</span> UObject\n<span class="token punctuation">{</span>\n    <span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// 使用 UFUNCTION(BlueprintImplementableEvent) 声明蓝图实现的函数</span>\n    <span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintImplementableEvent<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"YourCategory"</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">YourBlueprintFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在你的类的cpp文件中可以提供一个默认实现</span>\n<span class="token keyword">void</span> <span class="token class-name">UYourClass</span><span class="token double-colon punctuation">::</span><span class="token function">YourBlueprintFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"Default implementation in C++"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',r:{minutes:.35,words:104},y:"a",t:"F17.BlueprintImplementableEventC++定义蓝图实现",O:17}}],["/unreal/function_%E5%87%BD%E6%95%B0_/18-UE_LOG.html",{loader:()=>s.e(4217).then(s.bind(s,3480)),meta:{d:1708345716e3,c:["u++"],e:'\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>UE_LOG(LogCategory, Verbosity, TEXT("Message"));\n</code></pre></div><ul>\n<li><code>LogCategory</code> 是一个宏，用于指定日志类别，例如<code>LogTemp</code>、<code>LogClass</code>等。</li>\n<li><code>Verbosity</code> 是一个枚举值，用于指定日志的详细程度，常见的值包括：<code>Log</code>、<code>Warning</code>、<code>Error</code>等。</li>\n<li><code>TEXT("Message")</code> 是要记录的消息内容，使用<code>TEXT()</code>宏将字符串转换为<code>FText</code>类型，确保支持国际化。</li>\n</ul>',r:{minutes:.69,words:208},y:"a",t:"F18.UE_LOG|打印日志",O:18}}],["/unreal/function_%E5%87%BD%E6%95%B0_/19-RegisterComponent.html",{loader:()=>s.e(2587).then(s.bind(s,66757)),meta:{d:1708926335e3,c:["u++"],e:'\n<h3>1.使用CDO：</h3>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\tSpringArm <span class="token operator">=</span> <span class="token generic-function"><span class="token function">CreateDefaultSubobject</span><span class="token generic class-name"><span class="token operator">&lt;</span>USpringArmComponent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">"SpringArm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tSpringArm<span class="token operator">-&gt;</span><span class="token function">SetupAttachment</span><span class="token punctuation">(</span>RootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.7,words:209},y:"a",t:"F19.RegisterComponent|组件",O:19}}],["/unreal/function_%E5%87%BD%E6%95%B0_/2-GENERATED_BODY.html",{loader:()=>s.e(951).then(s.bind(s,49172)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:"\n\n",r:{minutes:.13,words:40},y:"a",t:"F2.GENERATED_BODY()",O:2}}],["/unreal/function_%E5%87%BD%E6%95%B0_/20-Vector.html",{loader:()=>s.e(5236).then(s.bind(s,14355)),meta:{d:17107846e5,c:["u++"],e:'<h3>导言</h3>\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\nFORCEINLINE T <span class="token class-name">TVector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>X<span class="token operator">*</span>X <span class="token operator">+</span> Y<span class="token operator">*</span>Y <span class="token operator">+</span> Z<span class="token operator">*</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\nFORCEINLINE T <span class="token class-name">TVector</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',r:{minutes:.23,words:70},y:"a",t:"F20.Vector中Size和Length区别",O:20}}],["/unreal/function_%E5%87%BD%E6%95%B0_/21-Spawn%20actor%20with%20dynamic%20data.html",{loader:()=>s.e(7425).then(s.bind(s,62291)),meta:{d:1711323722e3,c:["u++"],e:'<h3>导言</h3>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>AEquipmentBase<span class="token operator">*</span> NewActor <span class="token operator">=</span> <span class="token function">GetWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">SpawnActor</span><span class="token generic class-name"><span class="token operator">&lt;</span>AEquipmentBase<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">AEquipmentBase</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>NewActor<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    NewActor<span class="token operator">-&gt;</span>ItemTag <span class="token operator">=</span> PickUpStruct<span class="token punctuation">.</span>ItemTag<span class="token punctuation">;</span>\n    NewActor<span class="token operator">-&gt;</span>Quantity <span class="token operator">=</span> PickUpStruct<span class="token punctuation">.</span>Quantity<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',r:{minutes:.47,words:142},y:"a",t:"F21.Spawn actor|带参生成",O:21}}],["/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html",{loader:()=>s.e(9705).then(s.bind(s,29800)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:"<h2>导读</h2>\n<table>\n<thead>\n<tr>\n<th>特征</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>WITH_EDITORONLY_DATA</code></td>\n<td>用于标记在头文件中的成员变量，仅在编辑器中可见，游戏运行时被忽略。</td>\n</tr>\n<tr>\n<td><code>WITH_EDITOR</code></td>\n<td>用于标记在 CPP 文件中的代码块，该代码块在构建编辑器时应被编译。</td>\n</tr>\n<tr>\n<td><code>GIsEditor</code></td>\n<td>全局布尔变量，用于判断当前是否在虚幻编辑器中运行。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:3.65,words:1096},y:"a",t:"F3.WITH_EDITOR",O:3}}],["/unreal/function_%E5%87%BD%E6%95%B0_/4-UPARAM.html",{loader:()=>s.e(5595).then(s.bind(s,72549)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:'\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintCosmetic<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">"Global UI Extensions"</span><span class="token punctuation">)</span>\n\t<span class="token keyword">static</span> UCommonActivatableWidget<span class="token operator">*</span> <span class="token function">PushContentToLayer_ForPlayer</span><span class="token punctuation">(</span><span class="token keyword">const</span> ULocalPlayer<span class="token operator">*</span> LocalPlayer<span class="token punctuation">,</span> <span class="token function">UPARAM</span><span class="token punctuation">(</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span>Categories <span class="token operator">=</span> <span class="token string">"UI.Layer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> FGameplayTag LayerName<span class="token punctuation">,</span> <span class="token function">UPARAM</span><span class="token punctuation">(</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAbstract <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> TSubclassOf<span class="token operator">&lt;</span>UCommonActivatableWidget<span class="token operator">&gt;</span> WidgetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.24,words:373},y:"a",t:"F4.UPARAM",O:4}}],["/unreal/function_%E5%87%BD%E6%95%B0_/5-UPROPERTY.html",{loader:()=>s.e(2350).then(s.bind(s,17353)),meta:{d:1704306851e3,c:["u++"],g:["Specifiers"],e:'\n<h3>UPROPERTY定义</h3>\n\n\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//声明一个变量</span>\nint32 MyInt<span class="token punctuation">;</span>\n<span class="token comment">//定义一个变量</span>\nint32 MyInt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.75,words:826},y:"a",t:"F5.UPROPERTY",O:5}}],["/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html",{loader:()=>s.e(6803).then(s.bind(s,87541)),meta:{d:1704306851e3,c:["u++"],e:'\n\n<h3>常规</h3>\n<ol>\n<li>Rider添加一个类</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start="2">\n<li>添加代码</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UENUM</span><span class="token punctuation">(</span>Meta <span class="token operator">=</span> <span class="token punctuation">(</span>Bitflags<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EColorBits</span>\n<span class="token punctuation">{</span>\n    ECB_Red<span class="token punctuation">,</span>\n    ECB_Green<span class="token punctuation">,</span>\n    ECB_Blue\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.65,words:195},y:"a",t:"F6.UEnum|枚举",O:6}}],["/unreal/function_%E5%87%BD%E6%95%B0_/7-UStruct.html",{loader:()=>s.e(6980).then(s.bind(s,90678)),meta:{d:1704306851e3,c:["u++"],e:'\n\n<ol>\n<li>Rider添加一个类</li>\n</ol>\n<figure><figcaption></figcaption></figure>\n<ol start="2">\n<li>添加如下函数</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"CoreMinimal.h"</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"MyStruct.generated.h"</span></span>\n\n<span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">struct</span>  <span class="token class-name">FMyStruct</span> \n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.32,words:96},y:"a",t:"F7.UStruct|结构体",O:7}}],["/unreal/function_%E5%87%BD%E6%95%B0_/8-TMap.html",{loader:()=>s.e(7917).then(s.bind(s,667)),meta:{d:1704306851e3,c:["u++"],e:'\n<h3>定义</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">KeyType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">ValueType</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">KeyFuncs</span> <span class="token operator">=</span> DefaultKeyFuncs<span class="token operator">&lt;</span>KeyType<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">Allocator</span> <span class="token operator">=</span> FDefaultAllocator<span class="token operator">&gt;</span>\n<span class="token keyword">class</span> <span class="token class-name">TMap</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.01,words:602},y:"a",t:"F8.TMap|映射表",O:8}}],["/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html",{loader:()=>s.e(6120).then(s.bind(s,14721)),meta:{d:1704306851e3,c:["u++"],e:'\n<ol>\n<li>\n<p><strong>TArray 迭代器：</strong></p>\n<ul>\n<li><code>TArray</code> 是UE中用于动态数组的模板类。它提供了多种迭代器，如 <code>TArray&lt;T&gt;::Iterator</code>，<code>TArray&lt;T&gt;::ConstIterator</code> 等。使用迭代器可以循环遍历数组中的元素。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TArray<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span> MyArray<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MyArray<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    int32<span class="token operator">&amp;</span> Element <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n    <span class="token comment">// 对 Element 进行操作</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p><strong>TMap 迭代器：</strong></p>\n<ul>\n<li><code>TMap</code> 是UE用于映射的模板类。它提供了多种迭代器，如 <code>TMap&lt;KeyType, ValueType&gt;::TIterator</code>，<code>TMap&lt;KeyType, ValueType&gt;::TConstIterator</code> 等。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span> MyMap<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MyMap<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Key <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int32<span class="token operator">&amp;</span> Value <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 对 Key 和 Value 进行操作</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//传统写法</span>\nTMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span> MyMap<span class="token punctuation">;</span>\n<span class="token keyword">for</span> TMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> int32<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Iterator <span class="token function">It</span><span class="token punctuation">(</span>MyMap<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Key <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    int32<span class="token operator">&amp;</span> Value <span class="token operator">=</span> It<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p><strong>TSet 迭代器：</strong></p>\n<ul>\n<li><code>TSet</code> 是UE中用于集合的模板类。它提供了多种迭代器，如 <code>TSet&lt;T&gt;::TIterator</code>，<code>TSet&lt;T&gt;::TConstIterator</code> 等。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>TSet<span class="token operator">&lt;</span>int32<span class="token operator">&gt;</span> MySet<span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> It <span class="token operator">=</span> MySet<span class="token punctuation">.</span><span class="token function">CreateIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    int32<span class="token operator">&amp;</span> Element <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>\n    <span class="token comment">// 对 Element 进行操作</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p><strong>TActorIterator：</strong></p>\n<ul>\n<li><code>TActorIterator</code> 是用于迭代关卡中的Actor的迭代器。</li>\n</ul>\n</li>\n</ol>',r:{minutes:1.82,words:546},y:"a",t:"F9.Iterator|迭代器",O:9}}],["/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/1-Architecture.html",{loader:()=>s.e(5749).then(s.bind(s,64546)),meta:{d:1723490066e3,c:["unreal"],e:'<h2>问题描述</h2>\n\n\n<h2>知识拓展</h2>\n<h3>什么是热更新？</h3>\n<blockquote>\n<p>热更新（Hotfix or Hot Update）是一种在软件运行过程中无需停止或重启应用程序的情况下，直接对程序进行更新的方法。</p>\n</blockquote>\n<h3>UEPC端打包目录结构？</h3>\n\n<figure><figcaption></figcaption></figure>\n<p>以下是添加了目录注释的版本，解释每个文件夹的用途和内容：</p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>D:.\n|   HOTFIX.exe                                 // 应用名\n|   Manifest_NonUFSFiles_Win64.txt             // 非UFS文件（Unreal File System）的清单，用于描述哪些文件不打包在UFS中\n|   Manifest_UFSFiles_Win64.txt                // UFS文件清单，列出游戏打包时包含的所有UFS文件\n|\n+---Engine                                      // 引擎文件夹，包含与引擎相关的文件和库\n|   +---Binaries                                // 可执行文件和二进制文件的存储目录\n|       \\---ThirdParty                          // 第三方库目录，包含引擎使用的外部依赖项（如DLL文件）\n|\n\\---HOTFIX                                      // 热更新目录，用于存放热更新相关的文件\n    +---Binaries                                // 热更新程序的二进制文件目录\n    |   \\---Win64                               // 针对64位Windows平台的可执行文件和依赖文件\n    |\n    \\---Content                                 // 热更新内容目录，存放与热更新相关的游戏内容\n        \\---Paks                                // 打包文件目录，包含已打包的游戏内容（如贴图、模型等）\n</code></pre></div>',r:{minutes:7.78,words:2334},y:"a",t:"HF|热更新01",O:1}}],["/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/2-Architecture2.html",{loader:()=>s.e(1678).then(s.bind(s,59612)),meta:{d:1723490066e3,c:["unreal"],e:'<h2>前情回顾</h2>\n<p>前文中我们已经讨论了两个基础的更新方案，并意识到恶意破坏补丁可能带来的严重问题。本文将继续探讨如何优化和完善我们的方案。</p>\n<h2>校验</h2>\n\n\n\n\n\n<h3>获取文件MD5(HASH)</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>FMD5Hash CurrentPakHash <span class="token operator">=</span> <span class="token class-name">FMD5Hash</span><span class="token double-colon punctuation">::</span><span class="token function">HashFile</span><span class="token punctuation">(</span><span class="token operator">*</span>InFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\nFString CurrentPakHashString <span class="token operator">=</span> <span class="token function">LexToString</span><span class="token punctuation">(</span>CurrentPakHash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:3,words:899},y:"a",t:"HF|热更新02",O:2}}],["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/1-lyra.html",{loader:()=>s.e(3240).then(s.bind(s,89801)),meta:{d:1701724009e3,c:["unreal"],e:"\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>",r:{minutes:4.18,words:1255},y:"a",t:"LY1.Lyra初见",O:1}}],["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/2-lyraMessageBox.html",{loader:()=>s.e(6999).then(s.bind(s,7446)),meta:{d:1728289163e3,c:["unreal"],e:'<h2>项目说明：</h2>\n<p><code>ExorcistUIMessaging</code> 是一个用于在游戏中展示全局消息框（MessageBox）的子系统，支持错误、确认等提示信息。\n它基于 MVC 设计模式实现，通过异步蓝图节点来展示消息，能够简化用户与系统之间的交互。</p>\n<h3>功能：</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>主要模块：</h3>\n<ol>\n<li><strong>UAsyncAction_ShowConfirmation</strong>：</li>\n</ol>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintCosmetic<span class="token punctuation">,</span> meta <span class="token operator">=</span> <span class="token punctuation">(</span>BlueprintInternalUseOnly <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">,</span> WorldContext <span class="token operator">=</span> <span class="token string">"InWorldContextObject"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">static</span> UAsyncAction_ShowConfirmation<span class="token operator">*</span> <span class="token function">ShowConfirmationYesNo</span><span class="token punctuation">(</span>\n    UObject<span class="token operator">*</span> InWorldContextObject<span class="token punctuation">,</span> FText Title<span class="token punctuation">,</span> FText Message\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.13,words:640},y:"a",t:"LY2.Lyra-UIMessaging",O:2}}],["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/3-lyraSubtitle.html",{loader:()=>s.e(9806).then(s.bind(s,31867)),meta:{d:1701724009e3,c:["unreal"],e:"<h3>介绍</h3>\n<h3>依赖插件：GameSubtitles</h3>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>",r:{minutes:1.03,words:310},y:"a",t:"LY3.Lyra-字幕插件",O:3}}],["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/4-lyraCamera.html",{loader:()=>s.e(3762).then(s.bind(s,99705)),meta:{d:1729899273e3,c:["unreal"],e:"<h3>介绍</h3>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>\n\n\n\n<figure><figcaption></figcaption></figure>\n\n\n\n\n\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n",r:{minutes:1.61,words:483},y:"a",t:"LY4.Lyra-相机系统",O:4}}],["/unreal/master_%E5%85%A5%E9%AD%94_/1-InventorySystem.html",{loader:()=>s.e(9081).then(s.bind(s,63651)),meta:{d:17107846e5,c:["u++"],e:"<h2>导言</h2>\n\n<hr>\n\n\n<blockquote>\n<p>《永劫无间》是一款以斗罗大陆为背景的动作角色扮演游戏，拥有多种武器、技能、时装和战斗模式，让玩家体验不同的英雄故事和风格。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n\n<h2>初体验</h2>\n<blockquote>\n<p>进入下个环节前，需了解一个概念：<br>\n1.玩家(Player)指的是用户，视野（Camera|View）指的是用户操作的相机视角，后面说玩家二者默认一起考虑。<br>\n2.而角色（Pawn|Character）指的是玩家操作的角色,或者模型本身。</p>\n</blockquote>",r:{minutes:12.46,words:3739},y:"a",t:"M.背包系统01|永劫背包复刻",O:1}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/1-HTTP.html",{loader:()=>s.e(2686).then(s.bind(s,6964)),meta:{d:1701200797e3,c:["unreal"],e:"\n\n<h2>HTTP</h2>\n<table>\n<thead>\n<tr>\n<th>协议</th>\n<th>全称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>HTTP</td>\n<td>Hyper Text Transfer Protocol</td>\n<td>用于从服务器传输超文本到本地浏览器的传送协议。</td>\n</tr>\n<tr>\n<td>HTTPS</td>\n<td>HyperText Transfer Protocol Secure</td>\n<td>一种通过计算机网络进行安全通信的传输协议，利用 SSL/TLS 加密数据包，提供身份认证和保护隐私与完整性。</td>\n</tr>\n<tr>\n<td>默认端口</td>\n<td>80</td>\n<td>443</td>\n</tr>\n<tr>\n<td>URL 示例</td>\n<td>http://</td>\n<td>https://</td>\n</tr>\n</tbody>\n</table>",r:{minutes:5.73,words:1720},y:"a",t:"NT-1.HTTP",O:10}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html",{loader:()=>s.e(2555).then(s.bind(s,347)),meta:{d:1708130422e3,c:["unreal"],e:"<h2>问题</h2>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<h2>Replication|复制</h2>\n<blockquote>\n<p>复制是服务器将信息/数据传递给客户端的行为。</p>\n</blockquote>\n<figure><figcaption>中文</figcaption></figure>\n<figure><figcaption>英文</figcaption></figure>",r:{minutes:7.58,words:2275},y:"a",t:"NT-2.0|Actor复制",O:20}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html",{loader:()=>s.e(7468).then(s.bind(s,75128)),meta:{d:1709675291e3,c:["unreal"],e:"<h2>前情提要</h2>\n\n<h2>解决流程</h2>\n<h3>BP</h3>\n\n<figure><figcaption></figcaption></figure>\n",r:{minutes:4.12,words:1237},y:"a",t:"NT-2.1|变量复制",O:21}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.-GamePlayNetWork.html",{loader:()=>s.e(4411).then(s.bind(s,90053)),meta:{d:1709675291e3,c:["unreal"],e:"<h2>书接上文</h2>\n\n<h2>问题</h2>\n\n",r:{minutes:6.86,words:2058},y:"a",t:"NT-2.2|网络权威",O:22}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.1GamePlayNetWork.html",{loader:()=>s.e(7103).then(s.bind(s,33941)),meta:{d:1710945776e3,c:["u++"],e:"\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<h3>RPC可靠性</h3>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p>SkeletalMeshComponent（继承自 SkinnedMeshComponent）及其 SkeletalMesh 都不会复制。</p>\n</blockquote>\n\n",r:{minutes:1.68,words:505},y:"a",t:"NT-2.2.1|复制延迟",O:23}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html",{loader:()=>s.e(3750).then(s.bind(s,85511)),meta:{d:1709675291e3,c:["unreal"],e:'<h3>数据结构|结构体</h3>\n\n\n<figure><figcaption></figcaption></figure>\n\n<h3>数据结构|Datatable|表格</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">USTRUCT</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">struct</span>  <span class="token class-name">FCharacterStruct</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FTableRowBase</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tFString Name<span class="token punctuation">;</span>\n\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"Icon"</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>UTexture2D<span class="token operator">&gt;</span> Icon<span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"SkeletalMesh"</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>USkeletalMesh<span class="token operator">&gt;</span> SkeletalMesh<span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"SkeletalAnim"</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">"None"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tTObjectPtr<span class="token operator">&lt;</span>UAnimSequence<span class="token operator">&gt;</span> SkeletalAnim<span class="token punctuation">;</span>\n\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"SkeletalAnimSpeed"</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">"1.000000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token keyword">float</span> SkeletalAnimSpeed <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>\n\t\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>DisplayName<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">,</span> MakeStructureDefaultValue<span class="token operator">=</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\tint32 id  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:9.1,words:2731},y:"a",t:"NT-2.3|数据结构",O:24}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html",{loader:()=>s.e(9909).then(s.bind(s,38764)),meta:{d:1722723732e3,c:["unreal"],e:"<h3>本章概要</h3>\n<p>非Actor对象，比如原生的UObject如何实现同步？以及调用RPC</p>\n<h2>问题</h2>\n\n<figure><figcaption>服务端上查看客户端显示正常</figcaption></figure>\n<figure><figcaption>客户端上可以看到UObject为未知</figcaption></figure>\n\n\n<h2>变量同步</h2>\n<h3>1. 重写 <code>IsSupportedForNetworking</code></h3>\n<p>在自定义 <code>UObject</code> 类中重写 <code>IsSupportedForNetworking</code> 函数，使其返回 <code>true</code>，标记该对象支持网络复制。</p>",r:{minutes:1.98,words:594},y:"a",t:"NT-2.3.1|UObject复制同步和RPC",O:25}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html",{loader:()=>s.e(1808).then(s.bind(s,57322)),meta:{d:1722723732e3,c:["unreal"],e:"<h2>本章概要</h2>\n<p>ReplicatedUsing同步触发条件\n蓝图和C++的区别</p>\n<h2>问题</h2>\n\n\n<h3>1. 准备一个组件设置为可复制</h3>\n<figure><figcaption></figcaption></figure>\n<figure><figcaption></figcaption></figure>\n<h3>2. 新建一个数组变量，并且使用ReplicatedUsing标记为可复制。</h3>\n<figure><figcaption></figcaption></figure>\n<h3>3. 增加1个RPC，标记为Server执行，用于添加内容到数组</h3>",r:{minutes:2.73,words:820},y:"a",t:"NT-2.3.2|网络同步PushModel",O:26}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html",{loader:()=>s.e(6841).then(s.bind(s,71600)),meta:{d:1729899273e3,c:["unreal"],e:'<h2>本章概要</h2>\n<p>以方向为例，优化方向结构体的网络传输</p>\n<h2>问题</h2>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UENUM</span><span class="token punctuation">(</span>BlueprintType<span class="token punctuation">)</span>\n<span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">EDirectionType</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">uint8</span></span>\n<span class="token punctuation">{</span>\n\tForward <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Forward"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tBackward <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Backward"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tLeft <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Left"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tRight <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Right"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\tInvalid <span class="token function">UMETA</span><span class="token punctuation">(</span>DisplayName <span class="token operator">=</span> <span class="token string">"Invalid"</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.59,words:477},y:"a",t:"NT-2.4|网络优化|结构体",O:27}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/2.5-GamePlayNetWork.html",{loader:()=>s.e(8122).then(s.bind(s,67452)),meta:{d:1729899273e3,c:["unreal"],e:"<h3>1. <code>bIgnoreClientMovementErrorChecksAndCorrection</code></h3>\n<ul>\n<li>\n<p><strong>用途</strong>:</p>\n<ul>\n<li>当这个参数设置为 <code>true</code> 时，服务器会忽略来自客户端的移动误差修正请求。</li>\n<li>默认情况下，服务器会监控客户端的移动状态，如果发现客户端的位置和服务器位置之间有显著差异，服务器会进行位置纠正，将客户端“拉回”正确的位置。</li>\n<li>开启这个参数后，服务器将不再做这种误差校正，从而避免频繁的客户端位置纠正。但这样做可能会允许客户端稍微偏离服务器记录的位置。</li>\n</ul>\n</li>\n<li>\n<p><strong>适用场景</strong>:</p>\n<ul>\n<li>在某些网络游戏中，如果移动非常频繁，位置纠正可能会导致玩家感觉卡顿。使用 <code>bIgnoreClientMovementErrorChecksAndCorrection</code> 可以减少这种不必要的“位置拉扯”。</li>\n<li>它更适合那些对位置精确度要求不高的场景，比如开放世界中的一些非战斗场景。</li>\n</ul>\n</li>\n</ul>",r:{minutes:1.64,words:492},y:"a",t:"NT-2.4|网络优化|网络抖动",O:28}}],["/unreal/plugins_%E6%8F%92%E4%BB%B6_/1-ViewLock.html",{loader:()=>s.e(7816).then(s.bind(s,22876)),meta:{d:1720001475e3,c:["unreal"],e:"\n<h3>思考</h3>\n\n\n<figure><figcaption></figcaption></figure>\n\n<h2>方案1</h2>\n<h3>发射简单射线</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>方案1|问题</h3>\n\n<figure><figcaption></figcaption></figure>\n\n",r:{minutes:2.92,words:875},y:"a",t:"P1.ViewLock",O:1}}],["/unreal/plugins_%E6%8F%92%E4%BB%B6_/2-HightLight.html",{loader:()=>s.e(6873).then(s.bind(s,2479)),meta:{d:1728289163e3,c:["unreal"],e:'\n\n<h2>PlayerController中的高亮功能</h2>\n<h3>1. 添加高亮启动/关闭/检测</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">AAuraPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">CursorTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 碰撞通道</span>\n    <span class="token keyword">const</span> ECollisionChannel TraceChannel <span class="token operator">=</span> ECollisionChannel<span class="token double-colon punctuation">::</span>ECC_Visibility<span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取光标下的碰撞信息，并存储在CursorHit中</span>\n    <span class="token function">GetHitResultUnderCursor</span><span class="token punctuation">(</span>TraceChannel<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> CursorHit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 如果光标下没有阻挡的对象，直接返回</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CursorHit<span class="token punctuation">.</span>bBlockingHit<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 保存上一个高亮的对象</span>\n    LastActor <span class="token operator">=</span> ThisActor<span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取当前光标下的对象，并检查其有效性和是否实现了高亮接口</span>\n    AActor<span class="token operator">*</span> HitActor <span class="token operator">=</span> CursorHit<span class="token punctuation">.</span><span class="token function">GetActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span>HitActor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> HitActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UHighlightInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        ThisActor <span class="token operator">=</span> HitActor<span class="token punctuation">;</span> <span class="token comment">// 当前对象有效且可高亮，设置为ThisActor</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span>\n    <span class="token punctuation">{</span>\n        ThisActor <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">// 当前对象无效或不支持高亮，设置为nullptr</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 如果当前对象与上一个对象不同，则更新高亮状态</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>LastActor <span class="token operator">!=</span> ThisActor<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// 取消上一个对象的高亮效果</span>\n        <span class="token function">UnHighlightActor</span><span class="token punctuation">(</span>LastActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 为当前对象添加高亮效果</span>\n        <span class="token function">HighlightActor</span><span class="token punctuation">(</span>ThisActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">AAuraPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">HighlightActor</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> InActor<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span>InActor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> InActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UHighlightInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name">IHighlightInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_HighlightActor</span><span class="token punctuation">(</span>InActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">AAuraPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">UnHighlightActor</span><span class="token punctuation">(</span>AActor<span class="token operator">*</span> InActor<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsValid</span><span class="token punctuation">(</span>InActor<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> InActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UHighlightInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name">IHighlightInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_UnHighlightActor</span><span class="token punctuation">(</span>InActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.13,words:639},y:"a",t:"P2.物体点击高亮",O:2}}],["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/1-HPBar.html",{loader:()=>s.e(3265).then(s.bind(s,24018)),meta:{d:1704030488e3,c:["unreal"],e:"<h2>导读</h2>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>\n<hr>\n\n\n<figure><figcaption></figcaption></figure>\n<hr>\n\n\n<figure><figcaption></figcaption></figure>\n<hr>\n\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>",r:{minutes:15.47,words:4642},y:"a",t:"SD1.从血条材质开始",O:1}}],["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/2-BRDF.html",{loader:()=>s.e(5491).then(s.bind(s,3276)),meta:{d:1705333518e3,c:["unreal"],e:'<div class="hint-container note">\n<p class="hint-container-title">注</p>\n<p>本章不讨论PBR材质系统的实现细节，而是一些基础的知识普及，具体到实时渲染那个专栏会深入研究。</p>\n</div>\n\n<h3>PBR</h3>\n\n<blockquote>\n<p>对计算机图形学感兴趣的朋友可以去阅读<a href="https://www.pbrt.org/" target="_blank" rel="noopener noreferrer">《PBRT》</a>这本书</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>',r:{minutes:5.59,words:1677},y:"a",t:"SD2.PBR材质系统",O:1}}],["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html",{loader:()=>s.e(3497).then(s.bind(s,95990)),meta:{d:1705366539e3,c:["unreal"],e:'<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">/**\nPS图层样式投影效果\n\t@param {UVs}\t\t\t\t\t\ttexture coordinate\n\t@param {Texture}\t\t\t\t\ttexture object\n\t@param {TextureSize}\t\t\t\t纹理大小（x, y）\n\t@param {ShadowRGBA}\t\t\t\t\t投影颜色与不透明度\n\t@param {ShadowRotate}\t\t\t\t投影角度\n\t@param {ShadowLength}\t\t\t\t投影距离\n\t@param {ShadowSize}\t\t\t\t\t投影大小\n\t@param {BorderThreshold}\t\t\t边界UVs阈值（左, 上, 右, 下）\n*/</span>\nfloat4 <span class="token function">Shadow</span><span class="token punctuation">(</span>float2 UVs<span class="token punctuation">,</span> Texture2D Texture<span class="token punctuation">,</span> float2 TextureSize<span class="token punctuation">,</span> float4 ShadowRGBA<span class="token punctuation">,</span> <span class="token keyword">float</span> ShadowRotate<span class="token punctuation">,</span> half ShadowLength<span class="token punctuation">,</span> half ShadowSize<span class="token punctuation">,</span> float4 BorderThreshold<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">const</span> <span class="token keyword">float</span> PI <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token comment">// 单位像素</span>\n\tfloat2 TexturePixel <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> TextureSize<span class="token punctuation">;</span>\n\t<span class="token comment">// 角度</span>\n\t<span class="token keyword">float</span> Angle <span class="token operator">=</span> <span class="token number">360</span> <span class="token operator">*</span> ShadowRotate<span class="token punctuation">;</span>\n\t<span class="token comment">// 弧度</span>\n\t<span class="token keyword">float</span> Degrees <span class="token operator">=</span> Angle <span class="token operator">/</span> <span class="token number">180</span> <span class="token operator">*</span> PI<span class="token punctuation">;</span>\n\t<span class="token comment">// 阴影反向方位（单位向量）</span>\n\tfloat2 Direction <span class="token operator">=</span> TexturePixel <span class="token operator">*</span> <span class="token function">float2</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span>Degrees<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>Degrees<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">class</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span>\n\t\tTexture2D Texture<span class="token punctuation">;</span>\n\t\tSamplerState TextureSampler<span class="token punctuation">;</span>\n\t\tfloat4 ShadowRGBA<span class="token punctuation">;</span>\n\t\tfloat2 Position<span class="token punctuation">;</span>\n\t\t<span class="token keyword">float</span> BorderThresholdLeft<span class="token punctuation">;</span>\n\t\t<span class="token keyword">float</span> BorderThresholdTop<span class="token punctuation">;</span>\n\t\t<span class="token keyword">float</span> BorderThresholdRight<span class="token punctuation">;</span>\n\t\t<span class="token keyword">float</span> BorderThresholdBottom<span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token keyword">float</span> PI<span class="token punctuation">;</span>\n\t\tfloat2 TexturePixel<span class="token punctuation">;</span>\n\t\t\n\t\t<span class="token comment">// 阴影颜色</span>\n\t\tfloat3 <span class="token function">ShadowColor</span><span class="token punctuation">(</span>float3 Color<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 如果需要与颜色混合，在此修改返回值，如下式 正片叠底。</span>\n\t\t\t<span class="token comment">//\treturn this.ShadowRGBA.rgb * Color;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ShadowRGBA<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\t<span class="token comment">// 混合</span>\n\t\tfloat3 <span class="token function">Blend</span><span class="token punctuation">(</span>float3 base<span class="token punctuation">,</span> float3 blend<span class="token punctuation">,</span> <span class="token keyword">float</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 如果使用了混合模式，把 blend 按混合公式计算一次，如下式 正片叠底。</span>\n\t\t\t<span class="token comment">//\tblend = base * blend;</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">lerp</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> blend<span class="token punctuation">,</span> alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\t<span class="token comment">// 纹理采样</span>\n\t\tfloat4 <span class="token function">TextureSample</span><span class="token punctuation">(</span>float2 UVs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 如果需要 alpha 通道反向，在此修改。</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">Texture2DSampleLevel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>Texture<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>TextureSampler<span class="token punctuation">,</span> UVs<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>xyzw<span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\tfloat4 <span class="token function">GetShadowRGBA</span><span class="token punctuation">(</span>float2 UVs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 当前像素点 RGBA</span>\n\t\t\tfloat4 TextureRGBA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TextureSample</span><span class="token punctuation">(</span>UVs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 阴影反向方位 UVs</span>\n\t\t\tfloat2 PositionUVs <span class="token operator">=</span> UVs <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Position<span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 阴影反向方位 UVs 超出了 0 - 1 的范围则不计算</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>PositionUVs<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdLeft <span class="token operator">||</span> PositionUVs<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdRight <span class="token operator">||</span> PositionUVs<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdTop <span class="token operator">||</span> PositionUVs<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdBottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> TextureRGBA<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token comment">// 阴影反向方位像素点RGBA</span>\n\t\t\tfloat4 PositionRGBA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TextureSample</span><span class="token punctuation">(</span>PositionUVs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 阴影透明度</span>\n\t\t\t<span class="token keyword">float</span> ShadowOpacity <span class="token operator">=</span> PositionRGBA<span class="token punctuation">.</span>a <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ShadowRGBA<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>ShadowOpacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">return</span> TextureRGBA<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的结果色</span>\n\t\t\t<span class="token comment">//\tthis.ShadowRGBA.rgb 为 base 固有色</span>\n\t\t\t<span class="token comment">//\tTextureRGBA.rgb 为 blend 固有色</span>\n\t\t\t<span class="token comment">//\tTextureRGBA.a 为 alpha</span>\n\t\t\tfloat3 ShadowBlendColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Blend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ShadowColor</span><span class="token punctuation">(</span>PositionRGBA<span class="token punctuation">.</span>rgb<span class="token punctuation">)</span> <span class="token operator">*</span> ShadowOpacity<span class="token punctuation">,</span> TextureRGBA<span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> TextureRGBA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的透明度</span>\n\t\t\t<span class="token keyword">float</span> ShadowBlendOpacity <span class="token operator">=</span> ShadowOpacity <span class="token operator">+</span> TextureRGBA<span class="token punctuation">.</span>a <span class="token operator">-</span> ShadowOpacity <span class="token operator">*</span> TextureRGBA<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的RGBA</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>ShadowBlendColor <span class="token operator">/</span> ShadowBlendOpacity<span class="token punctuation">,</span> ShadowBlendOpacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\t<span class="token keyword">float</span> <span class="token function">Calculate1DGaussian</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>PI <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t\t\n\t\tfloat4 <span class="token function">GetShadowSizeRGBA</span><span class="token punctuation">(</span>float2 UVs<span class="token punctuation">,</span> half ShadowSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// 当前像素点 RGBA</span>\n\t\t\tfloat4 TextureRGBA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TextureSample</span><span class="token punctuation">(</span>UVs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 投影大小范围内像素颜色累加</span>\n\t\t\tfloat4 RGBASum <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 投影大小范围内像素的权重</span>\n\t\t\t<span class="token keyword">float</span> WeightSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>half x <span class="token operator">=</span> <span class="token operator">-</span>ShadowSize<span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> ShadowSize<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span>half y <span class="token operator">=</span> <span class="token operator">-</span>ShadowSize<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> ShadowSize<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">float</span> Weight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Calculate1DGaussian</span><span class="token punctuation">(</span>x <span class="token operator">/</span> ShadowSize<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Calculate1DGaussian</span><span class="token punctuation">(</span>y <span class="token operator">/</span> ShadowSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\tWeightSum <span class="token operator">+=</span> Weight<span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token comment">// 阴影偏移 UVs</span>\n\t\t\t\t\tfloat2 OffsetUVs <span class="token operator">=</span> UVs <span class="token operator">+</span> <span class="token function">float2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>TexturePixel <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Position<span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OffsetUVs<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdLeft <span class="token operator">||</span> OffsetUVs<span class="token punctuation">.</span>x <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdRight <span class="token operator">||</span> OffsetUVs<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdTop <span class="token operator">||</span> OffsetUVs<span class="token punctuation">.</span>y <span class="token operator">&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>BorderThresholdBottom<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t<span class="token keyword">continue</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t<span class="token comment">// 阴影偏移像素点 RGBA</span>\n\t\t\t\t\tfloat4 OffsetRGBA <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">TextureSample</span><span class="token punctuation">(</span>OffsetUVs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token comment">// 阴影透明度</span>\n\t\t\t\t\t<span class="token keyword">float</span> Opacity <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ShadowRGBA<span class="token punctuation">.</span>a <span class="token operator">*</span> OffsetRGBA<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>Opacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t\t\t<span class="token keyword">continue</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t\t<span class="token comment">// 阴影结果色</span>\n\t\t\t\t\tfloat4 RGBA <span class="token operator">=</span> <span class="token function">float4</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ShadowColor</span><span class="token punctuation">(</span>OffsetRGBA<span class="token punctuation">.</span>rgb<span class="token punctuation">)</span><span class="token punctuation">,</span> Opacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\tRGBASum <span class="token operator">+=</span> RGBA <span class="token operator">*</span> Weight<span class="token punctuation">;</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token comment">// 模糊后的 RGBA</span>\n\t\t\tfloat4 BlurRGBA <span class="token operator">=</span> RGBASum <span class="token operator">/</span> WeightSum<span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的结果色</span>\n\t\t\tfloat3 Color <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">Blend</span><span class="token punctuation">(</span>BlurRGBA<span class="token punctuation">.</span>rgb <span class="token operator">*</span> BlurRGBA<span class="token punctuation">.</span>a<span class="token punctuation">,</span> TextureRGBA<span class="token punctuation">.</span>rgb<span class="token punctuation">,</span> TextureRGBA<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的透明度</span>\n\t\t\t<span class="token keyword">float</span> Opacity <span class="token operator">=</span> BlurRGBA<span class="token punctuation">.</span>a <span class="token operator">+</span> TextureRGBA<span class="token punctuation">.</span>a <span class="token operator">-</span> BlurRGBA<span class="token punctuation">.</span>a <span class="token operator">*</span> TextureRGBA<span class="token punctuation">.</span>a<span class="token punctuation">;</span>\n\t\t\t<span class="token comment">// 当前像素点混合后的RGBA</span>\n\t\t\t<span class="token keyword">return</span> <span class="token function">float4</span><span class="token punctuation">(</span>Color <span class="token operator">/</span> Opacity<span class="token punctuation">,</span> Opacity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">;</span>\t\t<span class="token comment">// 注意要加分号</span>\n\t\n\t<span class="token comment">// Function func;</span>\n\t<span class="token comment">// func.Texture = Texture;</span>\n\t<span class="token comment">// func.TextureSampler = TextureSampler;</span>\n\t<span class="token comment">// func.ShadowRGBA = ShadowRGBA;</span>\n\t<span class="token comment">// func.Position = ShadowLength * Direction;</span>\n\t<span class="token comment">// func.BorderThresholdLeft = BorderThreshold.x;</span>\n\t<span class="token comment">// func.BorderThresholdTop = BorderThreshold.y;</span>\n\t<span class="token comment">// func.BorderThresholdRight = 1 - BorderThreshold.z;</span>\n\t<span class="token comment">// func.BorderThresholdBottom = 1 - BorderThreshold.w;</span>\n\t<span class="token comment">// func.PI = PI;</span>\n\t<span class="token comment">// func.TexturePixel = TexturePixel;</span>\n\tFunction func <span class="token operator">=</span> <span class="token punctuation">{</span> Texture<span class="token punctuation">,</span> TextureSampler<span class="token punctuation">,</span> ShadowRGBA<span class="token punctuation">,</span> ShadowLength <span class="token operator">*</span> Direction<span class="token punctuation">,</span> BorderThreshold<span class="token punctuation">.</span>x<span class="token punctuation">,</span> BorderThreshold<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> BorderThreshold<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> BorderThreshold<span class="token punctuation">.</span>w<span class="token punctuation">,</span> PI<span class="token punctuation">,</span> TexturePixel <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>ShadowSize <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> func<span class="token punctuation">.</span><span class="token function">GetShadowRGBA</span><span class="token punctuation">(</span>UVs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> func<span class="token punctuation">.</span><span class="token function">GetShadowSizeRGBA</span><span class="token punctuation">(</span>UVs<span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span>ShadowSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.94,words:1483},y:"a",t:"SD3.图片仿PS投影Shader",O:3}}],["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html",{loader:()=>s.e(6830).then(s.bind(s,82384)),meta:{d:1706981625e3,c:["unreal"],e:"\n\n<figure><figcaption>110-Vlado-full (1).jpg</figcaption></figure>\n<h2>从灯光开始</h2>\n\n<figure><figcaption></figcaption></figure>\n\n\n<ol>\n<li>\n<p><strong>固定管线时代：</strong>\n在早期的游戏引擎中，使用固定管线图形渲染流水线。灯光通常是基于简单的光照模型，如冯·肖定律（Phong Shading）等。这种方法的计算相对简单，但在细节和真实感方面表现一般。</p>\n</li>\n<li>\n<p><strong>可编程管线和着色器：</strong>\n随着可编程图形管线的出现，引擎可以更灵活地处理灯光。开发者可以使用自定义的着色器编写更复杂的光照算法，如基于物理的渲染（Physically Based Rendering，PBR）。PBR模型更准确地模拟了真实世界中光的反射和折射。</p>\n</li>\n<li>\n<p><strong>实时光照技术：</strong>\n引擎开始引入实时光照技术，如实时全局光照（Real-Time Global Illumination）和实时阴影技术。这些技术旨在模拟真实世界中的光照效果，提高场景的真实感。包括屏幕空间反射（Screen Space Reflection）和环境遮挡（Ambient Occlusion）等技术。</p>\n</li>\n<li>\n<p><strong>实时光追：</strong>\n随着硬件性能的提升，一些引擎引入了实时光追技术，这种技术通过模拟光线在场景中的传播来实现更高质量的光照效果。实时光追通常需要更强大的计算资源，但可以提供更真实的光照和阴影。</p>\n</li>\n<li>\n<p><strong>深度学习和实时渲染：</strong>\n最近，深度学习技术开始应用于游戏渲染，例如基于机器学习的超分辨率技术、反走样和实时光照估计等。这些技术旨在通过神经网络等方法改善实时渲染的质量和性能。</p>\n</li>\n</ol>",r:{minutes:4.11,words:1232},y:"a",t:"SD4.灯光",O:4}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/0-where%20use%20a%20semicolon.html",{loader:()=>s.e(6185).then(s.bind(s,62149)),meta:{d:170073813e4,c:["c++"],e:'\n\n<ol>\n<li>\n<p><strong>表达式结束：</strong> 在赋值、函数调用、算术运算等表达式结束时，需要使用分号。例如：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 赋值语句</span>\ncout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 函数调用语句</span>\nx <span class="token operator">=</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span> <span class="token comment">// 算术表达式</span>\n</code></pre></div></li>\n<li>\n<p><strong>控制结构：</strong> 在条件语句（if、else等）、循环语句（for、while等）以及其他控制结构的主体部分结束时，需要使用分号。例如：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 代码块</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x是正数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 代码块</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x不是正数"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 循环体</span>\n    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p><strong>类定义：</strong> 在类的定义中，每个成员函数的实现都需要用分号结束。例如：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 函数体</span>\n        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello from MyClass!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 注意类定义结束时有分号</span>\n</code></pre></div></li>\n<li>\n<p><strong>结构体：</strong> 在类的定义中，每个成员函数的实现都需要用分号结束。例如：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n   <span class="token keyword">int</span> myVariable<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 函数体</span>\n        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello from MyClass!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 注意结构体定义结束时有分号</span>\n</code></pre></div></li>\n</ol>',r:{minutes:1.17,words:351},y:"a",t:'c++0.什么地方用";"',O:1}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/1-function%20Declaration_%20Definition.html",{loader:()=>s.e(7032).then(s.bind(s,99602)),meta:{d:170073813e4,c:["c++"],e:'\n<h2>概念</h2>\n<blockquote>\n<p>在C++中，<br>\n函数声明：为了告诉编译器函数的存在、名称和参数列表。<br>\n函数定义：提供函数的具体实现。</p>\n</blockquote>\n<p><strong>函数声明（Function Declaration）:</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 函数声明，告诉编译器这个函数存在，但并没有提供具体实现</span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.24,words:372},y:"a",t:"c++1.函数声明和定义",O:1}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/10-Functor.html",{loader:()=>s.e(7943).then(s.bind(s,24041)),meta:{d:1703335047e3,c:["c++"],e:'\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token comment">// 函数对象类</span>\n<span class="token keyword">class</span> <span class="token class-name">MultiplyBy</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">MultiplyBy</span><span class="token punctuation">(</span><span class="token keyword">int</span> factor<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">factor</span><span class="token punctuation">(</span>factor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// 重载 () 运算符</span>\n    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> x <span class="token operator">*</span> factor<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> factor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MultiplyBy <span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用函数对象</span>\n    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">multiplyBy2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于调用 multiplyBy2.operator()(5);</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:.6,words:180},y:"a",t:"c++10.Functor",O:10}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/2-Variable%20Declaration_%20Definition.html",{loader:()=>s.e(1367).then(s.bind(s,36038)),meta:{d:170073813e4,c:["c++"],e:'\n<h2>概念</h2>\n<blockquote>\n<p>在C++中，变量声明和定义：</p>\n</blockquote>\n<p><strong>变量声明（Variable Declaration）：</strong> 变量声明是指通知编译器变量的存在，但不进行实际的分配。例如：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">extern</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>  <span class="token comment">//这是一个变量声明：（通过使用extern关键字，可以声明变量名而不定义它）</span>\n</code></pre></div>',r:{minutes:2.04,words:613},y:"a",t:"c++2.变量声明和定义",O:2}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html",{loader:()=>s.e(8495).then(s.bind(s,29236)),meta:{d:1701893836e3,c:["c++"],e:'\n<ol>\n<li>\n<p><strong>解决循环依赖：</strong> 当两个或多个头文件相互包含时，可能会导致循环依赖的问题。通过使用前置声明，可以在一个头文件中声明另一个头文件中的类或函数，而不需要包含整个定义。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 文件 A.h</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">A_H</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A_H</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>  <span class="token comment">// 前置声明，避免循环依赖</span>\n\n<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>B<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre></div><div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 文件 B.h</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">B_H</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B_H</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token comment">// 前置声明，避免循环依赖</span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span>A<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre></div></li>\n<li>\n<p><strong>编译时间优化：</strong> 前置声明可以减少头文件的依赖性，从而降低编译时间。当一个头文件只需要知道某个标识符的存在而不需要知道其具体定义时，前置声明可以提高编译效率。</p>\n</li>\n<li>\n<p><strong>减小编译单元之间的耦合性：</strong> 如果某个编译单元只需要了解另一个编译单元中的某个标识符，而不需要知道其具体实现细节，前置声明可以减小它们之间的耦合性。</p>\n</li>\n<li>\n<p><strong>降低头文件的依赖性：</strong> 使用前置声明可以减少头文件之间的直接依赖关系，从而降低了代码的耦合性，使得代码更容易维护和理解。</p>\n</li>\n<li>\n<p><strong>提高代码的可读性：</strong> 在头文件中只包含必要的信息，通过前置声明将不需要详细了解的信息推迟到实现文件中，有助于提高代码的可读性。</p>\n</li>\n</ol>',r:{minutes:1.59,words:477},y:"a",t:"c++3.声明前置",O:3}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-VariablePassbyValue%20_%20Reference.html",{loader:()=>s.e(9454).then(s.bind(s,62923)),meta:{d:170073813e4,c:["c++"],e:"\n<h3>值传递</h3>\n<ol>\n<li>\n<p><strong>传递方式：</strong> 通过将实际参数的值复制给形式参数，函数得到的是实际数据的副本。</p>\n</li>\n<li>\n<p><strong>对实参的影响：</strong> 在函数内对形式参数的修改不会影响实际参数的值。</p>\n</li>\n<li>\n<p><strong>内存开销：</strong> 由于复制了实际参数的值，可能会产生额外的内存开销，尤其是对于大型对象或数据结构。</p>\n</li>\n<li>\n<p><strong>使用时机：</strong> 适用于简单的数据类型或对象，或者当函数不需要修改实际参数的值时。</p>\n</li>\n</ol>",r:{minutes:4.94,words:1481},y:"a",t:"c++5.参数传递",O:5}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-function%20brace%20initialization.html",{loader:()=>s.e(6422).then(s.bind(s,42665)),meta:{d:1701893836e3,c:["c++"],e:'\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UHttpBlueprintFunctionLibrary</span><span class="token double-colon punctuation">::</span><span class="token function">MakeRequestHeader</span><span class="token punctuation">(</span><span class="token keyword">const</span> TMap<span class="token operator">&lt;</span>FString<span class="token punctuation">,</span> FString<span class="token operator">&gt;</span><span class="token operator">&amp;</span> Headers<span class="token punctuation">,</span> FHttpHeader<span class="token operator">&amp;</span> OutHeader<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\tOutHeader <span class="token operator">=</span> FHttpHeader<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">SetHeaders</span><span class="token punctuation">(</span>Headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.44,words:1333},y:"a",t:"c++4.函数花括号初始化",O:4}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html",{loader:()=>s.e(5892).then(s.bind(s,33136)),meta:{d:170073813e4,c:["c++"],e:'\n<h3>概念</h3>\n<p>浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。</p>\n\n<p>而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。</p>\n\n<h4>浅拷贝：</h4>\n<ul>\n<li>\n<p><strong>定义：</strong> 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。</p>\n</li>\n<li>\n<p><strong>判断：</strong> 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。</p>\n</li>\n<li>\n<p><strong>示例：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">ShallowCopyExample</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>\n\n    <span class="token function">ShallowCopyExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShallowCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        data <span class="token operator">=</span> other<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 浅拷贝，只复制指针值，不复制内容</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li>\n</ul>',r:{minutes:2.06,words:619},y:"a",t:"c++6.浅拷贝|深拷贝",O:6}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html",{loader:()=>s.e(6969).then(s.bind(s,51662)),meta:{d:1701724009e3,c:["c++"],e:"\n\n<h3>直接使用时</h3>\n",r:{minutes:1.94,words:582},y:"a",t:"c++7.i++|++i区别",O:7}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/8-operator.html",{loader:()=>s.e(4255).then(s.bind(s,80957)),meta:{d:1701724009e3,c:["c++"],e:"\n\n<h3>运算符</h3>\n<ol>\n<li>\n<p><strong>算术运算符：</strong></p>\n<ul>\n<li><code>+</code>（加法）</li>\n<li><code>-</code>（减法）</li>\n<li><code>*</code>（乘法）</li>\n<li><code>/</code>（除法）</li>\n<li><code>%</code>（取模）</li>\n</ul>\n</li>\n<li>\n<p><strong>关系运算符：</strong></p>\n<ul>\n<li><code>==</code>（等于）</li>\n<li><code>!=</code>（不等于）</li>\n<li><code>&lt;</code>（小于）</li>\n<li><code>&gt;</code>（大于）</li>\n<li><code>&lt;=</code>（小于等于）</li>\n<li><code>&gt;=</code>（大于等于）</li>\n</ul>\n</li>\n<li>\n<p><strong>逻辑运算符：</strong></p>\n<ul>\n<li><code>&amp;&amp;</code>（逻辑与）</li>\n<li><code>||</code>（逻辑或）</li>\n<li><code>!</code>（逻辑非）</li>\n</ul>\n</li>\n<li>\n<p><strong>位运算符：</strong></p>\n<ul>\n<li><code>&amp;</code>（按位与）</li>\n<li><code>|</code>（按位或）</li>\n<li><code>^</code>（按位异或）</li>\n<li><code>~</code>（按位取反）</li>\n<li><code>&lt;&lt;</code>（左移）</li>\n<li><code>&gt;&gt;</code>（右移）</li>\n</ul>\n</li>\n<li>\n<p><strong>赋值运算符：</strong></p>\n<ul>\n<li><code>=</code>（赋值）</li>\n<li><code>+=</code>（加法赋值）</li>\n<li><code>-=</code>（减法赋值）</li>\n<li><code>*=</code>（乘法赋值）</li>\n<li><code>/=</code>（除法赋值）</li>\n<li><code>%=</code>（取模赋值）</li>\n<li><code>&amp;=</code>（按位与赋值）</li>\n<li><code>|=</code>（按位或赋值）</li>\n<li><code>^=</code>（按位异或赋值）</li>\n<li><code>&lt;&lt;=</code>（左移赋值）</li>\n<li><code>&gt;&gt;=</code>（右移赋值）</li>\n</ul>\n</li>\n<li>\n<p><strong>递增和递减运算符：</strong></p>\n<ul>\n<li><code>++</code>（递增）</li>\n<li><code>--</code>（递减）</li>\n</ul>\n</li>\n<li>\n<p><strong>成员访问运算符：</strong></p>\n<ul>\n<li><code>-&gt;</code>（成员访问）</li>\n<li><code>-&gt;*</code>（成员指针访问）</li>\n</ul>\n</li>\n<li>\n<p><strong>函数调用运算符：</strong></p>\n<ul>\n<li><code>()</code>（函数调用）</li>\n</ul>\n</li>\n<li>\n<p><strong>下标运算符：</strong></p>\n<ul>\n<li><code>[]</code>（下标访问）</li>\n</ul>\n</li>\n<li>\n<p><strong>其他运算符：</strong></p>\n</li>\n</ol>",r:{minutes:2.85,words:856},y:"a",t:"c++8.运算符重载",O:8}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/9-Big%20Four.html",{loader:()=>s.e(5672).then(s.bind(s,42080)),meta:{d:1701724009e3,c:["c++"],e:"\n<ol>\n<li>\n<p><strong>默认构造函数 (Default Constructor):</strong> 如果你没有为类定义任何构造函数，编译器将生成一个无参的默认构造函数。它用于创建对象时的初始化，例如 <code>MyClass obj;</code>。</p>\n</li>\n<li>\n<p><strong>析构函数 (Destructor):</strong> 如果你没有显式定义析构函数，编译器将生成一个默认的析构函数。它用于在对象生命周期结束时进行清理工作，例如释放动态分配的资源。析构函数的名称是类名前加上波浪号 <code>~</code>，如 <code>~MyClass()</code>。</p>\n</li>\n<li>\n<p><strong>拷贝构造函数 (Copy Constructor):</strong> 如果你没有定义自己的拷贝构造函数，编译器将生成一个默认的拷贝构造函数。它用于通过复制另一个对象来初始化一个新对象，例如 <code>MyClass obj1; MyClass obj2 = obj1;</code>。</p>\n</li>\n<li>\n<p><strong>拷贝赋值运算符 (Copy Assignment Operator):</strong> 如果你没有定义自己的拷贝赋值运算符，编译器将生成一个默认的拷贝赋值运算符。它用于将一个对象的值复制给另一个对象，例如 <code>MyClass obj1, obj2; obj2 = obj1;</code>。</p>\n</li>\n</ol>",r:{minutes:2.03,words:609},y:"a",t:"c++9.Big Four",O:9}}],["/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html",{loader:()=>s.e(6292).then(s.bind(s,23679)),meta:{d:1703391495e3,c:["c++"],e:'<h3>Singleton|单例</h3>\n\n<h3>懒汉式（Lazy Initialization）</h3>\n<ol>\n<li>\n<p><strong>懒汉式单例模式：</strong></p>\n<ul>\n<li><strong>实例创建时机：</strong> 懒汉式在第一次被调用时才创建实例，即在需要的时候才进行初始化。</li>\n<li><strong>线程安全性：</strong> 如果不进行特殊处理，懒汉式可能在多线程环境下引发竞态条件，导致多个线程同时检测到实例为<code>nullptr</code>，然后都尝试创建实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或者其他线程安全的机制。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> LazySingleton<span class="token operator">*</span> instance<span class="token punctuation">;</span>\n    <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 私有构造函数</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> LazySingleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在cpp文件中初始化静态成员变量</span>\nLazySingleton<span class="token operator">*</span> LazySingleton<span class="token double-colon punctuation">::</span>instance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n</code></pre></div></li>\n</ol>',r:{minutes:1.9,words:569},y:"a",t:"DS1.Singleton|单例",O:1}}],["/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html",{loader:()=>s.e(1785).then(s.bind(s,15563)),meta:{d:1703391495e3,c:["c++"],e:"<h3>SimpleFactory简单工厂</h3>\n\n<figure><figcaption></figcaption></figure>\n<h3>Simple Factory 模式的核心组件：</h3>\n<ol>\n<li>\n<p><strong>定义接口或抽象类：</strong> 创建一个表示产品的接口或抽象类，其中包含产品的通用方法（例如，<code>operate</code>）。</p>\n</li>\n<li>\n<p><strong>创建具体产品类：</strong> 实现产品接口或继承抽象类，定义具体的产品类，每个类负责实现产品接口中的方法。</p>\n</li>\n<li>\n<p><strong>定义工厂类：</strong> 创建一个工厂类，其中包含一个用于创建产品对象的方法。这个方法可能是静态的，用于根据客户端的需求创建具体产品对象。</p>\n</li>\n<li>\n<p><strong>客户端使用工厂类：</strong> 客户端代码通过调用工厂类的方法来获取产品对象，而不是直接实例化具体产品类。这有助于降低客户端与具体产品类之间的耦合度。</p>\n</li>\n</ol>",r:{minutes:2.11,words:632},y:"a",t:"DS2.SimpleFactory|简单工厂",O:2}}],["/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/3-FactoryPattern.html",{loader:()=>s.e(1152).then(s.bind(s,29839)),meta:{d:1703391495e3,c:["c++"],e:'<h3>FactoryPattern</h3>\n\n<h3>工厂方法模式（Factory Method Pattern）：</h3>\n<ol>\n<li>\n<p><strong>定义：</strong> 工厂方法模式定义了一个用于创建对象的接口，但由子类决定实例化的类是哪一个。它使一个类的实例化延迟到其子类。</p>\n</li>\n<li>\n<p><strong>组成部分：</strong></p>\n<ul>\n<li><strong>抽象产品类（Abstract Product）：</strong> 声明了产品的接口。</li>\n<li><strong>具体产品类（Concrete Product）：</strong> 实现了抽象产品接口的具体类。</li>\n<li><strong>抽象工厂类（Creator）：</strong> 声明了一个创建产品对象的工厂方法，可以包含一些默认的实现。</li>\n<li><strong>具体工厂类（Concrete Creator）：</strong> 实现了抽象工厂类，实际负责创建产品的具体工厂。</li>\n</ul>\n</li>\n<li>\n<p><strong>示例代码：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConcreteProductA</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Product</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 具体产品 A 的操作</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConcreteProductB</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Product</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 具体产品 B 的操作</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Creator</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">virtual</span> Product<span class="token operator">*</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConcreteCreatorA</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Creator</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    Product<span class="token operator">*</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ConcreteCreatorB</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Creator</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    Product<span class="token operator">*</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li>\n</ol>',r:{minutes:3.79,words:1138},y:"a",t:"DS3.FactoryPattern|工厂模式",O:3}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/1-Keywords%20continue_%20break.html",{loader:()=>s.e(9847).then(s.bind(s,6611)),meta:{d:170073813e4,c:["c++"],e:'\n<h2>实践</h2>\n<h3>1. <strong><code>break</code> 关键字：</strong></h3>\n<figure><figcaption>整个蓝图块的过程为for循环</figcaption></figure>\n<ul>\n<li>\n<p><strong>作用：</strong> 当 <code>break</code> 关键字出现在循环体内时，它会立即终止当前循环，跳出循环体，不再执行循环内尚未执行完的语句。</p>\n</li>\n<li>\n<p><strong>用法：</strong> 通常用于在满足某个条件时提前结束循环，无论循环条件是否达到结束条件。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 当 i 等于 5 时，终止循环</span>\n  <span class="token punctuation">}</span>\n  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上述代码中，当 <code>i</code> 等于 5 时，<code>break</code> 将立即终止循环。</p>\n</li>\n</ul>',r:{minutes:1.24,words:373},y:"a",t:"c++1.continue|break",O:1}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/2-Keywords%20inline.html",{loader:()=>s.e(4780).then(s.bind(s,38145)),meta:{d:170073813e4,c:["c++"],e:'\n<h3>内联函数</h3>\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token comment">// 定义内联函数</span>\n<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 调用内联函数</span>\n    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Result: "</span> <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div>',r:{minutes:1.76,words:528},y:"a",t:"c++2.inline[内联]",O:2}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html",{loader:()=>s.e(9332).then(s.bind(s,66375)),meta:{d:170073813e4,c:["c++"],e:'\n<h3><code>new</code> 和 <code>delete</code>（C++ 中使用）</h3>\n<ol>\n<li>\n<p><strong><code>new</code>：</strong></p>\n<ul>\n<li>\n<p><code>new</code> 是 C++ 中的关键字，用于在堆上动态分配内存，并返回分配的内存的地址。<code>new</code> 还会调用对象的构造函数，用于在分配的内存中创建对象。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span><span class="token operator">*</span> myInt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>  <span class="token comment">// 动态分配一个 int</span>\n<span class="token keyword">int</span><span class="token operator">*</span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 动态分配一个 int 数组</span>\nMyClass<span class="token operator">*</span> myObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 动态分配一个 MyClass 对象</span>\n</code></pre></div></li>\n</ul>\n</li>\n<li>\n<p><strong><code>delete</code>：</strong></p>\n<ul>\n<li>\n<p><code>delete</code> 用于释放使用 <code>new</code> 分配的内存，同时调用对象的析构函数以进行清理。如果忘记使用 <code>delete</code>，可能导致内存泄漏。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">delete</span> myInt<span class="token punctuation">;</span>      <span class="token comment">// 释放动态分配的 int</span>\n<span class="token keyword">delete</span> myObject<span class="token punctuation">;</span>   <span class="token comment">// 释放动态分配的 MyClass 对象</span>\n<span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myArray<span class="token punctuation">;</span>  <span class="token comment">// 数组的delete格式比较特殊</span>\n</code></pre></div></li>\n</ul>\n</li>\n</ol>',r:{minutes:3.03,words:910},y:"a",t:"c++3.new|delete|malloc|free",O:3}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html",{loader:()=>s.e(3761).then(s.bind(s,32286)),meta:{d:1722723732e3,c:["c++"],e:'\n<h4>1. 阻止类的继承</h4>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">final</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类内容</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 尝试继承Base会导致编译错误</span>\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 错误: Base类被标记为final，不能被继承</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.92,words:277},y:"a",t:"c++4.1 final",O:4}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html",{loader:()=>s.e(2992).then(s.bind(s,79966)),meta:{d:170073813e4,c:["c++"],e:"\n<h2>类(class)中</h2>\n<h3>访问控制</h3>\n\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p><strong>Private自己可见|Protected自己和好友可见|Public所有人可见</strong></p>\n</blockquote>\n<ol>\n<li><strong>Public（公共）:</strong>\n<ul>\n<li>成员声明为 <code>public</code> 的，可以在类的内部和外部访问。</li>\n<li>对于类的用户来说，<code>public</code> 成员是可见的，可以直接访问。</li>\n</ul>\n</li>\n</ol>",r:{minutes:2.87,words:861},y:"a",t:"c++4.public|protected|private",O:4}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/5-Diamond%20Inheritance.html",{loader:()=>s.e(4024).then(s.bind(s,36228)),meta:{d:1703074087e3,c:["c++"],e:'\n<h2>菱形继承</h2>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> dataA<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n<span class="token keyword">int</span> dataB<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n<span class="token keyword">int</span> dataC<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">C</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n<span class="token keyword">int</span> dataD<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:13.26,words:3977},y:"a",t:"c++5.virtual-菱形继承|多态",O:5}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html",{loader:()=>s.e(2001).then(s.bind(s,9125)),meta:{d:1703074087e3,c:["c++"],e:'\n\n\n\n\n\n<ol>\n<li>\n<p><strong>访问私有成员：</strong> 如果有一些与类密切相关的非成员函数需要访问类的私有成员，\n但这些函数不适合成为类的成员函数，可以将它们声明为友元函数，以便访问类的私有部分。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> privateData<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">privateData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// 友元函数的声明</span>\n    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">displayPrivateData</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 友元函数的定义</span>\n<span class="token keyword">void</span> <span class="token function">displayPrivateData</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Private Data: "</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span>privateData <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n<li>\n<p><strong>提高效率：</strong> 有时，为了提高效率，需要使用非成员函数来执行某些操作，而这些操作需要访问类的私有成员。通过将这些函数声明为友元，可以避免将所有操作都包装成成员函数。</p>\n</li>\n<li>\n<p><strong>重载运算符：</strong> 重载某些运算符时，可能需要直接访问类的私有成员。友元函数允许非成员函数重载类的运算符并访问类的私有部分。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">double</span> real<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> imag<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">real</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">imag</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// 友元函数的声明</span>\n    <span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 友元函数的定义</span>\nComplex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Complex<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>real <span class="token operator">+</span> b<span class="token punctuation">.</span>real<span class="token punctuation">,</span> a<span class="token punctuation">.</span>imag <span class="token operator">+</span> b<span class="token punctuation">.</span>imag<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li>\n</ol>',r:{minutes:2.06,words:619},y:"a",t:"c++6.friend",O:6}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html",{loader:()=>s.e(5223).then(s.bind(s,46783)),meta:{d:1703074087e3,c:["c++"],e:"<h3>前置知识</h3>\n<table>\n<thead>\n<tr>\n<th>区域</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码区 (Code)</td>\n<td>存放函数体的二进制代码，只读，由操作系统管理。</td>\n</tr>\n<tr>\n<td>全局/静态存储区 (Global/Static Storage)</td>\n<td>存放全局变量、静态变量和常量，在程序启动时分配，程序结束时释放。</td>\n</tr>\n<tr>\n<td>栈区 (Stack)</td>\n<td>存放函数的局部变量、函数参数值等，由编译器自动分配释放，与函数调用相关。</td>\n</tr>\n<tr>\n<td>堆区 (Heap)</td>\n<td>程序员可以通过 new 和 delete（或 malloc 和 free）用于动态内存管理，需要手动管理内存的生命周期。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:3.68,words:1103},y:"a",t:"c++7.const|static|#defined",O:7}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/8-Keywords%20sizeof.html",{loader:()=>s.e(7427).then(s.bind(s,39857)),meta:{d:1703074087e3,c:["c++"],e:'\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> publicVar<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> charVar<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> doubleVar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> derivedVar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.17,words:652},y:"a",t:"c++8.sizeof和内存对齐",O:8}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/1-Namespace%20scope.html",{loader:()=>s.e(6383).then(s.bind(s,25259)),meta:{d:1701724009e3,c:["c++"],e:'\n<ol>\n<li>\n<p>每个命名空间定义引入一个作用范围，包含该命名空间的所有内容。</p>\n</li>\n<li>\n<p>重新声明或特化的部分也在该范围内。</p>\n</li>\n<li>\n<p>全局作用域是整个程序的作用范围。</p>\n</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">namespace</span> Q <span class="token punctuation">{</span>\n  <span class="token keyword">namespace</span> V <span class="token punctuation">{</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">void</span> <span class="token class-name">V</span><span class="token double-colon punctuation">::</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">// in the scope of V</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:.77,words:230},y:"a",t:"c++1.Namespace作用域",O:1}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/2-Lvalues%20and%20Rvalues.html",{loader:()=>s.e(750).then(s.bind(s,29013)),meta:{d:1701724009e3,c:["c++"],e:'\n<h2>左值和右值</h2>\n<h3>直觉判断</h3>\n<p>C++98已经出现，字面理解表达式等号左边的值为左值，右边的右值。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//a是左值，1是右值</span>\n</code></pre></div>',r:{minutes:2.46,words:738},y:"a",t:"c++2.理解左右值和移动语义",O:2}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html",{loader:()=>s.e(1555).then(s.bind(s,77658)),meta:{d:1701724009e3,c:["c++"],e:'\n\n\n\n<h2>函数式编程</h2>\n<blockquote>\n<p>函数式编程（Functional Programming）是一种编程范式，它将计算视为数学函数的求值，并避免了可变状态和可变数据。\n函数式编程强调函数的纯粹性、不可变性和无副作用，这些特性使得程序更容易推理、测试和并行化。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n\n<h2>lambda表达式</h2>\n<h3>定义</h3>\n\n<h3>语法</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token punctuation">[</span>capture<span class="token punctuation">]</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> return_type <span class="token punctuation">{</span>\n    <span class="token comment">// 函数体</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.14,words:942},y:"a",t:"c++3.lambda表达式",O:3}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html",{loader:()=>s.e(6306).then(s.bind(s,36273)),meta:{d:1722723732e3,c:["c++"],e:'\n<p>在 C++ 中，显式默认（explicit default）和显式删除（explicit delete）用于控制类的构造函数、拷贝构造函数、赋值运算符等成员函数的行为。下面是这两种用法的示例：</p>\n<h3>显式默认</h3>\n<p><code>explicit default</code> 用于告诉编译器自动生成某些成员函数的默认实现。</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// 显式默认构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认拷贝构造函数</span>\n    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认拷贝赋值运算符</span>\n    MyClass<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyClass<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 显式默认析构函数</span>\n    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"MyClass object\\n"</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyClass obj1<span class="token punctuation">;</span>      <span class="token comment">// 使用显式默认构造函数</span>\n    MyClass obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span> <span class="token comment">// 使用显式默认拷贝构造函数</span>\n    obj1 <span class="token operator">=</span> obj2<span class="token punctuation">;</span>      <span class="token comment">// 使用显式默认拷贝赋值运算符</span>\n    obj1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.72,words:517},y:"a",t:"c++4.显示默认/删除",O:4}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html",{loader:()=>s.e(3199).then(s.bind(s,22951)),meta:{d:1722723732e3,c:["c++"],e:'\n\n\n<h3>联合类型的定义与使用</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">union</span> MyUnion <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> intValue<span class="token punctuation">;</span>\n    <span class="token keyword">float</span> floatValue<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> charValue<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyUnion u<span class="token punctuation">;</span>\n    u<span class="token punctuation">.</span>intValue <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"intValue: "</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>intValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    u<span class="token punctuation">.</span>floatValue <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"floatValue: "</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>floatValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    u<span class="token punctuation">.</span>charValue <span class="token operator">=</span> <span class="token char">\'a\'</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"charValue: "</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>charValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token comment">// 注意：因为联合只能同时存储一种类型的值，所以只会打印最后一次赋值的内容</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"intValue: "</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>intValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 不再有效</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"floatValue: "</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">.</span>floatValue <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span> <span class="token comment">// 不再有效</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.44,words:1032},y:"a",t:"c++5.联合类型局限",O:5}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html",{loader:()=>s.e(1434).then(s.bind(s,94438)),meta:{d:1722723732e3,c:["c++"],e:'\n\n<h3>聚合类型的定义</h3>\n<p>根据C++标准，一个类型如果满足以下所有条件，则称为聚合类型：</p>\n<figure><figcaption></figcaption></figure>\n<h3>示例</h3>\n<h4>简单结构体作为聚合类型</h4>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    MyStruct s <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 列表初始化</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.02,words:605},y:"a",t:"c++6.聚合类型（aggregate type）",O:6}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/7-for.html",{loader:()=>s.e(4777).then(s.bind(s,37164)),meta:{d:1722723732e3,c:["c++"],e:'\n<h3>基于范围的 <code>for</code> 循环语法</h3>\n<p>基于范围的 <code>for</code> 循环的基本语法如下：</p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>declaration <span class="token operator">:</span> range<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 循环体</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:2.24,words:673},y:"a",t:"c++7. 基于范围的 for 循环",O:7}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html",{loader:()=>s.e(9944).then(s.bind(s,62181)),meta:{d:1701893836e3,c:["c++"],e:'\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//这是普通函数写法</span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//函数重载</span>\n<span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a <span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:4.52,words:1355},y:"a",t:"c++1.template",O:1}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html",{loader:()=>s.e(7830).then(s.bind(s,95353)),meta:{d:1703335047e3,c:["c++"],e:'<h3>Pair</h3>\n\n<h3>定义：</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> myPair<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:.93,words:278},y:"a",t:"c++10.Pair容器",O:10}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/11-Map.html",{loader:()=>s.e(9549).then(s.bind(s,25169)),meta:{d:1703335047e3,c:["c++"],e:'<h3>Map|MutiMap</h3>\n\n<h3>定义：</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span>KeyType<span class="token punctuation">,</span> ValueType<span class="token operator">&gt;</span> myMap<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.34,words:403},y:"a",t:"c++11.Map/MutiMap容器",O:11}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html",{loader:()=>s.e(9264).then(s.bind(s,63803)),meta:{d:1701893836e3,c:["c++"],e:"<h3>STL</h3>\n\n<h3>核心组件</h3>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>组件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>容器（Containers）</td>\n<td>vector</td>\n<td>动态数组，支持快速随机访问和尾部插入操作。</td>\n</tr>\n<tr>\n<td></td>\n<td>list</td>\n<td>双向链表，支持在任意位置插入和删除操作。</td>\n</tr>\n<tr>\n<td></td>\n<td>deque</td>\n<td>双端队列，支持在两端快速插入和删除操作。</td>\n</tr>\n<tr>\n<td></td>\n<td>queue</td>\n<td>队列，先进先出（FIFO）数据结构。</td>\n</tr>\n<tr>\n<td></td>\n<td>stack</td>\n<td>栈，后进先出（LIFO）数据结构。</td>\n</tr>\n<tr>\n<td></td>\n<td>set</td>\n<td>集合，元素唯一，有序。</td>\n</tr>\n<tr>\n<td></td>\n<td>map</td>\n<td>映射，键-值对的集合，键唯一，有序。</td>\n</tr>\n<tr>\n<td></td>\n<td>unordered_set</td>\n<td>无序集合，元素唯一。</td>\n</tr>\n<tr>\n<td></td>\n<td>unordered_map</td>\n<td>无序映射，键-值对的集合，键唯一。</td>\n</tr>\n<tr>\n<td></td>\n<td>stack</td>\n<td>栈，后进先出（LIFO）数据结构。</td>\n</tr>\n<tr>\n<td>迭代器（Iterators）</td>\n<td>input_iterator</td>\n<td>用于遍历序列的输入迭代器。</td>\n</tr>\n<tr>\n<td></td>\n<td>output_iterator</td>\n<td>用于向序列写入的输出迭代器。</td>\n</tr>\n<tr>\n<td></td>\n<td>forward_iterator</td>\n<td>单向遍历序列的迭代器，支持逐个增加。</td>\n</tr>\n<tr>\n<td></td>\n<td>bidirectional_iterator</td>\n<td>双向遍历序列的迭代器，支持逐个增加或逐个减少。</td>\n</tr>\n<tr>\n<td></td>\n<td>random_access_iterator</td>\n<td>随机访问序列的迭代器，支持直接跳跃访问。</td>\n</tr>\n<tr>\n<td>算法（Algorithms）</td>\n<td>sort</td>\n<td>对序列进行排序。</td>\n</tr>\n<tr>\n<td></td>\n<td>find</td>\n<td>在序列中查找特定元素。</td>\n</tr>\n<tr>\n<td></td>\n<td>transform</td>\n<td>对序列进行变换操作。</td>\n</tr>\n<tr>\n<td></td>\n<td>accumulate</td>\n<td>计算序列元素的累积值。</td>\n</tr>\n<tr>\n<td></td>\n<td>for_each</td>\n<td>对序列的每个元素执行指定操作。</td>\n</tr>\n<tr>\n<td>适配器（Adapters）</td>\n<td>stack</td>\n<td>适配器，将栈的操作添加到其他容器上。</td>\n</tr>\n<tr>\n<td></td>\n<td>queue</td>\n<td>适配器，将队列的操作添加到其他容器上。</td>\n</tr>\n<tr>\n<td></td>\n<td>priority_queue</td>\n<td>适配器，将优先队列的操作添加到其他容器上。</td>\n</tr>\n<tr>\n<td>仿函数（Functors）</td>\n<td>less</td>\n<td>二元谓词，用于比较两个元素。</td>\n</tr>\n<tr>\n<td></td>\n<td>greater</td>\n<td>二元谓词，用于比较两个元素。</td>\n</tr>\n<tr>\n<td></td>\n<td>plus</td>\n<td>二元函数对象，实现加法。</td>\n</tr>\n<tr>\n<td></td>\n<td>minus</td>\n<td>二元函数对象，实现减法。</td>\n</tr>\n<tr>\n<td></td>\n<td>negate</td>\n<td>一元函数对象，实现取反。</td>\n</tr>\n<tr>\n<td>空间配置器（Allocators）</td>\n<td>allocator</td>\n<td>分配和释放内存的对象。</td>\n</tr>\n<tr>\n<td></td>\n<td>allocator_traits</td>\n<td>提供对分配器属性和操作的访问。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:1.79,words:536},y:"a",t:"c++2.stl模板概述",O:2}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html",{loader:()=>s.e(2779).then(s.bind(s,41199)),meta:{d:1701893836e3,c:["c++"],e:"<h3>vector</h3>\n\n\n\n<ol>\n<li>\n<p><strong>静态空间 vs. 动态扩展</strong>：</p>\n<ul>\n<li><strong>数组</strong>：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。</li>\n<li><strong><code>std::vector</code></strong>：<code>std::vector</code> 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 <code>std::vector</code> 的大小可以根据需要动态增加或减少，而不需要手动管理内存。</li>\n</ul>\n</li>\n<li>\n<p><strong>动态扩展的实现</strong>：</p>\n<ul>\n<li>当 <code>std::vector</code> 的容量不足以容纳新元素时，它会请求更大的内存块。这通常涉及到分配一块新的内存空间，将原有元素拷贝到新的内存中，然后释放原有的内存。这个过程确保了内存的连续性，有助于提高访问效率。</li>\n<li>遵循左闭右开原则</li>\n</ul>\n</li>\n</ol>",r:{minutes:5.28,words:1583},y:"a",t:"c++3.vector容器",O:3}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html",{loader:()=>s.e(4883).then(s.bind(s,93654)),meta:{d:1703074087e3,c:["c++"],e:'<h3>deque</h3>\n\n\n<figure><figcaption></figcaption></figure>\n<h3><code>std::deque</code> 定义：</h3>\n\n\n\n\n<figure><figcaption></figcaption></figure>\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;deque&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myDeque <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用迭代器遍历</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myDeque<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myDeque<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:3.34,words:1003},y:"a",t:"c++4.deque容器",O:4}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html",{loader:()=>s.e(1606).then(s.bind(s,49813)),meta:{d:1703074087e3,c:["c++"],e:'\n\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ofstream</td>\n<td>输出文件流，用于创建文件并向文件写入信息。</td>\n</tr>\n<tr>\n<td>ifstream</td>\n<td>输入文件流，用于从文件读取信息。</td>\n</tr>\n<tr>\n<td>fstream</td>\n<td>文件流，同时具有 ofstream 和 ifstream 功能，可以创建文件，向文件写入信息，从文件读取信息。</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>操作</th>\n<th>代码示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>包含头文件</td>\n<td><code>#include &lt;fstream&gt;</code></td>\n</tr>\n<tr>\n<td>2</td>\n<td>打开文件（文件输入流）</td>\n<td><code>std::ifstream inputFile("input.txt");</code></td>\n</tr>\n<tr>\n<td>3</td>\n<td>打开文件（文件输出流）</td>\n<td><code>std::ofstream outputFile("output.txt");</code></td>\n</tr>\n<tr>\n<td>4</td>\n<td>打开文件（文件输入和输出流）</td>\n<td>`std::fstream file("data.txt", std::ios::in</td>\n</tr>\n<tr>\n<td>5</td>\n<td>检查文件是否成功打开</td>\n<td><code>if (inputFile.is_open()) { /* 文件成功打开，进行读取操作 */ }</code></td>\n</tr>\n<tr>\n<td>6</td>\n<td>读取操作（从文件中读取数据）</td>\n<td><code>int value; inputFile &gt;&gt; value;</code></td>\n</tr>\n<tr>\n<td>7</td>\n<td>写入操作（向文件中写入数据）</td>\n<td><code>outputFile &lt;&lt; "Hello, File!";</code></td>\n</tr>\n<tr>\n<td>8</td>\n<td>读写操作（文件输入和输出流的读写操作）</td>\n<td><code>file &gt;&gt; value; file &lt;&lt; "Data";</code></td>\n</tr>\n<tr>\n<td>9</td>\n<td>关闭文件流</td>\n<td><code>inputFile.close(); outputFile.close(); file.close();</code></td>\n</tr>\n</tbody>\n</table>',r:{minutes:3.23,words:969},y:"a",t:"c++5.fstream|文件操作",O:5}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/6-stack.html",{loader:()=>s.e(7433).then(s.bind(s,42206)),meta:{d:1703335047e3,c:["c++"],e:'<h3>stack</h3>\n\n<blockquote>\n<p><code>std::stack</code> 是 C++ 标准模板库中的容器适配器（container adapter），它基于某个底层容器（默认是 <code>std::deque</code>，\n但也可以是 <code>std::vector</code> 或 <code>std::list</code>）提供了栈（stack）的功能。</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h3>定义：</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>stack<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Container<span class="token operator">&gt;</span> myStack<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.92,words:576},y:"a",t:"c++6.stack容器",O:6}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/7-queue.html",{loader:()=>s.e(5825).then(s.bind(s,11569)),meta:{d:1703335047e3,c:["c++"],e:'<h3>queue</h3>\n\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p><code>std::queue</code> 是 C++ 标准模板库中的容器适配器（container adapter），它基于某个底层容器（默认是 <code>std::deque</code>，\n但也可以是 <code>std::list</code> 或 <code>std::vector</code>）提供了队列（queue）的功能。</p>\n</blockquote>\n<h3>定义：</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>queue<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> Container<span class="token operator">&gt;</span> myQueue<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.6,words:480},y:"a",t:"c++7.queue容器",O:7}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html",{loader:()=>s.e(4363).then(s.bind(s,35468)),meta:{d:1703335047e3,c:["c++"],e:'<h3>List</h3>\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<h3>定义：</h3>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>list<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> myList<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:1.86,words:558},y:"a",t:"c++8.List容器",O:8}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/9-Set.html",{loader:()=>s.e(5600).then(s.bind(s,20260)),meta:{d:1703335047e3,c:["c++"],e:'<h3>Set/Multiset</h3>\n\n<p>这两者的主要区别在于 <code>std::set</code> 中不允许重复的元素，而 <code>std::multiset</code> 允许重复的元素。</p>\n<h3><code>std::set</code> 定义和概念：</h3>\n<h4>定义：</h4>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>set<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> mySet<span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:2.17,words:650},y:"a",t:"c++9.Set/Multiset容器",O:9}}],["/language/markdown/emoji/",{loader:()=>s.e(4470).then(s.bind(s,7980)),meta:{y:"p",t:"Emoji 列表",i:"face-smile",O:3}}],["/language/markdown/emoji/nature.html",{loader:()=>s.e(5371).then(s.bind(s,18694)),meta:{d:1698921358e3,c:["Markdown"],g:["Markdown","Emoji"],e:"<ul>\n<li>☀️ <code>:sunny:</code></li>\n<li>☔ <code>:umbrella:</code></li>\n<li>☁️ <code>:cloud:</code></li>\n<li>❄️ <code>:snowflake:</code></li>\n<li>⛄ <code>:snowman:</code></li>\n<li>⚡ <code>:zap:</code></li>\n<li>🌀 <code>:cyclone:</code></li>\n<li>🌁 <code>:foggy:</code></li>\n<li>🌊 <code>:ocean:</code></li>\n<li>🐱 <code>:cat:</code></li>\n<li>🐶 <code>:dog:</code></li>\n<li>🐭 <code>:mouse:</code></li>\n<li>🐹 <code>:hamster:</code></li>\n<li>🐰 <code>:rabbit:</code></li>\n<li>🐺 <code>:wolf:</code></li>\n<li>🐸 <code>:frog:</code></li>\n<li>🐯 <code>:tiger:</code></li>\n<li>🐨 <code>:koala:</code></li>\n<li>🐻 <code>:bear:</code></li>\n<li>🐷 <code>:pig:</code></li>\n<li>🐽 <code>:pig_nose:</code></li>\n<li>🐮 <code>:cow:</code></li>\n<li>🐗 <code>:boar:</code></li>\n<li>🐵 <code>:monkey_face:</code></li>\n<li>🐒 <code>:monkey:</code></li>\n<li>🐴 <code>:horse:</code></li>\n<li>🐎 <code>:racehorse:</code></li>\n<li>🐫 <code>:camel:</code></li>\n<li>🐑 <code>:sheep:</code></li>\n<li>🐘 <code>:elephant:</code></li>\n<li>🐼 <code>:panda_face:</code></li>\n<li>🐍 <code>:snake:</code></li>\n<li>🐦 <code>:bird:</code></li>\n<li>🐤 <code>:baby_chick:</code></li>\n<li>🐥 <code>:hatched_chick:</code></li>\n<li>🐣 <code>:hatching_chick:</code></li>\n<li>🐔 <code>:chicken:</code></li>\n<li>🐧 <code>:penguin:</code></li>\n<li>🐢 <code>:turtle:</code></li>\n<li>🐛 <code>:bug:</code></li>\n<li>🐝 <code>:honeybee:</code></li>\n<li>🐜 <code>:ant:</code></li>\n<li>🪲 <code>:beetle:</code></li>\n<li>🐌 <code>:snail:</code></li>\n<li>🐙 <code>:octopus:</code></li>\n<li>🐠 <code>:tropical_fish:</code></li>\n<li>🐟 <code>:fish:</code></li>\n<li>🐳 <code>:whale:</code></li>\n<li>🐋 <code>:whale2:</code></li>\n<li>🐬 <code>:dolphin:</code></li>\n<li>🐄 <code>:cow2:</code></li>\n<li>🐏 <code>:ram:</code></li>\n<li>🐀 <code>:rat:</code></li>\n<li>🐃 <code>:water_buffalo:</code></li>\n<li>🐅 <code>:tiger2:</code></li>\n<li>🐇 <code>:rabbit2:</code></li>\n<li>🐉 <code>:dragon:</code></li>\n<li>🐐 <code>:goat:</code></li>\n<li>🐓 <code>:rooster:</code></li>\n<li>🐕 <code>:dog2:</code></li>\n<li>🐖 <code>:pig2:</code></li>\n<li>🐁 <code>:mouse2:</code></li>\n<li>🐂 <code>:ox:</code></li>\n<li>🐲 <code>:dragon_face:</code></li>\n<li>🐡 <code>:blowfish:</code></li>\n<li>🐊 <code>:crocodile:</code></li>\n<li>🐪 <code>:dromedary_camel:</code></li>\n<li>🐆 <code>:leopard:</code></li>\n<li>🐈 <code>:cat2:</code></li>\n<li>🐩 <code>:poodle:</code></li>\n<li>🐾 <code>:paw_prints:</code></li>\n<li>💐 <code>:bouquet:</code></li>\n<li>🌸 <code>:cherry_blossom:</code></li>\n<li>🌷 <code>:tulip:</code></li>\n<li>🍀 <code>:four_leaf_clover:</code></li>\n<li>🌹 <code>:rose:</code></li>\n<li>🌻 <code>:sunflower:</code></li>\n<li>🌺 <code>:hibiscus:</code></li>\n<li>🍁 <code>:maple_leaf:</code></li>\n<li>🍃 <code>:leaves:</code></li>\n<li>🍂 <code>:fallen_leaf:</code></li>\n<li>🌿 <code>:herb:</code></li>\n<li>🍄 <code>:mushroom:</code></li>\n<li>🌵 <code>:cactus:</code></li>\n<li>🌴 <code>:palm_tree:</code></li>\n<li>🌲 <code>:evergreen_tree:</code></li>\n<li>🌳 <code>:deciduous_tree:</code></li>\n<li>🌰 <code>:chestnut:</code></li>\n<li>🌱 <code>:seedling:</code></li>\n<li>🌼 <code>:blossom:</code></li>\n<li>🌾 <code>:ear_of_rice:</code></li>\n<li>🐚 <code>:shell:</code></li>\n<li>🌐 <code>:globe_with_meridians:</code></li>\n<li>🌞 <code>:sun_with_face:</code></li>\n<li>🌝 <code>:full_moon_with_face:</code></li>\n<li>🌚 <code>:new_moon_with_face:</code></li>\n<li>🌑 <code>:new_moon:</code></li>\n<li>🌒 <code>:waxing_crescent_moon:</code></li>\n<li>🌓 <code>:first_quarter_moon:</code></li>\n<li>🌔 <code>:waxing_gibbous_moon:</code></li>\n<li>🌕 <code>:full_moon:</code></li>\n<li>🌖 <code>:waning_gibbous_moon:</code></li>\n<li>🌗 <code>:last_quarter_moon:</code></li>\n<li>🌘 <code>:waning_crescent_moon:</code></li>\n<li>🌜 <code>:last_quarter_moon_with_face:</code></li>\n<li>🌛 <code>:first_quarter_moon_with_face:</code></li>\n<li>🌙 <code>:crescent_moon:</code></li>\n<li>🌍 <code>:earth_africa:</code></li>\n<li>🌎 <code>:earth_americas:</code></li>\n<li>🌏 <code>:earth_asia:</code></li>\n<li>🌋 <code>:volcano:</code></li>\n<li>🌌 <code>:milky_way:</code></li>\n<li>⛅ <code>:partly_sunny:</code></li>\n</ul>",r:{minutes:.79,words:237},y:"a",t:"自然 Emoji",i:"tree"}}],["/language/markdown/emoji/object.html",{loader:()=>s.e(5160).then(s.bind(s,9667)),meta:{d:1698921358e3,c:["Markdown"],g:["Markdown","Emoji"],e:"<ul>\n<li>🎍 <code>:bamboo:</code></li>\n<li>💝 <code>:gift_heart:</code></li>\n<li>🎎 <code>:dolls:</code></li>\n<li>🎒 <code>:school_satchel:</code></li>\n<li>🎓 <code>:mortar_board:</code></li>\n<li>🎏 <code>:flags:</code></li>\n<li>🎆 <code>:fireworks:</code></li>\n<li>🎇 <code>:sparkler:</code></li>\n<li>🎐 <code>:wind_chime:</code></li>\n<li>🎑 <code>:rice_scene:</code></li>\n<li>🎃 <code>:jack_o_lantern:</code></li>\n<li>👻 <code>:ghost:</code></li>\n<li>🎅 <code>:santa:</code></li>\n<li>🎄 <code>:christmas_tree:</code></li>\n<li>🎁 <code>:gift:</code></li>\n<li>🔔 <code>:bell:</code></li>\n<li>🔕 <code>:no_bell:</code></li>\n<li>🎋 <code>:tanabata_tree:</code></li>\n<li>🎉 <code>:tada:</code></li>\n<li>🎊 <code>:confetti_ball:</code></li>\n<li>🎈 <code>:balloon:</code></li>\n<li>🔮 <code>:crystal_ball:</code></li>\n<li>💿 <code>:cd:</code></li>\n<li>📀 <code>:dvd:</code></li>\n<li>💾 <code>:floppy_disk:</code></li>\n<li>📷 <code>:camera:</code></li>\n<li>📹 <code>:video_camera:</code></li>\n<li>🎥 <code>:movie_camera:</code></li>\n<li>💻 <code>:computer:</code></li>\n<li>📺 <code>:tv:</code></li>\n<li>📱 <code>:iphone:</code></li>\n<li>☎️ <code>:phone:</code></li>\n<li>☎️ <code>:telephone:</code></li>\n<li>📞 <code>:telephone_receiver:</code></li>\n<li>📟 <code>:pager:</code></li>\n<li>📠 <code>:fax:</code></li>\n<li>💽 <code>:minidisc:</code></li>\n<li>📼 <code>:vhs:</code></li>\n<li>🔉 <code>:sound:</code></li>\n<li>🔈 <code>:speaker:</code></li>\n<li>🔇 <code>:mute:</code></li>\n<li>📢 <code>:loudspeaker:</code></li>\n<li>📣 <code>:mega:</code></li>\n<li>⌛ <code>:hourglass:</code></li>\n<li>⏳ <code>:hourglass_flowing_sand:</code></li>\n<li>⏰ <code>:alarm_clock:</code></li>\n<li>⌚ <code>:watch:</code></li>\n<li>📻 <code>:radio:</code></li>\n<li>📡 <code>:satellite:</code></li>\n<li>➿ <code>:loop:</code></li>\n<li>🔍 <code>:mag:</code></li>\n<li>🔎 <code>:mag_right:</code></li>\n<li>🔓 <code>:unlock:</code></li>\n<li>🔒 <code>:lock:</code></li>\n<li>🔏 <code>:lock_with_ink_pen:</code></li>\n<li>🔐 <code>:closed_lock_with_key:</code></li>\n<li>🔑 <code>:key:</code></li>\n<li>💡 <code>:bulb:</code></li>\n<li>🔦 <code>:flashlight:</code></li>\n<li>🔆 <code>:high_brightness:</code></li>\n<li>🔅 <code>:low_brightness:</code></li>\n<li>🔌 <code>:electric_plug:</code></li>\n<li>🔋 <code>:battery:</code></li>\n<li>📲 <code>:calling:</code></li>\n<li>📧 <code>:email:</code></li>\n<li>📫 <code>:mailbox:</code></li>\n<li>📮 <code>:postbox:</code></li>\n<li>🛀 <code>:bath:</code></li>\n<li>🛁 <code>:bathtub:</code></li>\n<li>🚿 <code>:shower:</code></li>\n<li>🚽 <code>:toilet:</code></li>\n<li>🔧 <code>:wrench:</code></li>\n<li>🔩 <code>:nut_and_bolt:</code></li>\n<li>🔨 <code>:hammer:</code></li>\n<li>💺 <code>:seat:</code></li>\n<li>💰 <code>:moneybag:</code></li>\n<li>💴 <code>:yen:</code></li>\n<li>💵 <code>:dollar:</code></li>\n<li>💷 <code>:pound:</code></li>\n<li>💶 <code>:euro:</code></li>\n<li>💳 <code>:credit_card:</code></li>\n<li>💸 <code>:money_with_wings:</code></li>\n<li>📧 <code>:e-mail:</code></li>\n<li>📥 <code>:inbox_tray:</code></li>\n<li>📤 <code>:outbox_tray:</code></li>\n<li>✉️ <code>:envelope:</code></li>\n<li>📨 <code>:incoming_envelope:</code></li>\n<li>📯 <code>:postal_horn:</code></li>\n<li>📪 <code>:mailbox_closed:</code></li>\n<li>📬 <code>:mailbox_with_mail:</code></li>\n<li>📭 <code>:mailbox_with_no_mail:</code></li>\n<li>📦 <code>:package:</code></li>\n<li>🚪 <code>:door:</code></li>\n<li>🚬 <code>:smoking:</code></li>\n<li>💣 <code>:bomb:</code></li>\n<li>🔫 <code>:gun:</code></li>\n<li>🔪 <code>:hocho:</code></li>\n<li>💊 <code>:pill:</code></li>\n<li>💉 <code>:syringe:</code></li>\n<li>📄 <code>:page_facing_up:</code></li>\n<li>📃 <code>:page_with_curl:</code></li>\n<li>📑 <code>:bookmark_tabs:</code></li>\n<li>📊 <code>:bar_chart:</code></li>\n<li>📈 <code>:chart_with_upwards_trend:</code></li>\n<li>📉 <code>:chart_with_downwards_trend:</code></li>\n<li>📜 <code>:scroll:</code></li>\n<li>📋 <code>:clipboard:</code></li>\n<li>📆 <code>:calendar:</code></li>\n<li>📅 <code>:date:</code></li>\n<li>📇 <code>:card_index:</code></li>\n<li>📁 <code>:file_folder:</code></li>\n<li>📂 <code>:open_file_folder:</code></li>\n<li>✂️ <code>:scissors:</code></li>\n<li>📌 <code>:pushpin:</code></li>\n<li>📎 <code>:paperclip:</code></li>\n<li>✒️ <code>:black_nib:</code></li>\n<li>✏️ <code>:pencil2:</code></li>\n<li>📏 <code>:straight_ruler:</code></li>\n<li>📐 <code>:triangular_ruler:</code></li>\n<li>📕 <code>:closed_book:</code></li>\n<li>📗 <code>:green_book:</code></li>\n<li>📘 <code>:blue_book:</code></li>\n<li>📙 <code>:orange_book:</code></li>\n<li>📓 <code>:notebook:</code></li>\n<li>📔 <code>:notebook_with_decorative_cover:</code></li>\n<li>📒 <code>:ledger:</code></li>\n<li>📚 <code>:books:</code></li>\n<li>🔖 <code>:bookmark:</code></li>\n<li>📛 <code>:name_badge:</code></li>\n<li>🔬 <code>:microscope:</code></li>\n<li>🔭 <code>:telescope:</code></li>\n<li>📰 <code>:newspaper:</code></li>\n<li>🏈 <code>:football:</code></li>\n<li>🏀 <code>:basketball:</code></li>\n<li>⚽ <code>:soccer:</code></li>\n<li>⚾ <code>:baseball:</code></li>\n<li>🎾 <code>:tennis:</code></li>\n<li>🎱 <code>:8ball:</code></li>\n<li>🏉 <code>:rugby_football:</code></li>\n<li>🎳 <code>:bowling:</code></li>\n<li>⛳ <code>:golf:</code></li>\n<li>🚵 <code>:mountain_bicyclist:</code></li>\n<li>🚴 <code>:bicyclist:</code></li>\n<li>🏇 <code>:horse_racing:</code></li>\n<li>🏂 <code>:snowboarder:</code></li>\n<li>🏊 <code>:swimmer:</code></li>\n<li>🏄 <code>:surfer:</code></li>\n<li>🎿 <code>:ski:</code></li>\n<li>♠️ <code>:spades:</code></li>\n<li>♥️ <code>:hearts:</code></li>\n<li>♣️ <code>:clubs:</code></li>\n<li>♦️ <code>:diamonds:</code></li>\n<li>💎 <code>:gem:</code></li>\n<li>💍 <code>:ring:</code></li>\n<li>🏆 <code>:trophy:</code></li>\n<li>🎼 <code>:musical_score:</code></li>\n<li>🎹 <code>:musical_keyboard:</code></li>\n<li>🎻 <code>:violin:</code></li>\n<li>👾 <code>:space_invader:</code></li>\n<li>🎮 <code>:video_game:</code></li>\n<li>🃏 <code>:black_joker:</code></li>\n<li>🎴 <code>:flower_playing_cards:</code></li>\n<li>🎲 <code>:game_die:</code></li>\n<li>🎯 <code>:dart:</code></li>\n<li>🀄 <code>:mahjong:</code></li>\n<li>🎬 <code>:clapper:</code></li>\n<li>📝 <code>:memo:</code></li>\n<li>📝 <code>:pencil:</code></li>\n<li>📖 <code>:book:</code></li>\n<li>🎨 <code>:art:</code></li>\n<li>🎤 <code>:microphone:</code></li>\n<li>🎧 <code>:headphones:</code></li>\n<li>🎺 <code>:trumpet:</code></li>\n<li>🎷 <code>:saxophone:</code></li>\n<li>🎸 <code>:guitar:</code></li>\n<li>👞 <code>:shoe:</code></li>\n<li>👡 <code>:sandal:</code></li>\n<li>👠 <code>:high_heel:</code></li>\n<li>💄 <code>:lipstick:</code></li>\n<li>👢 <code>:boot:</code></li>\n<li>👕 <code>:shirt:</code></li>\n<li>👕 <code>:tshirt:</code></li>\n<li>👔 <code>:necktie:</code></li>\n<li>👚 <code>:womans_clothes:</code></li>\n<li>👗 <code>:dress:</code></li>\n<li>🎽 <code>:running_shirt_with_sash:</code></li>\n<li>👖 <code>:jeans:</code></li>\n<li>👘 <code>:kimono:</code></li>\n<li>👙 <code>:bikini:</code></li>\n<li>🎀 <code>:ribbon:</code></li>\n<li>🎩 <code>:tophat:</code></li>\n<li>👑 <code>:crown:</code></li>\n<li>👒 <code>:womans_hat:</code></li>\n<li>👞 <code>:mans_shoe:</code></li>\n<li>🌂 <code>:closed_umbrella:</code></li>\n<li>💼 <code>:briefcase:</code></li>\n<li>👜 <code>:handbag:</code></li>\n<li>👝 <code>:pouch:</code></li>\n<li>👛 <code>:purse:</code></li>\n<li>👓 <code>:eyeglasses:</code></li>\n<li>🎣 <code>:fishing_pole_and_fish:</code></li>\n<li>☕ <code>:coffee:</code></li>\n<li>🍵 <code>:tea:</code></li>\n<li>🍶 <code>:sake:</code></li>\n<li>🍼 <code>:baby_bottle:</code></li>\n<li>🍺 <code>:beer:</code></li>\n<li>🍻 <code>:beers:</code></li>\n<li>🍸 <code>:cocktail:</code></li>\n<li>🍹 <code>:tropical_drink:</code></li>\n<li>🍷 <code>:wine_glass:</code></li>\n<li>🍴 <code>:fork_and_knife:</code></li>\n<li>🍕 <code>:pizza:</code></li>\n<li>🍔 <code>:hamburger:</code></li>\n<li>🍟 <code>:fries:</code></li>\n<li>🍗 <code>:poultry_leg:</code></li>\n<li>🍖 <code>:meat_on_bone:</code></li>\n<li>🍝 <code>:spaghetti:</code></li>\n<li>🍛 <code>:curry:</code></li>\n<li>🍤 <code>:fried_shrimp:</code></li>\n<li>🍱 <code>:bento:</code></li>\n<li>🍣 <code>:sushi:</code></li>\n<li>🍥 <code>:fish_cake:</code></li>\n<li>🍙 <code>:rice_ball:</code></li>\n<li>🍘 <code>:rice_cracker:</code></li>\n<li>🍚 <code>:rice:</code></li>\n<li>🍜 <code>:ramen:</code></li>\n<li>🍲 <code>:stew:</code></li>\n<li>🍢 <code>:oden:</code></li>\n<li>🍡 <code>:dango:</code></li>\n<li>🥚 <code>:egg:</code></li>\n<li>🍞 <code>:bread:</code></li>\n<li>🍩 <code>:doughnut:</code></li>\n<li>🍮 <code>:custard:</code></li>\n<li>🍦 <code>:icecream:</code></li>\n<li>🍨 <code>:ice_cream:</code></li>\n<li>🍧 <code>:shaved_ice:</code></li>\n<li>🎂 <code>:birthday:</code></li>\n<li>🍰 <code>:cake:</code></li>\n<li>🍪 <code>:cookie:</code></li>\n<li>🍫 <code>:chocolate_bar:</code></li>\n<li>🍬 <code>:candy:</code></li>\n<li>🍭 <code>:lollipop:</code></li>\n<li>🍯 <code>:honey_pot:</code></li>\n<li>🍎 <code>:apple:</code></li>\n<li>🍏 <code>:green_apple:</code></li>\n<li>🍊 <code>:tangerine:</code></li>\n<li>🍋 <code>:lemon:</code></li>\n<li>🍒 <code>:cherries:</code></li>\n<li>🍇 <code>:grapes:</code></li>\n<li>🍉 <code>:watermelon:</code></li>\n<li>🍓 <code>:strawberry:</code></li>\n<li>🍑 <code>:peach:</code></li>\n<li>🍈 <code>:melon:</code></li>\n<li>🍌 <code>:banana:</code></li>\n<li>🍐 <code>:pear:</code></li>\n<li>🍍 <code>:pineapple:</code></li>\n<li>🍠 <code>:sweet_potato:</code></li>\n<li>🍆 <code>:eggplant:</code></li>\n<li>🍅 <code>:tomato:</code></li>\n<li>🌽 <code>:corn:</code></li>\n</ul>",r:{minutes:1.78,words:534},y:"a",t:"对象 Emoji",i:"object-group"}}],["/language/markdown/emoji/people.html",{loader:()=>s.e(127).then(s.bind(s,48274)),meta:{d:1698921358e3,c:["Markdown"],g:["Markdown","Emoji"],e:"<ul>\n<li>😄 <code>:smile:</code></li>\n<li>😆 <code>:laughing:</code></li>\n<li>😊 <code>:blush:</code></li>\n<li>😃 <code>:smiley:</code></li>\n<li>😏 <code>:smirk:</code></li>\n<li>😍 <code>:heart_eyes:</code></li>\n<li>😘 <code>:kissing_heart:</code></li>\n<li>😚 <code>:kissing_closed_eyes:</code></li>\n<li>😳 <code>:flushed:</code></li>\n<li>😌 <code>:relieved:</code></li>\n<li>😆 <code>:satisfied:</code></li>\n<li>😁 <code>:grin:</code></li>\n<li>😉 <code>:wink:</code></li>\n<li>😜 <code>:stuck_out_tongue_winking_eye:</code></li>\n<li>😝 <code>:stuck_out_tongue_closed_eyes:</code></li>\n<li>😀 <code>:grinning:</code></li>\n<li>😗 <code>:kissing:</code></li>\n<li>😙 <code>:kissing_smiling_eyes:</code></li>\n<li>😛 <code>:stuck_out_tongue:</code></li>\n<li>😴 <code>:sleeping:</code></li>\n<li>😟 <code>:worried:</code></li>\n<li>😦 <code>:frowning:</code></li>\n<li>😧 <code>:anguished:</code></li>\n<li>😮 <code>:open_mouth:</code></li>\n<li>😬 <code>:grimacing:</code></li>\n<li>😕 <code>:confused:</code></li>\n<li>😯 <code>:hushed:</code></li>\n<li>😑 <code>:expressionless:</code></li>\n<li>😒 <code>:unamused:</code></li>\n<li>😅 <code>:sweat_smile:</code></li>\n<li>😓 <code>:sweat:</code></li>\n<li>😥 <code>:disappointed_relieved:</code></li>\n<li>😩 <code>:weary:</code></li>\n<li>😔 <code>:pensive:</code></li>\n<li>😞 <code>:disappointed:</code></li>\n<li>😖 <code>:confounded:</code></li>\n<li>😨 <code>:fearful:</code></li>\n<li>😰 <code>:cold_sweat:</code></li>\n<li>😣 <code>:persevere:</code></li>\n<li>😢 <code>:cry:</code></li>\n<li>😭 <code>:sob:</code></li>\n<li>😂 <code>:joy:</code></li>\n<li>😲 <code>:astonished:</code></li>\n<li>😱 <code>:scream:</code></li>\n<li>😫 <code>:tired_face:</code></li>\n<li>😠 <code>:angry:</code></li>\n<li>😡 <code>:rage:</code></li>\n<li>😤 <code>:triumph:</code></li>\n<li>😪 <code>:sleepy:</code></li>\n<li>😋 <code>:yum:</code></li>\n<li>😷 <code>:mask:</code></li>\n<li>😎 <code>:sunglasses:</code></li>\n<li>😵 <code>:dizzy_face:</code></li>\n<li>👿 <code>:imp:</code></li>\n<li>😈 <code>:smiling_imp:</code></li>\n<li>😐 <code>:neutral_face:</code></li>\n<li>😶 <code>:no_mouth:</code></li>\n<li>😇 <code>:innocent:</code></li>\n<li>👽 <code>:alien:</code></li>\n<li>💛 <code>:yellow_heart:</code></li>\n<li>💙 <code>:blue_heart:</code></li>\n<li>💜 <code>:purple_heart:</code></li>\n<li>❤️ <code>:heart:</code></li>\n<li>💚 <code>:green_heart:</code></li>\n<li>💔 <code>:broken_heart:</code></li>\n<li>💓 <code>:heartbeat:</code></li>\n<li>💗 <code>:heartpulse:</code></li>\n<li>💕 <code>:two_hearts:</code></li>\n<li>💞 <code>:revolving_hearts:</code></li>\n<li>💘 <code>:cupid:</code></li>\n<li>💖 <code>:sparkling_heart:</code></li>\n<li>✨ <code>:sparkles:</code></li>\n<li>⭐ <code>:star:</code></li>\n<li>🌟 <code>:star2:</code></li>\n<li>💫 <code>:dizzy:</code></li>\n<li>💥 <code>:boom:</code></li>\n<li>💥 <code>:collision:</code></li>\n<li>💢 <code>:anger:</code></li>\n<li>❗ <code>:exclamation:</code></li>\n<li>❓ <code>:question:</code></li>\n<li>❕ <code>:grey_exclamation:</code></li>\n<li>❔ <code>:grey_question:</code></li>\n<li>💤 <code>:zzz:</code></li>\n<li>💨 <code>:dash:</code></li>\n<li>💦 <code>:sweat_drops:</code></li>\n<li>🎶 <code>:notes:</code></li>\n<li>🎵 <code>:musical_note:</code></li>\n<li>🔥 <code>:fire:</code></li>\n<li>💩 <code>:hankey:</code></li>\n<li>💩 <code>:poop:</code></li>\n<li>💩 <code>:shit:</code></li>\n<li>👍 <code>:+1:</code></li>\n<li>👍 <code>:thumbsup:</code></li>\n<li>👎 <code>:-1:</code></li>\n<li>👎 <code>:thumbsdown:</code></li>\n<li>👌 <code>:ok_hand:</code></li>\n<li>👊 <code>:punch:</code></li>\n<li>👊 <code>:facepunch:</code></li>\n<li>✊ <code>:fist:</code></li>\n<li>✌️ <code>:v:</code></li>\n<li>👋 <code>:wave:</code></li>\n<li>✋ <code>:hand:</code></li>\n<li>✋ <code>:raised_hand:</code></li>\n<li>👐 <code>:open_hands:</code></li>\n<li>☝️ <code>:point_up:</code></li>\n<li>👇 <code>:point_down:</code></li>\n<li>👈 <code>:point_left:</code></li>\n<li>👉 <code>:point_right:</code></li>\n<li>🙌 <code>:raised_hands:</code></li>\n<li>🙏 <code>:pray:</code></li>\n<li>👆 <code>:point_up_2:</code></li>\n<li>👏 <code>:clap:</code></li>\n<li>💪 <code>:muscle:</code></li>\n<li>🤘 <code>:metal:</code></li>\n<li>🖕 <code>:fu:</code></li>\n<li>🏃 <code>:runner:</code></li>\n<li>🏃 <code>:running:</code></li>\n<li>👫 <code>:couple:</code></li>\n<li>👪 <code>:family:</code></li>\n<li>👬 <code>:two_men_holding_hands:</code></li>\n<li>👭 <code>:two_women_holding_hands:</code></li>\n<li>💃 <code>:dancer:</code></li>\n<li>👯 <code>:dancers:</code></li>\n<li>🙆‍♀️ <code>:ok_woman:</code></li>\n<li>🙅 <code>:no_good:</code></li>\n<li>💁 <code>:information_desk_person:</code></li>\n<li>🙋 <code>:raising_hand:</code></li>\n<li>👰‍♀️ <code>:bride_with_veil:</code></li>\n<li>:person_with_pouting_face: <code>:person_with_pouting_face:</code></li>\n<li>:person_frowning: <code>:person_frowning:</code></li>\n<li>🙇 <code>:bow:</code></li>\n<li>💑 <code>:couple_with_heart:</code></li>\n<li>💆 <code>:massage:</code></li>\n<li>💇 <code>:haircut:</code></li>\n<li>💅 <code>:nail_care:</code></li>\n<li>👦 <code>:boy:</code></li>\n<li>👧 <code>:girl:</code></li>\n<li>👩 <code>:woman:</code></li>\n<li>👨 <code>:man:</code></li>\n<li>👶 <code>:baby:</code></li>\n<li>👵 <code>:older_woman:</code></li>\n<li>👴 <code>:older_man:</code></li>\n<li>:person_with_blond_hair: <code>:person_with_blond_hair:</code></li>\n<li>👲 <code>:man_with_gua_pi_mao:</code></li>\n<li>👳‍♂️ <code>:man_with_turban:</code></li>\n<li>👷 <code>:construction_worker:</code></li>\n<li>👮 <code>:cop:</code></li>\n<li>👼 <code>:angel:</code></li>\n<li>👸 <code>:princess:</code></li>\n<li>😺 <code>:smiley_cat:</code></li>\n<li>😸 <code>:smile_cat:</code></li>\n<li>😻 <code>:heart_eyes_cat:</code></li>\n<li>😽 <code>:kissing_cat:</code></li>\n<li>😼 <code>:smirk_cat:</code></li>\n<li>🙀 <code>:scream_cat:</code></li>\n<li>😿 <code>:crying_cat_face:</code></li>\n<li>😹 <code>:joy_cat:</code></li>\n<li>😾 <code>:pouting_cat:</code></li>\n<li>👹 <code>:japanese_ogre:</code></li>\n<li>👺 <code>:japanese_goblin:</code></li>\n<li>🙈 <code>:see_no_evil:</code></li>\n<li>🙉 <code>:hear_no_evil:</code></li>\n<li>🙊 <code>:speak_no_evil:</code></li>\n<li>💂‍♂️ <code>:guardsman:</code></li>\n<li>💀 <code>:skull:</code></li>\n<li>🐾 <code>:feet:</code></li>\n<li>👄 <code>:lips:</code></li>\n<li>💋 <code>:kiss:</code></li>\n<li>💧 <code>:droplet:</code></li>\n<li>👂 <code>:ear:</code></li>\n<li>👀 <code>:eyes:</code></li>\n<li>👃 <code>:nose:</code></li>\n<li>👅 <code>:tongue:</code></li>\n<li>💌 <code>:love_letter:</code></li>\n<li>👤 <code>:bust_in_silhouette:</code></li>\n<li>👥 <code>:busts_in_silhouette:</code></li>\n<li>💬 <code>:speech_balloon:</code></li>\n<li>💭 <code>:thought_balloon:</code></li>\n</ul>",r:{minutes:1.22,words:367},y:"a",t:"人物 Emoji",i:"person"}}],["/language/markdown/emoji/place.html",{loader:()=>s.e(2577).then(s.bind(s,51060)),meta:{d:1698921358e3,c:["Markdown"],g:["Markdown","Emoji"],e:"<ul>\n<li>🏠 <code>:house:</code></li>\n<li>🏡 <code>:house_with_garden:</code></li>\n<li>🏫 <code>:school:</code></li>\n<li>🏢 <code>:office:</code></li>\n<li>🏣 <code>:post_office:</code></li>\n<li>🏥 <code>:hospital:</code></li>\n<li>🏦 <code>:bank:</code></li>\n<li>🏪 <code>:convenience_store:</code></li>\n<li>🏩 <code>:love_hotel:</code></li>\n<li>🏨 <code>:hotel:</code></li>\n<li>💒 <code>:wedding:</code></li>\n<li>⛪ <code>:church:</code></li>\n<li>🏬 <code>:department_store:</code></li>\n<li>🏤 <code>:european_post_office:</code></li>\n<li>🌇 <code>:city_sunrise:</code></li>\n<li>🌆 <code>:city_sunset:</code></li>\n<li>🏯 <code>:japanese_castle:</code></li>\n<li>🏰 <code>:european_castle:</code></li>\n<li>⛺ <code>:tent:</code></li>\n<li>🏭 <code>:factory:</code></li>\n<li>🗼 <code>:tokyo_tower:</code></li>\n<li>🗾 <code>:japan:</code></li>\n<li>🗻 <code>:mount_fuji:</code></li>\n<li>🌄 <code>:sunrise_over_mountains:</code></li>\n<li>🌅 <code>:sunrise:</code></li>\n<li>🌠 <code>:stars:</code></li>\n<li>🗽 <code>:statue_of_liberty:</code></li>\n<li>🌉 <code>:bridge_at_night:</code></li>\n<li>🎠 <code>:carousel_horse:</code></li>\n<li>🌈 <code>:rainbow:</code></li>\n<li>🎡 <code>:ferris_wheel:</code></li>\n<li>⛲ <code>:fountain:</code></li>\n<li>🎢 <code>:roller_coaster:</code></li>\n<li>🚢 <code>:ship:</code></li>\n<li>🚤 <code>:speedboat:</code></li>\n<li>⛵ <code>:boat:</code></li>\n<li>⛵ <code>:sailboat:</code></li>\n<li>🚣 <code>:rowboat:</code></li>\n<li>⚓ <code>:anchor:</code></li>\n<li>🚀 <code>:rocket:</code></li>\n<li>✈️ <code>:airplane:</code></li>\n<li>🚁 <code>:helicopter:</code></li>\n<li>🚂 <code>:steam_locomotive:</code></li>\n<li>🚊 <code>:tram:</code></li>\n<li>🚞 <code>:mountain_railway:</code></li>\n<li>🚲 <code>:bike:</code></li>\n<li>🚡 <code>:aerial_tramway:</code></li>\n<li>🚟 <code>:suspension_railway:</code></li>\n<li>🚠 <code>:mountain_cableway:</code></li>\n<li>🚜 <code>:tractor:</code></li>\n<li>🚙 <code>:blue_car:</code></li>\n<li>🚘 <code>:oncoming_automobile:</code></li>\n<li>🚗 <code>:car:</code></li>\n<li>🚗 <code>:red_car:</code></li>\n<li>🚕 <code>:taxi:</code></li>\n<li>🚖 <code>:oncoming_taxi:</code></li>\n<li>🚛 <code>:articulated_lorry:</code></li>\n<li>🚌 <code>:bus:</code></li>\n<li>🚍 <code>:oncoming_bus:</code></li>\n<li>🚨 <code>:rotating_light:</code></li>\n<li>🚓 <code>:police_car:</code></li>\n<li>🚔 <code>:oncoming_police_car:</code></li>\n<li>🚒 <code>:fire_engine:</code></li>\n<li>🚑 <code>:ambulance:</code></li>\n<li>🚐 <code>:minibus:</code></li>\n<li>🚚 <code>:truck:</code></li>\n<li>🚋 <code>:train:</code></li>\n<li>🚉 <code>:station:</code></li>\n<li>🚆 <code>:train2:</code></li>\n<li>🚅 <code>:bullettrain_front:</code></li>\n<li>🚄 <code>:bullettrain_side:</code></li>\n<li>🚈 <code>:light_rail:</code></li>\n<li>🚝 <code>:monorail:</code></li>\n<li>🚃 <code>:railway_car:</code></li>\n<li>🚎 <code>:trolleybus:</code></li>\n<li>🎫 <code>:ticket:</code></li>\n<li>⛽ <code>:fuelpump:</code></li>\n<li>🚦 <code>:vertical_traffic_light:</code></li>\n<li>🚥 <code>:traffic_light:</code></li>\n<li>⚠️ <code>:warning:</code></li>\n<li>🚧 <code>:construction:</code></li>\n<li>🔰 <code>:beginner:</code></li>\n<li>🏧 <code>:atm:</code></li>\n<li>🎰 <code>:slot_machine:</code></li>\n<li>🚏 <code>:busstop:</code></li>\n<li>💈 <code>:barber:</code></li>\n<li>♨️ <code>:hotsprings:</code></li>\n<li>🏁 <code>:checkered_flag:</code></li>\n<li>🎌 <code>:crossed_flags:</code></li>\n<li>🏮 <code>:izakaya_lantern:</code></li>\n<li>🗿 <code>:moyai:</code></li>\n<li>🎪 <code>:circus_tent:</code></li>\n<li>🎭 <code>:performing_arts:</code></li>\n<li>📍 <code>:round_pushpin:</code></li>\n<li>🚩 <code>:triangular_flag_on_post:</code></li>\n</ul>",r:{minutes:.67,words:201},y:"a",t:"地点 Emoji",i:"city"}}],["/language/markdown/emoji/symbol.html",{loader:()=>s.e(888).then(s.bind(s,87608)),meta:{d:1698921358e3,c:["Markdown"],g:["Markdown","Emoji"],e:"<ul>\n<li>1️⃣ <code>:one:</code></li>\n<li>2️⃣ <code>:two:</code></li>\n<li>3️⃣ <code>:three:</code></li>\n<li>4️⃣ <code>:four:</code></li>\n<li>5️⃣ <code>:five:</code></li>\n<li>6️⃣ <code>:six:</code></li>\n<li>7️⃣ <code>:seven:</code></li>\n<li>8️⃣ <code>:eight:</code></li>\n<li>9️⃣ <code>:nine:</code></li>\n<li>🔟 <code>:keycap_ten:</code></li>\n<li>🔢 <code>:1234:</code></li>\n<li>0️⃣ <code>:zero:</code></li>\n<li>#️⃣ <code>:hash:</code></li>\n<li>🔣 <code>:symbols:</code></li>\n<li>◀️ <code>:arrow_backward:</code></li>\n<li>⬇️ <code>:arrow_down:</code></li>\n<li>▶️ <code>:arrow_forward:</code></li>\n<li>⬅️ <code>:arrow_left:</code></li>\n<li>🔠 <code>:capital_abcd:</code></li>\n<li>🔡 <code>:abcd:</code></li>\n<li>🔤 <code>:abc:</code></li>\n<li>↙️ <code>:arrow_lower_left:</code></li>\n<li>↘️ <code>:arrow_lower_right:</code></li>\n<li>➡️ <code>:arrow_right:</code></li>\n<li>⬆️ <code>:arrow_up:</code></li>\n<li>↖️ <code>:arrow_upper_left:</code></li>\n<li>↗️ <code>:arrow_upper_right:</code></li>\n<li>⏬ <code>:arrow_double_down:</code></li>\n<li>⏫ <code>:arrow_double_up:</code></li>\n<li>🔽 <code>:arrow_down_small:</code></li>\n<li>⤵️ <code>:arrow_heading_down:</code></li>\n<li>⤴️ <code>:arrow_heading_up:</code></li>\n<li>↩️ <code>:leftwards_arrow_with_hook:</code></li>\n<li>↪️ <code>:arrow_right_hook:</code></li>\n<li>↔️ <code>:left_right_arrow:</code></li>\n<li>↕️ <code>:arrow_up_down:</code></li>\n<li>🔼 <code>:arrow_up_small:</code></li>\n<li>🔃 <code>:arrows_clockwise:</code></li>\n<li>🔄 <code>:arrows_counterclockwise:</code></li>\n<li>⏪ <code>:rewind:</code></li>\n<li>⏩ <code>:fast_forward:</code></li>\n<li>ℹ️ <code>:information_source:</code></li>\n<li>🆗 <code>:ok:</code></li>\n<li>🔀 <code>:twisted_rightwards_arrows:</code></li>\n<li>🔁 <code>:repeat:</code></li>\n<li>🔂 <code>:repeat_one:</code></li>\n<li>🆕 <code>:new:</code></li>\n<li>🔝 <code>:top:</code></li>\n<li>🆙 <code>:up:</code></li>\n<li>🆒 <code>:cool:</code></li>\n<li>🆓 <code>:free:</code></li>\n<li>🆖 <code>:ng:</code></li>\n<li>🎦 <code>:cinema:</code></li>\n<li>🈁 <code>:koko:</code></li>\n<li>📶 <code>:signal_strength:</code></li>\n<li>🈂️ <code>:sa:</code></li>\n<li>🚻 <code>:restroom:</code></li>\n<li>🚹 <code>:mens:</code></li>\n<li>🚺 <code>:womens:</code></li>\n<li>🚼 <code>:baby_symbol:</code></li>\n<li>🚭 <code>:no_smoking:</code></li>\n<li>🅿️ <code>:parking:</code></li>\n<li>♿ <code>:wheelchair:</code></li>\n<li>🚇 <code>:metro:</code></li>\n<li>🛄 <code>:baggage_claim:</code></li>\n<li>🉑 <code>:accept:</code></li>\n<li>🚾 <code>:wc:</code></li>\n<li>🚰 <code>:potable_water:</code></li>\n<li>🚮 <code>:put_litter_in_its_place:</code></li>\n<li>㊙️ <code>:secret:</code></li>\n<li>㊗️ <code>:congratulations:</code></li>\n<li>Ⓜ️ <code>:m:</code></li>\n<li>🛂 <code>:passport_control:</code></li>\n<li>🛅 <code>:left_luggage:</code></li>\n<li>🛃 <code>:customs:</code></li>\n<li>🉐 <code>:ideograph_advantage:</code></li>\n<li>🆑 <code>:cl:</code></li>\n<li>🆘 <code>:sos:</code></li>\n<li>🆔 <code>:id:</code></li>\n<li>🚫 <code>:no_entry_sign:</code></li>\n<li>🔞 <code>:underage:</code></li>\n<li>📵 <code>:no_mobile_phones:</code></li>\n<li>🚯 <code>:do_not_litter:</code></li>\n<li>🚱 <code>:non-potable_water:</code></li>\n<li>🚳 <code>:no_bicycles:</code></li>\n<li>🚷 <code>:no_pedestrians:</code></li>\n<li>🚸 <code>:children_crossing:</code></li>\n<li>⛔ <code>:no_entry:</code></li>\n<li>✳️ <code>:eight_spoked_asterisk:</code></li>\n<li>❇️ <code>:sparkle:</code></li>\n<li>✴️ <code>:eight_pointed_black_star:</code></li>\n<li>💟 <code>:heart_decoration:</code></li>\n<li>🆚 <code>:vs:</code></li>\n<li>📳 <code>:vibration_mode:</code></li>\n<li>📴 <code>:mobile_phone_off:</code></li>\n<li>💹 <code>:chart:</code></li>\n<li>💱 <code>:currency_exchange:</code></li>\n<li>♈ <code>:aries:</code></li>\n<li>♉ <code>:taurus:</code></li>\n<li>♊ <code>:gemini:</code></li>\n<li>♋ <code>:cancer:</code></li>\n<li>♌ <code>:leo:</code></li>\n<li>♍ <code>:virgo:</code></li>\n<li>♎ <code>:libra:</code></li>\n<li>♏ <code>:scorpius:</code></li>\n<li>♐ <code>:sagittarius:</code></li>\n<li>♑ <code>:capricorn:</code></li>\n<li>♒ <code>:aquarius:</code></li>\n<li>♓ <code>:pisces:</code></li>\n<li>⛎ <code>:ophiuchus:</code></li>\n<li>🔯 <code>:six_pointed_star:</code></li>\n<li>❎ <code>:negative_squared_cross_mark:</code></li>\n<li>🅰️ <code>:a:</code></li>\n<li>🅱️ <code>:b:</code></li>\n<li>🆎 <code>:ab:</code></li>\n<li>🅾️ <code>:o2:</code></li>\n<li>💠 <code>:diamond_shape_with_a_dot_inside:</code></li>\n<li>♻️ <code>:recycle:</code></li>\n<li>🔚 <code>:end:</code></li>\n<li>🔙 <code>:back:</code></li>\n<li>🔛 <code>:on:</code></li>\n<li>🔜 <code>:soon:</code></li>\n<li>🕐 <code>:clock1:</code></li>\n<li>🕜 <code>:clock130:</code></li>\n<li>🕙 <code>:clock10:</code></li>\n<li>🕥 <code>:clock1030:</code></li>\n<li>🕚 <code>:clock11:</code></li>\n<li>🕦 <code>:clock1130:</code></li>\n<li>🕛 <code>:clock12:</code></li>\n<li>🕧 <code>:clock1230:</code></li>\n<li>🕑 <code>:clock2:</code></li>\n<li>🕝 <code>:clock230:</code></li>\n<li>🕒 <code>:clock3:</code></li>\n<li>🕞 <code>:clock330:</code></li>\n<li>🕓 <code>:clock4:</code></li>\n<li>🕟 <code>:clock430:</code></li>\n<li>🕔 <code>:clock5:</code></li>\n<li>🕠 <code>:clock530:</code></li>\n<li>🕕 <code>:clock6:</code></li>\n<li>🕡 <code>:clock630:</code></li>\n<li>🕖 <code>:clock7:</code></li>\n<li>🕢 <code>:clock730:</code></li>\n<li>🕗 <code>:clock8:</code></li>\n<li>🕣 <code>:clock830:</code></li>\n<li>🕘 <code>:clock9:</code></li>\n<li>🕤 <code>:clock930:</code></li>\n<li>💲 <code>:heavy_dollar_sign:</code></li>\n<li>©️ <code>:copyright:</code></li>\n<li>®️ <code>:registered:</code></li>\n<li>™️ <code>:tm:</code></li>\n<li>❌ <code>:x:</code></li>\n<li>❗ <code>:heavy_exclamation_mark:</code></li>\n<li>‼️ <code>:bangbang:</code></li>\n<li>⁉️ <code>:interrobang:</code></li>\n<li>⭕ <code>:o:</code></li>\n<li>✖️ <code>:heavy_multiplication_x:</code></li>\n<li>➕ <code>:heavy_plus_sign:</code></li>\n<li>➖ <code>:heavy_minus_sign:</code></li>\n<li>➗ <code>:heavy_division_sign:</code></li>\n<li>💮 <code>:white_flower:</code></li>\n<li>💯 <code>:100:</code></li>\n<li>✔️ <code>:heavy_check_mark:</code></li>\n<li>☑️ <code>:ballot_box_with_check:</code></li>\n<li>🔘 <code>:radio_button:</code></li>\n<li>🔗 <code>:link:</code></li>\n<li>➰ <code>:curly_loop:</code></li>\n<li>〰️ <code>:wavy_dash:</code></li>\n<li>〽️ <code>:part_alternation_mark:</code></li>\n<li>🔱 <code>:trident:</code></li>\n<li>▪️ <code>:black_small_square:</code></li>\n<li>▫️ <code>:white_small_square:</code></li>\n<li>◾ <code>:black_medium_small_square:</code></li>\n<li>◽ <code>:white_medium_small_square:</code></li>\n<li>◼️ <code>:black_medium_square:</code></li>\n<li>◻️ <code>:white_medium_square:</code></li>\n<li>⬛ <code>:black_large_square:</code></li>\n<li>⬜ <code>:white_large_square:</code></li>\n<li>✅ <code>:white_check_mark:</code></li>\n<li>🔲 <code>:black_square_button:</code></li>\n<li>🔳 <code>:white_square_button:</code></li>\n<li>⚫ <code>:black_circle:</code></li>\n<li>⚪ <code>:white_circle:</code></li>\n<li>🔴 <code>:red_circle:</code></li>\n<li>🔵 <code>:large_blue_circle:</code></li>\n<li>🔷 <code>:large_blue_diamond:</code></li>\n<li>🔶 <code>:large_orange_diamond:</code></li>\n<li>🔹 <code>:small_blue_diamond:</code></li>\n<li>🔸 <code>:small_orange_diamond:</code></li>\n<li>🔺 <code>:small_red_triangle:</code></li>\n<li>🔻 <code>:small_red_triangle_down:</code></li>\n</ul>",r:{minutes:1.31,words:394},y:"a",t:"符号 Emoji",i:"circle-right"}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/1-CommonUI.html",{loader:()=>s.e(7113).then(s.bind(s,32181)),meta:{d:1701200797e3,c:["unreal"],e:"<h3>插件概述</h3>\n<p>common UI 的设计目的是解决重叠UI的交互问题，并在不同平台上提供统一的用户界面，以确保游戏在各种环境下都能够提供良好的用户体验。</p>\n<h3>插件特色</h3>\n<ol>\n<li>重叠UI的交互限制：通过使用common UI，可以确保在上层菜单存在时，阻止玩家与背景UI进行互动。这是通过在上层菜单上设置遮罩或拦截事件的方式实现的，从而保证了游戏界面的交互性和用户体验。</li>\n<li>多平台适用性：common UI 被设计为适用于不同平台和控制器，包括PC和主机。它能够响应不同的输入方式，例如在PC上通过光标点击，而在主机上通过控制方向和按钮点击。通过将这些输入事件抽象化，common UI 可以使游戏在不同平台上都能够提供一致的用户交互体验。</li>\n</ol>",r:{minutes:.97,words:291},y:"a",t:"CUI1.模块介绍",O:1}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/1-editortoolPlugin.html",{loader:()=>s.e(9214).then(s.bind(s,95499)),meta:{d:1701724009e3,c:["unreal"],e:"<h2>闲聊</h2>\n\n\n\n\n<figure><figcaption></figcaption></figure>\n\n\n\n\n<h2>新建插件开始</h2>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n<blockquote>\n<p>等待IED编译后点击窗口-就能看到你创建的插件了</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>",r:{minutes:10.34,words:3101},y:"a",t:"Slate1.编辑器工具插件TODO",O:1}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/1-editortoolBP.html",{loader:()=>s.e(4723).then(s.bind(s,91124)),meta:{d:1701724009e3,c:["unreal"],e:'\n\n\n\n\n\n<figure><figcaption></figcaption></figure>\n\n\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p><a href="https://docs.unrealengine.com/5.1/zh-CN/scripted-actions-in-unreal-engine/" target="_blank" rel="noopener noreferrer">摘自官方文档</a></p>\n</blockquote>\n<ol>\n<li>决定是在 内容浏览器 中选择的资产上，还是在 关卡视口 或 世界大纲视图 中选择的Actor上执行脚本化操作。</li>\n</ol>',r:{minutes:3.18,words:954},y:"a",t:"Umg1.编辑器工具蓝图|控件",O:1}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/2-editortoolBP2.html",{loader:()=>s.e(6264).then(s.bind(s,82060)),meta:{d:1701724009e3,c:["unreal"],e:"<figure><figcaption>本章概要</figcaption></figure>\n\n\n<h3>编辑器工具控件</h3>\n\n<figure><figcaption>咱做的</figcaption></figure>\n<figure><figcaption>官方的</figcaption></figure>\n\n<h2>DetailsView</h2>\n\n<figure><figcaption></figcaption></figure>\n\n\n\n<figure><figcaption></figcaption></figure>\n\n\n\n<figure><figcaption></figcaption></figure>",r:{minutes:5.2,words:1561},y:"a",t:"Umg2.编辑器工具控件样式DetailsView",O:2}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/NameSlot.html",{loader:()=>s.e(8563).then(s.bind(s,91454)),meta:{d:1701724009e3,c:["unreal"],e:"<h2>导读</h2>\n\n<h2>实现目标</h2>\n",r:{minutes:.78,words:235},y:"a",t:"Umg3.NameSlot",O:3}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/RichTextBlock.html",{loader:()=>s.e(5832).then(s.bind(s,50195)),meta:{d:1723363984e3,e:"<h2>导读</h2>\n\n<h2>问题</h2>\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n\n\n<h2>多格式文本块|RichTextBlock</h2>\n\n<blockquote>\n<p>UMG RichTextBlock 提供了一种更为灵活的文本块。它支持标记样式更改、内联图像、超链接等功能。</p>\n</blockquote>\n<ol>\n<li><strong>创建富文本样式表</strong>：</li>\n</ol>\n<figure><figcaption></figcaption></figure>",r:{minutes:1.51,words:453},y:"a",t:"Umg5.RichTextBlock",O:5}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/SafeZone.html",{loader:()=>s.e(3983).then(s.bind(s,36167)),meta:{d:17059468e5,c:["unreal"],e:'<h2>导读</h2>\n\n<figure><figcaption></figcaption></figure>\n<h2>参考链接</h2>\n<p><a href="https://docs.unrealengine.com/4.26/zh-CN/InteractiveExperiences/UMG/UserGuide/UMGSafeZones/" target="_blank" rel="noopener noreferrer">官网</a></p>\n',r:{minutes:.28,words:83},y:"a",t:"Umg4.SaveZone",O:4}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html",{loader:()=>s.e(3394).then(s.bind(s,36776)),meta:{d:170073813e4,c:["c++"],e:"<h2>inside指针</h2>\n<h3>纲要</h3>\n<ol>\n<li>\n<p><strong>指针基础：</strong></p>\n<ul>\n<li>指针和数组</li>\n<li>指针和结构体</li>\n<li>指针和函数</li>\n<li>指针和枚举</li>\n<li>指针和类\n<ul>\n<li>this指针</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>智能指针：</strong></p>\n<ul>\n<li><code>std::shared_ptr</code>、<code>std::unique_ptr</code> 和 <code>std::weak_ptr</code> 的概念和使用。</li>\n<li>智能指针的底层实现和引用计数机制。</li>\n<li>智能指针的优势和使用场景。</li>\n</ul>\n</li>\n<li>\n<p><strong>内存管理和RAII：</strong></p>\n<ul>\n<li>资源获取即初始化（Resource Acquisition Is Initialization，RAII）的概念。</li>\n<li>使用智能指针进行资源管理。</li>\n<li>自定义智能指针。</li>\n</ul>\n</li>\n<li>\n<p><strong>指针和多线程：</strong></p>\n<ul>\n<li>多线程环境下的指针操作。</li>\n<li>指针和线程安全的数据结构。</li>\n</ul>\n</li>\n<li>\n<p><strong>指针和性能：</strong></p>\n<ul>\n<li>指针操作对性能的影响。</li>\n<li>避免指针操作的常见技巧。</li>\n</ul>\n</li>\n<li>\n<p><strong>深入理解内存模型：</strong></p>\n<ul>\n<li>栈内存和堆内存的概念。</li>\n<li>内存布局和对齐。</li>\n<li>内存模型和内存屏障。</li>\n</ul>\n</li>\n</ol>",r:{minutes:.76,words:229},y:"a",t:"c++inside指针纲要",O:1}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/1-insidePtr.html",{loader:()=>s.e(7554).then(s.bind(s,89569)),meta:{d:170073813e4,c:["c++"],e:'<h2>inside指针</h2>\n\n\n<h2>概念</h2>\n<p>语法：type* var_name;</p>\n<figure><figcaption></figcaption></figure>\n<ol>\n<li><strong>指针是个存储地址的变量：</strong></li>\n</ol>\n<p>指针是一种特殊类型的变量，它存储的是内存地址，这个地址指向存储器中的某个数据。</p>\n<ol start="2">\n<li>\n<p><strong>指针有两大能力：</strong></p>\n<ul>\n<li><strong>指针有修改指向（某个变量）的值的能力：</strong>\n通过指针，你可以访问和修改所指向内存地址上的数据。例如，如果有一个指向整数的指针，你可以通过解引用操作符 <code>*</code> 来获取或修改该整数的值。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span>\n<span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 修改了ptr指向的地址上的值，即修改了num的值</span>\n</code></pre></div><ul>\n<li><strong>指针是个变量有修改本身指向地址的能力：</strong>\n你可以改变指针本身存储的地址，使其指向不同的内存位置。这是通过给指针赋予一个新的地址来实现的。</li>\n</ul>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num1<span class="token punctuation">;</span>  <span class="token comment">// ptr指向num1的地址</span>\nptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num2<span class="token punctuation">;</span>       <span class="token comment">// 修改了ptr本身存储的地址，使其指向num2的地址</span>\n</code></pre></div></li>\n</ol>',r:{minutes:2.58,words:775},y:"a",t:"c++指针是什么？",O:2}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html",{loader:()=>s.e(3369).then(s.bind(s,33602)),meta:{d:170073813e4,c:["c++"],e:"\n\n\n<figure><figcaption></figcaption></figure>\n\n<figure><figcaption></figcaption></figure>\n<h2><code>const</code> 修饰指针</h2>\n<h4>底层 const（Low-level const）:常量指针</h4>\n<ol>\n<li><code>const int* p</code>: 这表示 <code>p</code> 是一个指向常量整数的指针。这意味着通过指针 <code>p</code> 可以访问整数，但不能通过 <code>p</code> 修改所指向的整数的值。</li>\n</ol>",r:{minutes:2.23,words:669},y:"a",t:"c++常量指针|指针常量",O:3}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html",{loader:()=>s.e(864).then(s.bind(s,66071)),meta:{d:170073813e4,c:["c++"],e:"\n<h2>概念</h2>\n<h2>指针数组</h2>\n\n\n\n<figure><figcaption></figcaption></figure>\n\n<blockquote>\n<p>UE中一堆<code>对象指针</code>组成的<code>数组</code>就是<code>指针数组</code>例如：TArray&lt;ACameraActor*&gt;Camera。（多直观易懂）</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<blockquote>\n<p><strong>语法：<code>typename* ArrayName[arraySize]</code>;</strong></p>\n</blockquote>",r:{minutes:5.03,words:1509},y:"a",t:"c++数组指针|指针数组",O:4}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html",{loader:()=>s.e(4771).then(s.bind(s,7861)),meta:{d:1701100984e3,c:["c++"],e:"\n\n<blockquote>\n<p>语法：struct 结构体名称 { 成员列表 };</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h2>结构体指针</h2>\n\n<blockquote>\n<p>语法： struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</p>\n</blockquote>\n<figure><figcaption></figcaption></figure>\n<h3>结构体指针定义方法</h3>\n<hr>\n<h4><strong>1. struct 结构体名称 * 指针变量名 = &amp; 结构体对象;</strong></h4>",r:{minutes:3.58,words:1073},y:"a",t:"c++结构体指针|类指针",O:5}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html",{loader:()=>s.e(3766).then(s.bind(s,63427)),meta:{d:1701100984e3,c:["c++"],e:'\n\n\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">enum</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>\n    RED<span class="token punctuation">,</span>\n    GREEN<span class="token punctuation">,</span>\n    BLUE\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    Color myColor <span class="token operator">=</span> GREEN<span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用指向枚举变量的指针</span>\n    Color<span class="token operator">*</span> pColor <span class="token operator">=</span> <span class="token operator">&amp;</span>myColor<span class="token punctuation">;</span>\n\n    <span class="token comment">// 输出枚举值</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Current color: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>pColor <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',r:{minutes:1.04,words:313},y:"a",t:"c++枚举指针?",O:5}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/6-Ptr-Function.html",{loader:()=>s.e(4956).then(s.bind(s,327)),meta:{d:1701724009e3,c:["c++"],e:'\n\n<figure><figcaption>C Primer Plus（第6版）中文版</figcaption></figure>\n<h3>函数指针的语法</h3>\n<ol>\n<li>\n<p><strong>声明函数指针：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">returnType</span> <span class="token punctuation">(</span><span class="token operator">*</span>pointerName<span class="token punctuation">)</span><span class="token punctuation">(</span>parameterType1<span class="token punctuation">,</span> parameterType2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这里：</p>\n<ul>\n<li><code>returnType</code> 是函数返回类型。</li>\n<li><code>pointerName</code> 是函数指针的名称。</li>\n<li><code>parameterType1, parameterType2, ...</code> 是函数参数类型。</li>\n</ul>\n</li>\n<li>\n<p><strong>初始化函数指针：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>pointerName <span class="token operator">=</span> <span class="token operator">&amp;</span>functionName<span class="token punctuation">;</span>\n<span class="token comment">// 或者简写为</span>\npointerName <span class="token operator">=</span> functionName<span class="token punctuation">;</span>\n</code></pre></div><p><code>functionName</code> 是一个已经声明的函数，其返回类型和参数类型要与函数指针声明中的类型匹配。</p>\n</li>\n<li>\n<p><strong>使用函数指针调用函数：</strong></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>returnType result <span class="token operator">=</span> <span class="token function">pointerName</span><span class="token punctuation">(</span>argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//或者</span>\nreturnType result <span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>pointerName<span class="token punctuation">)</span><span class="token punctuation">(</span>argument1<span class="token punctuation">,</span> argument2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>这里的 <code>argument1, argument2, ...</code> 是传递给函数的实际参数。</p>\n</li>\n<li>\n<p><strong>函数地址：</strong>\n函数指针地址很简单，就是函数名<code>**去掉()**</code></p>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//获取函数地址</span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\nstd<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Address of add: "</span> <span class="token operator">&lt;&lt;</span> add <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n<span class="token comment">//Address of add: 00007FF65AC81474</span>\n</code></pre></div></li>\n<li>\n<p><strong>函数指针地址：</strong></p>\n</li>\n</ol>',r:{minutes:1.38,words:413},y:"a",t:"c++函数指针",O:6}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/7-Ptr-this.html",{loader:()=>s.e(4689).then(s.bind(s,30356)),meta:{d:1701724009e3,c:["c++"],e:'\n\n\n\n<ol>\n<li><strong>区分同名变量：</strong> 如果成员函数中存在与成员变量同名的局部变量或参数，那么在没有 <code>this</code> 指针的情况下，无法直接访问成员变量。<code>this</code> 指针允许明确指定使用对象的成员。</li>\n</ol>\n<div class="language-cpp" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 使用this指针</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClassWithThis</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">int</span> value<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用this指针区分成员变量和局部变量</span>\n        <span class="token keyword">this</span><span class="token operator">-&gt;</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',r:{minutes:5.83,words:1750},y:"a",t:"c++this指针",O:7}}],["/404.html",{loader:()=>s.e(7490).then(s.bind(s,54510)),meta:{y:"p",t:""}}],["/algorithm/sort_%E6%8E%92%E5%BA%8F_/",{loader:()=>s.e(4470).then(s.bind(s,18110)),meta:{y:"p",t:"Sort 排序"}}],["/language/",{loader:()=>s.e(4470).then(s.bind(s,54725)),meta:{y:"p",t:"Language"}}],["/tools/",{loader:()=>s.e(4470).then(s.bind(s,39261)),meta:{y:"p",t:"Tools"}}],["/unreal/core_%E6%A0%B8%E5%BF%83_/",{loader:()=>s.e(4470).then(s.bind(s,19554)),meta:{y:"p",t:"Core 核心"}}],["/unreal/error_%E9%94%99%E8%AF%AF_/",{loader:()=>s.e(4470).then(s.bind(s,50566)),meta:{y:"p",t:"Error 错误"}}],["/unreal/exp_%E7%BB%8F%E9%AA%8C_/",{loader:()=>s.e(4470).then(s.bind(s,50489)),meta:{y:"p",t:"Exp 经验"}}],["/unreal/function_%E5%87%BD%E6%95%B0_/",{loader:()=>s.e(4470).then(s.bind(s,94481)),meta:{y:"p",t:"Function 函数"}}],["/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/",{loader:()=>s.e(4470).then(s.bind(s,32909)),meta:{y:"p",t:"Hotfix 热更新"}}],["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/",{loader:()=>s.e(4470).then(s.bind(s,31286)),meta:{y:"p",t:"Lyra 天秤座"}}],["/unreal/master_%E5%85%A5%E9%AD%94_/",{loader:()=>s.e(4470).then(s.bind(s,43487)),meta:{y:"p",t:"Master 入魔"}}],["/unreal/network_%E7%BD%91%E7%BB%9C_/",{loader:()=>s.e(4470).then(s.bind(s,79897)),meta:{y:"p",t:"Network 网络"}}],["/unreal/plugins_%E6%8F%92%E4%BB%B6_/",{loader:()=>s.e(4470).then(s.bind(s,24584)),meta:{y:"p",t:"Plugins 插件"}}],["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/",{loader:()=>s.e(4470).then(s.bind(s,92359)),meta:{y:"p",t:"Shader 着色器"}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/",{loader:()=>s.e(4470).then(s.bind(s,69991)),meta:{y:"p",t:"Base Guide 基础概念"}}],["/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/",{loader:()=>s.e(4470).then(s.bind(s,93330)),meta:{y:"p",t:"Designer 设计模式"}}],["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/",{loader:()=>s.e(4470).then(s.bind(s,64721)),meta:{y:"p",t:"Keywords 关键字"}}],["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/",{loader:()=>s.e(4470).then(s.bind(s,18818)),meta:{y:"p",t:"New 新特性"}}],["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/",{loader:()=>s.e(4470).then(s.bind(s,94045)),meta:{y:"p",t:"Stl 标准模板"}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/",{loader:()=>s.e(4470).then(s.bind(s,28012)),meta:{y:"p",t:"Commonui Ui框架"}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/",{loader:()=>s.e(4470).then(s.bind(s,56443)),meta:{y:"p",t:"Ui 界面"}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/",{loader:()=>s.e(4470).then(s.bind(s,5393)),meta:{y:"p",t:"Slate Ui框架"}}],["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/",{loader:()=>s.e(4470).then(s.bind(s,84432)),meta:{y:"p",t:"Umg Ui框架"}}],["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/",{loader:()=>s.e(4470).then(s.bind(s,45322)),meta:{y:"p",t:"Ptr 指针"}}],["/category/",{loader:()=>s.e(4470).then(s.bind(s,70905)),meta:{y:"p",t:"分类",I:!1}}],["/category/algorithm/",{loader:()=>s.e(4470).then(s.bind(s,14239)),meta:{y:"p",t:"algorithm 分类",I:!1}}],["/category/unreal/",{loader:()=>s.e(4470).then(s.bind(s,44134)),meta:{y:"p",t:"unreal 分类",I:!1}}],["/category/c__/",{loader:()=>s.e(4470).then(s.bind(s,22052)),meta:{y:"p",t:"c++ 分类",I:!1}}],["/category/java/",{loader:()=>s.e(4470).then(s.bind(s,96955)),meta:{y:"p",t:"java 分类",I:!1}}],["/category/lua/",{loader:()=>s.e(4470).then(s.bind(s,70217)),meta:{y:"p",t:"lua 分类",I:!1}}],["/category/markdown/",{loader:()=>s.e(4470).then(s.bind(s,93336)),meta:{y:"p",t:"Markdown 分类",I:!1}}],["/category/git/",{loader:()=>s.e(4470).then(s.bind(s,60137)),meta:{y:"p",t:"Git 分类",I:!1}}],["/category/github/",{loader:()=>s.e(4470).then(s.bind(s,5352)),meta:{y:"p",t:"Github 分类",I:!1}}],["/category/idea/",{loader:()=>s.e(4470).then(s.bind(s,48458)),meta:{y:"p",t:"IDEA 分类",I:!1}}],["/category/rider/",{loader:()=>s.e(4470).then(s.bind(s,59324)),meta:{y:"p",t:"rider 分类",I:!1}}],["/category/visualstudio/",{loader:()=>s.e(4470).then(s.bind(s,44826)),meta:{y:"p",t:"visualstudio 分类",I:!1}}],["/category/visualstudio/",{loader:()=>s.e(4470).then(s.bind(s,44826)),meta:{y:"p",t:"visualStudio 分类",I:!1}}],["/category/vscode/",{loader:()=>s.e(4470).then(s.bind(s,92445)),meta:{y:"p",t:"vscode 分类",I:!1}}],["/category/vuepress/",{loader:()=>s.e(4470).then(s.bind(s,25935)),meta:{y:"p",t:"vuepress 分类",I:!1}}],["/category/vue/",{loader:()=>s.e(4470).then(s.bind(s,393)),meta:{y:"p",t:"vue 分类",I:!1}}],["/category/u__/",{loader:()=>s.e(4470).then(s.bind(s,30009)),meta:{y:"p",t:"u++ 分类",I:!1}}],["/tag/",{loader:()=>s.e(4470).then(s.bind(s,14103)),meta:{y:"p",t:"标签",I:!1}}],["/tag/unreal/",{loader:()=>s.e(4470).then(s.bind(s,75592)),meta:{y:"p",t:"标签: unreal",I:!1}}],["/tag/%E4%BB%8B%E7%BB%8D/",{loader:()=>s.e(4470).then(s.bind(s,72992)),meta:{y:"p",t:"标签: 介绍",I:!1}}],["/tag/c__/",{loader:()=>s.e(4470).then(s.bind(s,15321)),meta:{y:"p",t:"标签: c++",I:!1}}],["/tag/java/",{loader:()=>s.e(4470).then(s.bind(s,21320)),meta:{y:"p",t:"标签: java",I:!1}}],["/tag/lua/",{loader:()=>s.e(4470).then(s.bind(s,50169)),meta:{y:"p",t:"标签: lua",I:!1}}],["/tag/markdown/",{loader:()=>s.e(4470).then(s.bind(s,77301)),meta:{y:"p",t:"标签: Markdown",I:!1}}],["/tag/%E7%A4%BA%E4%BE%8B/",{loader:()=>s.e(4470).then(s.bind(s,92955)),meta:{y:"p",t:"标签: 示例",I:!1}}],["/tag/husky/",{loader:()=>s.e(4470).then(s.bind(s,90672)),meta:{y:"p",t:"标签: husky",I:!1}}],["/tag/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/",{loader:()=>s.e(4470).then(s.bind(s,51153)),meta:{y:"p",t:"标签: 踩坑记录",I:!1}}],["/tag/git/",{loader:()=>s.e(4470).then(s.bind(s,49516)),meta:{y:"p",t:"标签: Git",I:!1}}],["/tag/github/",{loader:()=>s.e(4470).then(s.bind(s,21384)),meta:{y:"p",t:"标签: Github",I:!1}}],["/tag/rider/",{loader:()=>s.e(4470).then(s.bind(s,7872)),meta:{y:"p",t:"标签: rider",I:!1}}],["/tag/visualstudio/",{loader:()=>s.e(4470).then(s.bind(s,19155)),meta:{y:"p",t:"标签: visualStudio",I:!1}}],["/tag/vscode/",{loader:()=>s.e(4470).then(s.bind(s,99555)),meta:{y:"p",t:"标签: VSCode",I:!1}}],["/tag/vuepress/",{loader:()=>s.e(4470).then(s.bind(s,30054)),meta:{y:"p",t:"标签: VuePress",I:!1}}],["/tag/specifiers/",{loader:()=>s.e(4470).then(s.bind(s,23786)),meta:{y:"p",t:"标签: Specifiers",I:!1}}],["/tag/emoji/",{loader:()=>s.e(4470).then(s.bind(s,59957)),meta:{y:"p",t:"标签: Emoji",I:!1}}],["/article/",{loader:()=>s.e(4470).then(s.bind(s,59574)),meta:{y:"p",t:"文章",I:!1}}],["/star/",{loader:()=>s.e(4470).then(s.bind(s,83639)),meta:{y:"p",t:"星标",I:!1}}],["/timeline/",{loader:()=>s.e(4470).then(s.bind(s,13931)),meta:{y:"p",t:"时间轴",I:!1}}]])},58761:(n,a,s)=>{s.d(a,{U:()=>t});const t=JSON.parse('{"base":"/RenderDoc/","lang":"zh-CN","title":"RenderDoc","description":"斯高和的文档","head":[["link",{"rel":"icon","href":"/RenderDoc/favicon.ico"}],["link",{"rel":"icon","href":"/RenderDoc/assets/icon/chrome-mask-512.png","type":"image/png","sizes":"512x512"}],["link",{"rel":"icon","href":"/RenderDoc/assets/icon/chrome-mask-192.png","type":"image/png","sizes":"192x192"}],["link",{"rel":"icon","href":"/RenderDoc/assets/icon/chrome-512.png","type":"image/png","sizes":"512x512"}],["link",{"rel":"icon","href":"/RenderDoc/assets/icon/chrome-192.png","type":"image/png","sizes":"192x192"}],["link",{"rel":"manifest","href":"/RenderDoc/manifest.webmanifest","crossorigin":"use-credentials"}],["meta",{"name":"theme-color","content":"#46bd87"}],["link",{"rel":"apple-touch-icon","href":"/RenderDoc/assets/icon/apple-icon-152.png"}],["meta",{"name":"apple-mobile-web-app-capable","content":"yes"}],["meta",{"name":"apple-mobile-web-app-status-bar-style","content":"black"}],["meta",{"name":"msapplication-TileImage","content":"/RenderDoc/assets/icon/ms-icon-144.png"}],["meta",{"name":"msapplication-TileColor","content":"#ffffff"}]],"locales":{}}')},26653:(n,a,s)=>{s.d(a,{K:()=>t});const t=JSON.parse('{"encrypt":{"config":{"/tools/github/5-autoaction.html":["$2a$10$32wDFB5.uwfWonQCMSOkHuTaCFh1DzG7LW8pLQK0pad6kyamW9nGC"]}},"darkmode":"toggle","fullscreen":true,"author":{"name":"Mr.Si","url":"https://rendertool.github.io/RenderDoc/"},"logo":"./logo.svg","repo":"RenderTool/RenderDoc","docsBranch":"master","docsDir":"src","displayFooter":true,"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/","/preface/","/unreal/",{"text":"开发语言","icon":"signs-post","prefix":"/language/","children":["markdown/","lua/","cpp/","java/"]},{"text":"开发工具","icon":"screwdriver-wrench","prefix":"/tools/","children":["git/","github/","vscode/","vuepress/","rider/","visualstudio/","idea/"]},"/algorithm/","/timeline/"],"sidebar":{"/":[{"text":"目录","prefix":"Fontend/","link":"Fontend/","children":"structure"}],"/language/":[{"text":"目录","prefix":"","link":"","children":"structure"}],"/tools/":[{"text":"目录","prefix":"","link":"","children":"structure"}],"/unreal/":[{"text":"目录","prefix":"","link":"","children":"structure"}],"/algorithm/":[{"text":"目录","prefix":"","link":"","children":"structure"}]}}}}')},38123:(n,a,s)=>{s.d(a,{v:()=>t});const t={"/Fontend/":[],"/language/":[{text:"c++",prefix:"cpp/",collapsible:!0,icon:"c",children:["",{text:"Base Guide[基础概念]",prefix:"BaseGuide_基础概念_/",collapsible:!0,children:["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/0-where%20use%20a%20semicolon.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/1-function%20Declaration_%20Definition.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/2-Variable%20Declaration_%20Definition.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-function%20brace%20initialization.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/4-VariablePassbyValue%20_%20Reference.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/5-copymode.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/7-i__and__i.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/8-operator.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/9-Big%20Four.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/10-Functor.html",{text:"Ptr[指针]",prefix:"ptr_指针_/",collapsible:!0,children:["/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/0insidePtrgy.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/1-insidePtr.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/5-Ptr-Enum.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/4-Ptr-Struct.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/6-Ptr-Function.html","/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/7-Ptr-this.html"]}]},{text:"Designer[设计模式]",prefix:"designer_设计模式_/",collapsible:!0,children:["/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html","/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html","/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/3-FactoryPattern.html"]},{text:"Keywords[关键字]",prefix:"keywords_关键字_/",collapsible:!0,children:["/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/1-Keywords%20continue_%20break.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/2-Keywords%20inline.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-1-final.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/4-Modifiers-%20public-protected-private.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/5-Diamond%20Inheritance.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/7-Modifiers-Constants-Static.html","/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/8-Keywords%20sizeof.html"]},{text:"New[新特性]",prefix:"new_新特性_/",collapsible:!0,children:["/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/1-Namespace%20scope.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/2-Lvalues%20and%20Rvalues.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/4-default.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/5-union.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/6-aggregatetype.html","/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/7-for.html"]},{text:"Stl[标准模板]",prefix:"stl_标准模板_/",collapsible:!0,children:["/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/3-vector.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/4-deque.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/6-stack.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/7-queue.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/8-List.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/9-Set.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html","/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/11-Map.html"]}]},{text:"java",prefix:"java/",collapsible:!0,icon:"j",children:["","1-lombok","2-mybatis","3-swagger","4-springsecurity","5-application","6-srpingvalidation","7-JWT","8-Redis"]},{text:"lua",prefix:"lua/",collapsible:!0,icon:"l",children:[""]},{text:"Markdown",prefix:"markdown/",collapsible:!0,icon:"fab fa-markdown",children:["","demo",{text:"Emoji 列表",prefix:"emoji/",collapsible:!0,icon:"face-smile",children:["","people","place","object","symbol","nature"]}]}],"/tools/":[{text:"visual Studio",prefix:"visualstudio/",collapsible:!0,icon:"code",children:["","1-classtool"]},{text:"VSCode",prefix:"vscode/",collapsible:!0,icon:"code",children:["","1-errors","2-fix-todo-highlight-links"]},{text:"VuePress",prefix:"vuepress/",collapsible:!0,icon:"fab fa-vuejs",children:["","vue","vuepress-add-comp"]},{text:"Rider",prefix:"rider/",collapsible:!0,icon:"r",children:["","1-errors","2-poddoc","3-npm"]},{text:"IDEA",prefix:"idea/",collapsible:!0,icon:"i",children:["","1-errors"]},{text:"Git",prefix:"git/",collapsible:!0,icon:"code-compare",children:["","1-gitignore","2-repo-tool","3-commit-message","4-submodule","5-path-problem","6-rebase-merge"]},{text:"Github",prefix:"github/",collapsible:!0,icon:"fab fa-github",children:["","1-download-huge-project-from-github","2-switch-multiple-github-accounts","3-sync-a-fork","4-ssh-push-failed","5-autoaction"]}],"/unreal/":["",{text:"Core[核心]",prefix:"core_核心_/",collapsible:!0,children:["/unreal/core_%E6%A0%B8%E5%BF%83_/1-Gameplay.html","/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html","/unreal/core_%E6%A0%B8%E5%BF%83_/3-Singleton.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4-Subsystem.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.1-SubsystemUse.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.2-EnhancedInput.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.3-EnhancedInput.html","/unreal/core_%E6%A0%B8%E5%BF%83_/4.4-EnhancedInput.html","/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","/unreal/core_%E6%A0%B8%E5%BF%83_/6-Delegate.html","/unreal/core_%E6%A0%B8%E5%BF%83_/6.1-DelegateUse.html","/unreal/core_%E6%A0%B8%E5%BF%83_/7-GameFeature.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8-GAS.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8.2-GASAbility.html","/unreal/core_%E6%A0%B8%E5%BF%83_/8.1-GASGE.html","/unreal/core_%E6%A0%B8%E5%BF%83_/9-Spectating.html","/unreal/core_%E6%A0%B8%E5%BF%83_/10-GameSave.html","/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html","/unreal/core_%E6%A0%B8%E5%BF%83_/11-DevelopSettings.html"]},{text:"Error[错误]",prefix:"error_错误_/",collapsible:!0,children:["/unreal/error_%E9%94%99%E8%AF%AF_/01Build%20Fail.html","/unreal/error_%E9%94%99%E8%AF%AF_/02ClassRedirects.html","/unreal/error_%E9%94%99%E8%AF%AF_/03CreateSessionError.html","/unreal/error_%E9%94%99%E8%AF%AF_/04EncodeError.html","/unreal/error_%E9%94%99%E8%AF%AF_/05GameFeatureError.html","/unreal/error_%E9%94%99%E8%AF%AF_/06Mouse.html","/unreal/error_%E9%94%99%E8%AF%AF_/07SubsystemError.html","/unreal/error_%E9%94%99%E8%AF%AF_/08TObjectPtrError.html","/unreal/error_%E9%94%99%E8%AF%AF_/09SkeletalMeshAnimError.html","/unreal/error_%E9%94%99%E8%AF%AF_/10KeepCPU.html","/unreal/error_%E9%94%99%E8%AF%AF_/11GamePadFocus.html","/unreal/error_%E9%94%99%E8%AF%AF_/12SetIsReplicated.html","/unreal/error_%E9%94%99%E8%AF%AF_/13GASGEInit.html"]},{text:"Exp[经验]",prefix:"exp_经验_/",collapsible:!0,children:["/unreal/exp_%E7%BB%8F%E9%AA%8C_/1-GoodJob.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/2-Blueprint2CPP.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/3-Blueprint2CPP-1.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/4-BPShowCVariables.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/5-EventFunctionMacro.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/6-DerivedDataCache.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/7-CameraLag.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/8-SpaceAdditive.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/9-svg.html","/unreal/exp_%E7%BB%8F%E9%AA%8C_/10-inputvector.html"]},{text:"Function[函数]",prefix:"function_函数_/",collapsible:!0,children:["/unreal/function_%E5%87%BD%E6%95%B0_/1-XXXAPI.html","/unreal/function_%E5%87%BD%E6%95%B0_/2-GENERATED_BODY.html","/unreal/function_%E5%87%BD%E6%95%B0_/3-EditorUsing.html","/unreal/function_%E5%87%BD%E6%95%B0_/4-UPARAM.html","/unreal/function_%E5%87%BD%E6%95%B0_/5-UPROPERTY.html","/unreal/function_%E5%87%BD%E6%95%B0_/6-UEnum.html","/unreal/function_%E5%87%BD%E6%95%B0_/7-UStruct.html","/unreal/function_%E5%87%BD%E6%95%B0_/8-TMap.html","/unreal/function_%E5%87%BD%E6%95%B0_/9-Iterator.html","/unreal/function_%E5%87%BD%E6%95%B0_/10-PTRINUE.html","/unreal/function_%E5%87%BD%E6%95%B0_/11-Getactorofclass.html","/unreal/function_%E5%87%BD%E6%95%B0_/12-CE_KE.html","/unreal/function_%E5%87%BD%E6%95%B0_/13-BeginPlay.html","/unreal/function_%E5%87%BD%E6%95%B0_/14-SpawnActorfromClass.html","/unreal/function_%E5%87%BD%E6%95%B0_/15-LoadAsset.html","/unreal/function_%E5%87%BD%E6%95%B0_/16-SetViewTargetWithBlend.html","/unreal/function_%E5%87%BD%E6%95%B0_/17-BlueprintImplementableEvent.html","/unreal/function_%E5%87%BD%E6%95%B0_/18-UE_LOG.html","/unreal/function_%E5%87%BD%E6%95%B0_/19-RegisterComponent.html","/unreal/function_%E5%87%BD%E6%95%B0_/20-Vector.html","/unreal/function_%E5%87%BD%E6%95%B0_/21-Spawn%20actor%20with%20dynamic%20data.html"]},{text:"Hotfix[热更新]",prefix:"hotfix_热更新_/",collapsible:!0,children:["/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/1-Architecture.html","/unreal/hotfix_%E7%83%AD%E6%9B%B4%E6%96%B0_/2-Architecture2.html"]},{text:"Lyra[天秤座]",prefix:"lyra_天秤座_/",collapsible:!0,children:["/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/1-lyra.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/2-lyraMessageBox.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/3-lyraSubtitle.html","/unreal/lyra_%E5%A4%A9%E7%A7%A4%E5%BA%A7_/4-lyraCamera.html"]},{text:"Master[入魔]",prefix:"master_入魔_/",collapsible:!0,children:["/unreal/master_%E5%85%A5%E9%AD%94_/1-InventorySystem.html"]},{text:"Network[网络]",prefix:"network_网络_/",collapsible:!0,children:["/unreal/network_%E7%BD%91%E7%BB%9C_/1-HTTP.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.1.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.2.1GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.1-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.3.2-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.4-GamePlayNetWork.html","/unreal/network_%E7%BD%91%E7%BB%9C_/2.5-GamePlayNetWork.html"]},{text:"Plugins[插件]",prefix:"plugins_插件_/",collapsible:!0,children:["/unreal/plugins_%E6%8F%92%E4%BB%B6_/1-ViewLock.html","/unreal/plugins_%E6%8F%92%E4%BB%B6_/2-HightLight.html"]},{text:"Shader[着色器]",prefix:"shader_着色器_/",collapsible:!0,children:["/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/1-HPBar.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/2-BRDF.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html","/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html"]},{text:"Ui[界面]",prefix:"ui_界面_/",collapsible:!0,children:[{text:"Commonui[ui框架]",prefix:"commonui_ui框架_/",collapsible:!0,children:["/unreal/ui_%E7%95%8C%E9%9D%A2_/commonui_ui%E6%A1%86%E6%9E%B6_/1-CommonUI.html"]},{text:"Slate[ui框架]",prefix:"slate_ui框架_/",collapsible:!0,children:["/unreal/ui_%E7%95%8C%E9%9D%A2_/slate_ui%E6%A1%86%E6%9E%B6_/1-editortoolPlugin.html"]},{text:"Umg[ui框架]",prefix:"umg_ui框架_/",collapsible:!0,children:["/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/1-editortoolBP.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/2-editortoolBP2.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/NameSlot.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/SafeZone.html","/unreal/ui_%E7%95%8C%E9%9D%A2_/umg_ui%E6%A1%86%E6%9E%B6_/RichTextBlock.html"]}]}],"/algorithm/":["","01Swap",{text:"Sort[排序]",prefix:"sort_排序_/",collapsible:!0,children:["/algorithm/sort_%E6%8E%92%E5%BA%8F_/01selectionSort1.html","/algorithm/sort_%E6%8E%92%E5%BA%8F_/02bubbleSort.html"]}]}},32878:(n,a,s)=>{s.d(a,{P:()=>t});const t={}}},n=>{n.O(0,[8986,7920],(()=>(38731,n(n.s=38731)))),n.O()}]);