"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[2822],{76181:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>E,data:()=>C});var t=a(20641);const e=a.p+"assets/img/bar.f41cc05f.png",o=(0,t.Lk)("h2",{id:"fasseteditortoolkit",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#fasseteditortoolkit"},[(0,t.Lk)("span",null,"FAssetEditorToolkit")])],-1),p=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"一个封装了“UE 编辑器中资产编辑器所需基础功能（如菜单、工具栏、面板注册、布局、命令系统）的一套可扩展基类框架”。")],-1),l=(0,t.Lk)("p",null,[(0,t.eW)("前面铺垫了这么久的"),(0,t.Lk)("code",null,"FAssetEditorToolkit"),(0,t.eW)("到底是个啥？我该怎么用呢？")],-1),i=(0,t.Lk)("p",null,"当然是为了实现一些更加高级的功能，例如 蓝图图表、材质图表等，这种往往通过节点式的连线更加直观",-1),c=(0,t.Lk)("p",null,[(0,t.eW)("还记得咱们之前定义的自定义资产的"),(0,t.Lk)("code",null,"AssetDefinitionDefault"),(0,t.eW)(" 吗？里面有一个"),(0,t.Lk)("code",null,"OpenAssets"),(0,t.eW)(" 函数")],-1),r=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token keyword">virtual</span> EAssetCommandResult <span class="token function">OpenAssets</span><span class="token punctuation">(</span><span class="token keyword">const</span> FAssetOpenArgs<span class="token operator">&amp;</span> OpenArgs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',1),d=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\nEAssetCommandResult <span class="token class-name">UAssetDefinitionDefault</span><span class="token double-colon punctuation">::</span><span class="token function">OpenAssets</span><span class="token punctuation">(</span><span class="token keyword">const</span> FAssetOpenArgs<span class="token operator">&amp;</span> OpenArgs<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetAssetOpenSupport</span><span class="token punctuation">(</span><span class="token function">FAssetOpenSupportArgs</span><span class="token punctuation">(</span>OpenArgs<span class="token punctuation">.</span>OpenMethod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IsSupported<span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token class-name">FSimpleAssetEditor</span><span class="token double-colon punctuation">::</span><span class="token function">CreateEditor</span><span class="token punctuation">(</span>EToolkitMode<span class="token double-colon punctuation">::</span>Standalone<span class="token punctuation">,</span> OpenArgs<span class="token punctuation">.</span>ToolkitHost<span class="token punctuation">,</span> OpenArgs<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">LoadObjects</span><span class="token generic class-name"><span class="token operator">&lt;</span>UObject<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> EAssetCommandResult<span class="token double-colon punctuation">::</span>Handled<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">return</span> EAssetCommandResult<span class="token double-colon punctuation">::</span>Unhandled<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>',2),u=(0,t.Lk)("p",null,[(0,t.eW)("我看了!好像是用"),(0,t.Lk)("code",null,"FSimpleAssetEditor"),(0,t.eW)(" 创建了对应的资源编辑器！这个"),(0,t.Lk)("code",null,"FSimpleAssetEditor"),(0,t.eW)("是个啥？")],-1),k=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"FSimpleAssetEditor"),(0,t.eW)("是官方帮我封装的最简单的一个资源编辑器，继承自 "),(0,t.Lk)("code",null,"FAssetEditorToolkit")],-1),v=(0,t.Fv)('<hr><h3 id="_1-fasseteditortoolkit-基础类" tabindex="-1"><a class="header-anchor" href="#_1-fasseteditortoolkit-基础类"><span>1. <code>FAssetEditorToolkit</code>（基础类）</span></a></h3><ul><li>提供<strong>资源编辑器的核心结构</strong>：ToolKit、Tab管理、菜单扩展、工具栏扩展等</li><li>支持基本的 Tab 注册、布局初始化、Undo/Redo 等编辑器通用逻辑</li><li>是所有资源编辑器的基础类，但本身不带复杂业务逻辑</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FAssetEditorToolkit</span> <span class="token operator">:</span> <span class="token keyword">public</span> FBaseToolkit<span class="token punctuation">,</span> <span class="token keyword">public</span> IAssetEditor\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="_2-fworkflowcentricapplication-工作流驱动型编辑器" tabindex="-1"><a class="header-anchor" href="#_2-fworkflowcentricapplication-工作流驱动型编辑器"><span>2. <code>FWorkflowCentricApplication</code>（工作流驱动型编辑器）</span></a></h3><blockquote><p>面向复杂的、多面板、多模式切换的编辑器（如蓝图编辑器）</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FWorkflowCentricApplication</span> <span class="token operator">:</span> <span class="token keyword">public</span> FAssetEditorToolkit\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>支持<strong>模式切换（Mode switching）</strong></li><li>比如“图表模式”、“调试模式”、“详情模式”</li><li>支持左侧的**“模式切换 Tab 面板”**</li><li>内置 <code>FApplicationMode</code> 机制，可动态定义工作流</li></ul><hr><h3 id="_3-fsimpleasseteditortoolkit-轻量级编辑器" tabindex="-1"><a class="header-anchor" href="#_3-fsimpleasseteditortoolkit-轻量级编辑器"><span>3. <code>FSimpleAssetEditorToolkit</code>（轻量级编辑器）</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FSimpleAssetEditorToolkit</span> <span class="token operator">:</span> <span class="token keyword">public</span> FAssetEditorToolkit\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>不使用复杂的 ApplicationMode 和 Tab 分布结构</strong></li><li>用于结构简单的编辑器，如只包含一个 Details 面板或 Preview 视图</li><li>通常通过创建一个简单布局，快速搭建 UI</li></ul><hr><h2 id="基础的编辑器面板" tabindex="-1"><a class="header-anchor" href="#基础的编辑器面板"><span>基础的编辑器面板</span></a></h2>',15),m=(0,t.Fv)('<figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>区域</th><th>名称</th><th>构建方式</th></tr></thead><tbody><tr><td>顶部菜单栏</td><td>Menu Bar</td><td><code>FMenuBarBuilder</code></td></tr><tr><td>工具栏</td><td>Tool Bar</td><td><code>FToolBarBuilder</code></td></tr><tr><td>主要区域</td><td>中心面板</td><td><code>FTabManager</code> + <code>DockTab</code></td></tr><tr><td>底部栏</td><td>Status Bar</td><td><code>SStatusBar</code> + <code>FStatusBarItem</code></td></tr></tbody></table><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><h3 id="_1-引入模块" tabindex="-1"><a class="header-anchor" href="#_1-引入模块"><span>1. 引入模块</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code> PublicDependencyModuleNames<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span> <span class="token keyword">new</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;UnrealEd&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-创建-fasseteditortoolkit" tabindex="-1"><a class="header-anchor" href="#_2-创建-fasseteditortoolkit"><span>2. 创建 FAssetEditorToolkit</span></a></h3>',6),b=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"FAssetEditorToolkit"),(0,t.eW)("本身是一个抽象类,并不会包含业务逻辑，习惯上我们可以再抽象一层用来实现业务接口。")],-1),g=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token comment">//抽象</span>\n<span class="token keyword">class</span>  <span class="token class-name">ISuperComboGraphBlueprintEditor</span> <span class="token operator">:</span>\n<span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">FWorkflowCentricApplication</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">//具体派生实现类</span>\n<span class="token keyword">class</span>  <span class="token class-name">FSuperComboGraphAssetsEditor</span> <span class="token operator">:</span> \n<span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISuperComboGraphBlueprintEditor</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">FGCObject</span><span class="token punctuation">,</span>\n<span class="token keyword">public</span> <span class="token class-name">FNotifyHook</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">FEditorUndoClient</span></span><span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-基础接口" tabindex="-1"><a class="header-anchor" href="#_3-基础接口"><span>3. 基础接口</span></a></h3>',2),h=(0,t.Lk)("p",null,[(0,t.Lk)("code",null,"FAssetEditorToolkit"),(0,t.eW)("官方注释上说是抽象类，那必然有一些纯虚函数接口，哪些是必须实现的？为什么必须实现呢？")],-1),y=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token comment">//返回该编辑器工具包的唯一名称（内部识别名）。</span>\n\t<span class="token keyword">virtual</span> FName <span class="token function">GetToolkitFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\t\t\t\t<span class="token comment">// Must implement in derived class!</span>\n\t\n\t<span class="token comment">//返回该工具包的显示名称（用于标签栏 / 窗口标题等 UI 中）。</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetBaseToolkitName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\t\t\t<span class="token comment">// Must implement in derived class!</span>\n\t\n\t<span class="token comment">//返回当该编辑器以 World-Centric 模式（嵌入主编辑器窗口中）打开时，Tab 标签的前缀。</span>\n\t<span class="token keyword">virtual</span> FString <span class="token function">GetWorldCentricTabPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\t<span class="token comment">// Must implement in derived class!</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),w=(0,t.Lk)("hr",null,null,-1),f=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,"World-Centric 模式")],-1),T=(0,t.Lk)("p",null,[(0,t.eW)("这里的 "),(0,t.Lk)("code",null,"World-Centric "),(0,t.eW)("模式是什么？")],-1),F=(0,t.Fv)('<table><thead><tr><th>模式</th><th>外观描述</th></tr></thead><tbody><tr><td><strong>World-Centric</strong></td><td>编辑器嵌入在主编辑器窗口，作为一个 Tab 显示</td></tr><tr><td><strong>Standalone</strong></td><td>编辑器作为一个新的独立窗口单独弹出</td></tr></tbody></table><hr><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;ISuperComboGraphBlueprintEditor.h&quot;</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">USuperComboGraph</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * SuperComboGraphAssetsEditor(自定义资产编辑器)\n */</span>\n<span class="token keyword">class</span>  <span class="token class-name">FSuperComboGraphAssetsEditor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">ISuperComboGraphBlueprintEditor</span><span class="token punctuation">,</span></span>\n<span class="token punctuation">{</span>\n<span class="token keyword">public</span> <span class="token operator">:</span>\n\t\n\t<span class="token function">FSuperComboGraphAssetsEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">RegisterTabSpawners</span><span class="token punctuation">(</span><span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">FTabManager</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> TabManager<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">UnregisterTabSpawners</span><span class="token punctuation">(</span><span class="token keyword">const</span> TSharedRef<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">FTabManager</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> TabManager<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">/** 初始化SuperComboGraphAssetsEditor */</span>\n\t<span class="token keyword">void</span> <span class="token function">InitSuperComboGraphAssetsEditor</span><span class="token punctuation">(</span><span class="token keyword">const</span> EToolkitMode<span class="token double-colon punctuation">::</span>Type Mode<span class="token punctuation">,</span> <span class="token keyword">const</span> TSharedPtr<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">IToolkitHost</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> InitToolkitHost<span class="token punctuation">,</span>\n\t                        USuperComboGraph<span class="token operator">*</span> ObjectToEdit<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token comment">/** IToolkit interface */</span>\n\t<span class="token keyword">virtual</span> FName <span class="token function">GetToolkitFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetBaseToolkitName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetToolkitName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FText <span class="token function">GetToolkitToolTipText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FString <span class="token function">GetWorldCentricTabPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> FLinearColor <span class="token function">GetWorldCentricTabColorScale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsPrimaryEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\t<span class="token keyword">virtual</span> <span class="token keyword">bool</span> <span class="token function">IsSimpleAssetEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\t<span class="token keyword">virtual</span> FName <span class="token function">GetEditingAssetTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">override</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>接口 / 基类</th><th>作用</th></tr></thead><tbody><tr><td><code>ISuperComboGraphBlueprintEditor</code></td><td>自定义的<strong>编辑器接口</strong>，你定义的业务抽象接口，可能继承自 <code>FAssetEditorToolkit</code> 或 <code>FWorkflowCentricApplication</code></td></tr><tr><td><code>FGCObject</code></td><td>用于<strong>GC（垃圾回收）引用保护</strong>，确保编辑器持有的 UObject（如 Graph、Asset）不被误删</td></tr><tr><td><code>FNotifyHook</code></td><td>接收 Details 面板中的变量编辑变更通知，用于响应属性修改</td></tr><tr><td><code>FEditorUndoClient</code></td><td>实现 Undo / Redo 逻辑，自动与 UE 编辑器 Undo 系统联动</td></tr></tbody></table><table><thead><tr><th>功能</th><th>说明</th></tr></thead><tbody><tr><td><strong>初始化编辑器</strong></td><td><code>InitAssetEditor()</code> 设置 App 名、布局、菜单、工具栏等</td></tr><tr><td><strong>菜单栏与工具栏的生成与扩展</strong></td><td><code>GenerateToolbar()</code>, <code>FillDefaultFileMenuCommands()</code>, <code>AddToolbarExtender()</code> 等</td></tr><tr><td><strong>Tab 注册与管理</strong></td><td><code>RegisterTabSpawners()</code>, <code>RestoreFromLayout()</code>，支持多 Tab 布局</td></tr><tr><td><strong>状态栏支持</strong></td><td><code>RegisterDrawer()</code> 注册底部的 drawer 面板</td></tr><tr><td><strong>界面自定义</strong></td><td>提供 Overlay 添加/移除、Toolbar widget 添加等函数</td></tr><tr><td><strong>拖拽事件处理</strong></td><td><code>OnViewportDrop()</code> 系列可覆盖函数</td></tr><tr><td><strong>编辑器上下文与元信息管理</strong></td><td>如标题 <code>GetToolkitName()</code>、Tooltip、编辑对象 <code>GetObjectsCurrentlyBeingEdited()</code></td></tr><tr><td><strong>工具集成支持</strong></td><td>支持 Hosting 其他 Toolkit，如 Ed Mode Toolkit（<code>OnToolkitHostingStarted()</code>）</td></tr><tr><td><strong>EditorMode 支持</strong></td><td>提供 <code>FEditorModeTools&amp; GetEditorModeManager()</code></td></tr></tbody></table>',5),A={},E=(0,a(66262).A)(A,[["render",function(s,n){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[o,p,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[l])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[i])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[(0,t.eW)(" 那我该怎么开始使用他呢? ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[c])),_:1}),r,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[(0,t.eW)(" 这个我记得，这个和我们的资源编辑器有什么关系呢？ ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 有的！兄弟有的！你可以看看他默认的实现 ")])),_:1}),d,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[u])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[k])),_:1}),v,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[(0,t.eW)(" 基础的编辑器面板一般包括哪些? ")])),_:1}),(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 为了方便你理解，BABA给你画个图。 ")])),_:1}),m,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[b])),_:1}),g,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[h])),_:1}),y,(0,t.bF)(a,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果你不实现，系统无法正确识别你的编辑器是谁、如何命名窗口、如何区分多个实例。 ")])),_:1}),w,f,(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:38},{default:(0,t.k6)((()=>[T])),_:1}),F])}]]),C=JSON.parse('{"path":"/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/08-FAssetEditorToolkit.html","title":"ED08.FAssetEditorToolkit|自定义资源编辑器","lang":"zh-CN","frontmatter":{"title":"ED08.FAssetEditorToolkit|自定义资源编辑器","order":25,"category":["u++"],"description":"FAssetEditorToolkit 一个封装了“UE 编辑器中资产编辑器所需基础功能（如菜单、工具栏、面板注册、布局、命令系统）的一套可扩展基类框架”。 1. FAssetEditorToolkit（基础类） 提供资源编辑器的核心结构：ToolKit、Tab管理、菜单扩展、工具栏扩展等 支持基本的 Tab 注册、布局初始化、Undo/Redo 等编...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/08-FAssetEditorToolkit.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"ED08.FAssetEditorToolkit|自定义资源编辑器"}],["meta",{"property":"og:description","content":"FAssetEditorToolkit 一个封装了“UE 编辑器中资产编辑器所需基础功能（如菜单、工具栏、面板注册、布局、命令系统）的一套可扩展基类框架”。 1. FAssetEditorToolkit（基础类） 提供资源编辑器的核心结构：ToolKit、Tab管理、菜单扩展、工具栏扩展等 支持基本的 Tab 注册、布局初始化、Undo/Redo 等编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-24T06:15:26.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-05-24T06:15:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ED08.FAssetEditorToolkit|自定义资源编辑器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-24T06:15:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"FAssetEditorToolkit","slug":"fasseteditortoolkit","link":"#fasseteditortoolkit","children":[{"level":3,"title":"1. FAssetEditorToolkit（基础类）","slug":"_1-fasseteditortoolkit-基础类","link":"#_1-fasseteditortoolkit-基础类","children":[]},{"level":3,"title":"2. FWorkflowCentricApplication（工作流驱动型编辑器）","slug":"_2-fworkflowcentricapplication-工作流驱动型编辑器","link":"#_2-fworkflowcentricapplication-工作流驱动型编辑器","children":[]},{"level":3,"title":"3. FSimpleAssetEditorToolkit（轻量级编辑器）","slug":"_3-fsimpleasseteditortoolkit-轻量级编辑器","link":"#_3-fsimpleasseteditortoolkit-轻量级编辑器","children":[]}]},{"level":2,"title":"基础的编辑器面板","slug":"基础的编辑器面板","link":"#基础的编辑器面板","children":[]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[{"level":3,"title":"1. 引入模块","slug":"_1-引入模块","link":"#_1-引入模块","children":[]},{"level":3,"title":"2. 创建 FAssetEditorToolkit","slug":"_2-创建-fasseteditortoolkit","link":"#_2-创建-fasseteditortoolkit","children":[]},{"level":3,"title":"3. 基础接口","slug":"_3-基础接口","link":"#_3-基础接口","children":[]}]}],"git":{"createdTime":1748067326000,"updatedTime":1748067326000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":4.69,"words":1407},"filePathRelative":"unreal/editor[编辑器]/08-FAssetEditorToolkit.md","localizedDate":"2025年5月24日","excerpt":"<h2>FAssetEditorToolkit</h2>\\n<blockquote>\\n<p>一个封装了“UE 编辑器中资产编辑器所需基础功能（如菜单、工具栏、面板注册、布局、命令系统）的一套可扩展基类框架”。</p>\\n</blockquote>\\n\\n\\n\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code>\\t<span class=\\"token keyword\\">virtual</span> EAssetCommandResult <span class=\\"token function\\">OpenAssets</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> FAssetOpenArgs<span class=\\"token operator\\">&amp;</span> OpenArgs<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">override</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);