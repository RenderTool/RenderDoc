"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6292],{23679:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>u,data:()=>r});var t=a(20641);const e=a.p+"assets/img/LazySingleton .6b24fecf.svg",p=a.p+"assets/img/EagerSingleton.3b4bbc1a.svg",o=a.p+"assets/img/Singleton Class Diagram.a8fb1a54.svg",i=(0,t.Lk)("h3",{id:"singleton-单例",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#singleton-单例"},[(0,t.Lk)("span",null,"Singleton|单例")])],-1),l=(0,t.Fv)('<h3 id="懒汉式-lazy-initialization" tabindex="-1"><a class="header-anchor" href="#懒汉式-lazy-initialization"><span>懒汉式（Lazy Initialization）</span></a></h3><ol><li><p><strong>懒汉式单例模式：</strong></p><ul><li><strong>实例创建时机：</strong> 懒汉式在第一次被调用时才创建实例，即在需要的时候才进行初始化。</li><li><strong>线程安全性：</strong> 如果不进行特殊处理，懒汉式可能在多线程环境下引发竞态条件，导致多个线程同时检测到实例为<code>nullptr</code>，然后都尝试创建实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或者其他线程安全的机制。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> LazySingleton<span class="token operator">*</span> instance<span class="token punctuation">;</span>\n    <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 私有构造函数</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> LazySingleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在cpp文件中初始化静态成员变量</span>\nLazySingleton<span class="token operator">*</span> LazySingleton<span class="token double-colon punctuation">::</span>instance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="饿汉式-eager-initialization" tabindex="-1"><a class="header-anchor" href="#饿汉式-eager-initialization"><span>饿汉式（Eager Initialization）</span></a></h3><ol start="2"><li><p><strong>饿汉式单例模式：</strong></p><ul><li><strong>实例创建时机：</strong> 饿汉式在类加载时就创建实例，即在程序启动时就进行初始化，无论是否被调用都会创建实例。</li><li><strong>线程安全性：</strong> 饿汉式天生是线程安全的，因为实例在类加载时就被创建，不存在多线程竞争的问题。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">EagerSingleton</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> EagerSingleton<span class="token operator">*</span> instance<span class="token punctuation">;</span>\n    <span class="token function">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 私有构造函数</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">static</span> EagerSingleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在cpp文件中初始化静态成员变量</span>\nEagerSingleton<span class="token operator">*</span> EagerSingleton<span class="token double-colon punctuation">::</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">EagerSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>选择懒汉式还是饿汉式取决于具体的需求和应用场景。 懒汉式可以节省资源，只有在需要时才创建实例，但需要注意线程安全性。 饿汉式在程序启动时就创建实例，确保了线程安全，但可能会增加启动时间和占用资源。</p><h3 id="双检锁单例" tabindex="-1"><a class="header-anchor" href="#双检锁单例"><span>双检锁单例</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>\n<span class="token keyword">private</span><span class="token operator">:</span>\n    <span class="token comment">// 私有构造函数，防止外部实例化</span>\n    <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n    <span class="token comment">// 静态实例指针</span>\n    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> instance<span class="token punctuation">;</span>\n\n    <span class="token comment">// 互斥锁，确保线程安全</span>\n    <span class="token keyword">static</span> std<span class="token double-colon punctuation">::</span>mutex mutex<span class="token punctuation">;</span>\n\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token comment">// 获取单例实例的静态方法</span>\n    <span class="token keyword">static</span> Singleton<span class="token operator">*</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用双重检查锁定以减少锁的竞争</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            std<span class="token double-colon punctuation">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mutex<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 初始化静态成员变量</span>\nSingleton<span class="token operator">*</span> Singleton<span class="token double-colon punctuation">::</span>instance <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>\nstd<span class="token double-colon punctuation">::</span>mutex Singleton<span class="token double-colon punctuation">::</span>mutex<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',11),c={},u=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[i,(0,t.bF)(a,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 一个类保证全局只有一个实例 ")])),_:1}),l])}]]),r=JSON.parse('{"path":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html","title":"DS1.Singleton|单例","lang":"zh-CN","frontmatter":{"title":"DS1.Singleton|单例","order":1,"category":["c++"],"description":"Singleton|单例 懒汉式（Lazy Initialization） 懒汉式单例模式： 实例创建时机： 懒汉式在第一次被调用时才创建实例，即在需要的时候才进行初始化。 线程安全性： 如果不进行特殊处理，懒汉式可能在多线程环境下引发竞态条件，导致多个线程同时检测到实例为nullptr，然后都尝试创建实例。为了解决这个问题，可以使用双重检查锁定（Do...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/1-Sington.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"DS1.Singleton|单例"}],["meta",{"property":"og:description","content":"Singleton|单例 懒汉式（Lazy Initialization） 懒汉式单例模式： 实例创建时机： 懒汉式在第一次被调用时才创建实例，即在需要的时候才进行初始化。 线程安全性： 如果不进行特殊处理，懒汉式可能在多线程环境下引发竞态条件，导致多个线程同时检测到实例为nullptr，然后都尝试创建实例。为了解决这个问题，可以使用双重检查锁定（Do..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DS1.Singleton|单例\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"Singleton|单例","slug":"singleton-单例","link":"#singleton-单例","children":[]},{"level":3,"title":"懒汉式（Lazy Initialization）","slug":"懒汉式-lazy-initialization","link":"#懒汉式-lazy-initialization","children":[]},{"level":3,"title":"饿汉式（Eager Initialization）","slug":"饿汉式-eager-initialization","link":"#饿汉式-eager-initialization","children":[]},{"level":3,"title":"小结","slug":"小结","link":"#小结","children":[]},{"level":3,"title":"双检锁单例","slug":"双检锁单例","link":"#双检锁单例","children":[]}],"git":{"createdTime":1703391495000,"updatedTime":1704233233000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":1.9,"words":569},"filePathRelative":"language/cpp/designer[设计模式]/1-Sington.md","localizedDate":"2023年12月24日","excerpt":"<h3>Singleton|单例</h3>\\n\\n<h3>懒汉式（Lazy Initialization）</h3>\\n<ol>\\n<li>\\n<p><strong>懒汉式单例模式：</strong></p>\\n<ul>\\n<li><strong>实例创建时机：</strong> 懒汉式在第一次被调用时才创建实例，即在需要的时候才进行初始化。</li>\\n<li><strong>线程安全性：</strong> 如果不进行特殊处理，懒汉式可能在多线程环境下引发竞态条件，导致多个线程同时检测到实例为<code>nullptr</code>，然后都尝试创建实例。为了解决这个问题，可以使用双重检查锁定（Double-Checked Locking）或者其他线程安全的机制。</li>\\n</ul>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">LazySingleton</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">static</span> LazySingleton<span class=\\"token operator\\">*</span> instance<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token function\\">LazySingleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>  <span class=\\"token comment\\">// 私有构造函数</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">static</span> LazySingleton<span class=\\"token operator\\">*</span> <span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>instance <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">LazySingleton</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> instance<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 在cpp文件中初始化静态成员变量</span>\\nLazySingleton<span class=\\"token operator\\">*</span> LazySingleton<span class=\\"token double-colon punctuation\\">::</span>instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">nullptr</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n</ol>","autoDesc":true}')}}]);