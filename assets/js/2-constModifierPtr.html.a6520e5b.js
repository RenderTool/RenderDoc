"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3369],{33602:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>m,data:()=>v});var e=s(20641);const t=s.p+"assets/img/ptrabs.639dc8e4.jpg",o=s.p+"assets/img/ptrconst.569444ca.jpg",p=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:t,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),c=(0,e.Lk)("p",null,[(0,e.eW)("当你用 const 修饰指针，这时候限制了"),(0,e.Lk)("code",null,"指针修改指向（某个变量）的值"),(0,e.eW)("的能力，但不妨碍你换个地址给这个指针变量啊。")],-1),i=(0,e.Fv)('<figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="const-修饰指针" tabindex="-1"><a class="header-anchor" href="#const-修饰指针"><span><code>const</code> 修饰指针</span></a></h2><h4 id="底层-const-low-level-const-常量指针" tabindex="-1"><a class="header-anchor" href="#底层-const-low-level-const-常量指针"><span>底层 const（Low-level const）:常量指针</span></a></h4><ol><li><code>const int* p</code>: 这表示 <code>p</code> 是一个指向常量整数的指针。这意味着通过指针 <code>p</code> 可以访问整数，但不能通过 <code>p</code> 修改所指向的整数的值。</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token comment">//注意这里只是为了方便演示，建议给一个初始值，避免指针错误。</span>\n    p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>\n\n    <span class="token comment">// 有效，可以通过指针读取 x 的值</span>\n    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>\n\n    <span class="token comment">//有效，修改指针指向的值的行为被const限定,不代表变量本身被限定</span>\n    x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>\n\n    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>p <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//注意看p地址上的值变化。</span>\n\n    <span class="token comment">// 有效，修改指针指向的行为没有被限定。</span>\n    p <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>\n\n    <span class="token comment">// 无效，不能通过指针修改 x 的值</span>\n    <span class="token comment">// *p = 10;  // 这将导致编译错误</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),l=(0,e.Lk)("p",null,[(0,e.eW)("搜嘎！那么反过来const相当于限制了"),(0,e.Lk)("code",null,"指针指向某个地址的能力"),(0,e.eW)(",但不妨碍我们修改指向（某个变量）的值。")],-1),r=(0,e.Fv)('<h4 id="顶层-const-top-level-const-指针常量" tabindex="-1"><a class="header-anchor" href="#顶层-const-top-level-const-指针常量"><span>顶层 const（Top-level const）:指针常量</span></a></h4><ol start="2"><li><p><code>int* const p</code>: 这表示 <code>p</code> 是一个常量指针，即指针本身是常量，不能被重新赋值指向其他地方。但是，通过这个指针可以修改所指向的整数的值。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>\n\n<span class="token comment">// 有效，可以通过指针修改 x 的值</span>\n<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 无效，不能修改指针 p 的值</span>\np <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token comment">// 这将导致编译错误</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>',2),d=(0,e.Fv)('<h4 id="_1-指针-地址-都在修饰指针-谁在前谁只读" tabindex="-1"><a class="header-anchor" href="#_1-指针-地址-都在修饰指针-谁在前谁只读"><span>1. 指针 = 地址，都在修饰指针，谁在前谁只读</span></a></h4><ul><li><p>常量指针:常量在前 = 指向的值只读。</p></li><li><p>指针常量：指针在前 = 指向的地址只读。</p></li></ul><h4 id="_2-根据英文直译中文" tabindex="-1"><a class="header-anchor" href="#_2-根据英文直译中文"><span>2. 根据英文直译中文</span></a></h4><p>常量（const）指针（<code>int* p</code>)<br> 指针（<code>int*</code>）常量（const p）</p><h3 id="举一反三" tabindex="-1"><a class="header-anchor" href="#举一反三"><span>举一反三</span></a></h3><h4 id="const即修饰指针又修饰指向的值。" tabindex="-1"><a class="header-anchor" href="#const即修饰指针又修饰指向的值。"><span>const即修饰指针又修饰指向的值。</span></a></h4><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一定牢记！只是指针的能力限定（只读）不是指向的<code>变量</code>被锁定，这里和引用一定要区分开。</p>',8),u={},m=(0,s(66262).A)(u,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("gifwithbutton");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" Baba!你不是说指针是一个存储地址的变量吗？加了const还能算变量吗？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 还记得指针的两大能力吗？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 等我翻翻笔记： ")])),_:1}),p,(0,e.bF)(s,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[c])),_:1}),i,(0,e.bF)(t,{src:"../../../../assets/unrealgif/constaptr.gif"}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,e.k6)((()=>[l])),_:1}),r,(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 很好！Baba再给你几种无脑记忆方法。 ")])),_:1}),d])}]]),v=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html","title":"c++常量指针|指针常量","lang":"zh-CN","frontmatter":{"title":"c++常量指针|指针常量","order":3,"category":["c++"],"description":"const 修饰指针 底层 const（Low-level const）:常量指针 const int* p: 这表示 p 是一个指向常量整数的指针。这意味着通过指针 p 可以访问整数，但不能通过 p 修改所指向的整数的值。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/2-constModifierPtr.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++常量指针|指针常量"}],["meta",{"property":"og:description","content":"const 修饰指针 底层 const（Low-level const）:常量指针 const int* p: 这表示 p 是一个指向常量整数的指针。这意味着通过指针 p 可以访问整数，但不能通过 p 修改所指向的整数的值。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++常量指针|指针常量\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"const 修饰指针","slug":"const-修饰指针","link":"#const-修饰指针","children":[{"level":3,"title":"举一反三","slug":"举一反三","link":"#举一反三","children":[]}]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.23,"words":669},"filePathRelative":"language/cpp/BaseGuide[基础概念]/ptr[指针]/2-constModifierPtr.md","localizedDate":"2023年11月23日","excerpt":"\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<figure><figcaption></figcaption></figure>\\n<h2><code>const</code> 修饰指针</h2>\\n<h4>底层 const（Low-level const）:常量指针</h4>\\n<ol>\\n<li><code>const int* p</code>: 这表示 <code>p</code> 是一个指向常量整数的指针。这意味着通过指针 <code>p</code> 可以访问整数，但不能通过 <code>p</code> 修改所指向的整数的值。</li>\\n</ol>","autoDesc":true}')}}]);