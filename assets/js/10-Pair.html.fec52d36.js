"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[7830],{95353:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>i});var e=a(20641);const t=(0,e.Lk)("h3",{id:"pair",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#pair"},[(0,e.Lk)("span",null,"Pair")])],-1),p=(0,e.Lk)("p",null,[(0,e.Lk)("code",null,"std::pair"),(0,e.eW)(" 是 C++ 标准库中的一个模板类，用于存储两个元素的有序对。每个有序对都包含两个公共成员："),(0,e.Lk)("code",null,"first"),(0,e.eW)(" 和 "),(0,e.Lk)("code",null,"second"),(0,e.eW)("，分别用于表示有序对的第一个和第二个元素。")],-1),o=(0,e.Fv)('<h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义：</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>\n\nstd<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">&gt;</span> myPair<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>T1</code> 和 <code>T2</code> 是有序对中元素的类型。</li></ul><h3 id="主要操作" tabindex="-1"><a class="header-anchor" href="#主要操作"><span>主要操作：</span></a></h3><ol><li><p><strong>构造函数：</strong> <code>std::pair</code> 提供多个构造函数，可以使用不同的方式创建有序对。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">myPair1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstd<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> <span class="token function">myPair2</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>成员访问：</strong> 通过 <code>first</code> 和 <code>second</code> 成员访问有序对中的元素。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> firstElement <span class="token operator">=</span> myPair1<span class="token punctuation">.</span>first<span class="token punctuation">;</span>\n<span class="token keyword">double</span> secondElement <span class="token operator">=</span> myPair1<span class="token punctuation">.</span>second<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>比较运算符：</strong> <code>std::pair</code> 提供了比较运算符，允许对有序对进行比较。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">pair1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nstd<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">pair2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>pair1 <span class="token operator">&lt;</span> pair2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// pair1 小于 pair2</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例：</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建有序对</span>\n    std<span class="token double-colon punctuation">::</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">&gt;</span> <span class="token function">myPair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 访问成员</span>\n    <span class="token keyword">int</span> firstElement <span class="token operator">=</span> myPair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>\n    <span class="token keyword">double</span> secondElement <span class="token operator">=</span> myPair<span class="token punctuation">.</span>second<span class="token punctuation">;</span>\n\n    <span class="token comment">// 输出成员</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;First: &quot;</span> <span class="token operator">&lt;&lt;</span> firstElement <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, Second: &quot;</span> <span class="token operator">&lt;&lt;</span> secondElement <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),c={},l=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[t,(0,e.bF)(a,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[p])),_:1}),o])}]]),i=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html","title":"c++10.Pair容器","lang":"zh-CN","frontmatter":{"title":"c++10.Pair容器","order":10,"category":["c++"],"description":"Pair 定义： T1 和 T2 是有序对中元素的类型。 主要操作： 构造函数： std::pair 提供多个构造函数，可以使用不同的方式创建有序对。 成员访问： 通过 first 和 second 成员访问有序对中的元素。 比较运算符： std::pair 提供了比较运算符，允许对有序对进行比较。 示例：","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/10-Pair.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++10.Pair容器"}],["meta",{"property":"og:description","content":"Pair 定义： T1 和 T2 是有序对中元素的类型。 主要操作： 构造函数： std::pair 提供多个构造函数，可以使用不同的方式创建有序对。 成员访问： 通过 first 和 second 成员访问有序对中的元素。 比较运算符： std::pair 提供了比较运算符，允许对有序对进行比较。 示例："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++10.Pair容器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"Pair","slug":"pair","link":"#pair","children":[]},{"level":3,"title":"定义：","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"主要操作：","slug":"主要操作","link":"#主要操作","children":[]},{"level":3,"title":"示例：","slug":"示例","link":"#示例","children":[]}],"git":{"createdTime":1703335047000,"updatedTime":1704233233000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":0.93,"words":278},"filePathRelative":"language/cpp/stl[标准模板]/10-Pair.md","localizedDate":"2023年12月23日","excerpt":"<h3>Pair</h3>\\n\\n<h3>定义：</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;utility&gt;</span></span>\\n\\nstd<span class=\\"token double-colon punctuation\\">::</span>pair<span class=\\"token operator\\">&lt;</span>T1<span class=\\"token punctuation\\">,</span> T2<span class=\\"token operator\\">&gt;</span> myPair<span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}')}}]);