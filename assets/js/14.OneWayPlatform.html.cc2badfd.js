"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[599],{934:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>O,data:()=>A});var t=s(20641);const e=s.p+"assets/img/mlao01.c9f8f0f1.jpg",o=s.p+"assets/img/mlao02.090a2700.png",p=s.p+"assets/img/mlao03.6196c28a.png",l=s.p+"assets/img/mlao04.29b4329a.png",c=s.p+"assets/img/mlao06.c39ed7af.png",i=s.p+"assets/img/mlao05.98db1873.png",r=(0,t.Lk)("h2",{id:"提要",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#提要"},[(0,t.Lk)("span",null,"提要")])],-1),u=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),k=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),d=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),v=(0,t.Fv)('<h3 id="响应通道-collision-response-channels" tabindex="-1"><a class="header-anchor" href="#响应通道-collision-response-channels"><span>响应通道（Collision Response Channels）</span></a></h3><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><hr><blockquote><p>UE 的碰撞系统由三部分组成：</p></blockquote><ol><li><p><strong>碰撞通道（Collision Channel）</strong></p><ul><li><p>用于标记对象所属类型。</p></li><li><p>UE 内置两种类型：</p><ul><li><strong>Object Channels（对象通道）</strong>：标记对象类别，比如 <code>Pawn</code>、<code>WorldStatic</code>、<code>WorldDynamic</code>。</li><li><strong>Trace Channels（射线通道）</strong>：用于射线/扫描（LineTrace、SphereTrace）检测。</li></ul></li></ul></li></ol>',5),m=(0,t.Lk)("p",null,"自定义通道（Project Settings → Collision → Object Channels / Trace Channels）。",-1),g=(0,t.Fv)('<ol start="2"><li><p><strong>碰撞预设（Collision Presets）</strong></p><ul><li><p>UE 提供常用预设组合，比如：</p><ul><li><code>BlockAll</code> → 阻挡所有</li><li><code>OverlapAll</code> → 全部触发重叠事件</li><li><code>Pawn</code> → 阻挡世界静态物体，忽略玩家等</li></ul></li><li><p>每个预设内部其实就是 <strong>对每个通道的响应配置</strong>。</p></li></ul></li><li><p><strong>碰撞响应（Collision Response）</strong></p><ul><li>决定了对象对某个通道的具体行为：</li></ul></li></ol><table><thead><tr><th>碰撞响应</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>ECR_Block</code></td><td>阻挡</td><td>产生物理碰撞，角色/物体无法穿过</td></tr><tr><td><code>ECR_Overlap</code></td><td>重叠</td><td>允许穿过，但会触发 <code>OnComponentBeginOverlap/EndOverlap</code> 事件</td></tr><tr><td><code>ECR_Ignore</code></td><td>忽略</td><td>不会碰撞，也不会触发重叠事件</td></tr></tbody></table><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案"><span>方案</span></a></h2><h3 id="方案1" tabindex="-1"><a class="header-anchor" href="#方案1"><span>方案1</span></a></h3>',4),b=(0,t.Fv)('<hr><ul><li>每个平台上方加一个 <strong>TriggerBox/BoxComponent</strong>（只用于感知角色是否接近）</li><li>平台默认 <strong>Pawn 通道忽略阻挡</strong></li><li>当角色进入 Trigger → 开启 <strong>平台阻挡</strong>（ECR_Block）</li><li>当角色离开 Trigger → 关闭阻挡（ECR_Ignore）</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">APlatformBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\tPrimaryActorTick<span class="token punctuation">.</span>bCanEverTick <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\tTrigger <span class="token operator">=</span> <span class="token generic-function"><span class="token function">CreateDefaultSubobject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UBoxComponent<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;FootTrigger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tTrigger<span class="token operator">-&gt;</span><span class="token function">SetupAttachment</span><span class="token punctuation">(</span><span class="token function">GetRootComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n\t<span class="token comment">// 设置大小，稍微比脚底大一点</span>\n\tTrigger<span class="token operator">-&gt;</span><span class="token function">SetCollisionEnabled</span><span class="token punctuation">(</span>ECollisionEnabled<span class="token double-colon punctuation">::</span>QueryOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tTrigger<span class="token operator">-&gt;</span><span class="token function">SetCollisionResponseToAllChannels</span><span class="token punctuation">(</span>ECR_Overlap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tTrigger<span class="token operator">-&gt;</span><span class="token function">SetCollisionResponseToChannel</span><span class="token punctuation">(</span>ECC_WorldDynamic<span class="token punctuation">,</span> ECR_Overlap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tTrigger<span class="token operator">-&gt;</span>OnComponentBeginOverlap<span class="token punctuation">.</span><span class="token function">AddDynamic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>APlatformBase<span class="token double-colon punctuation">::</span>OnTriggerOverlap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tTrigger<span class="token operator">-&gt;</span>OnComponentEndOverlap<span class="token punctuation">.</span><span class="token function">AddDynamic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>APlatformBase<span class="token double-colon punctuation">::</span>OnTriggerEndOverlap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">SetBlocking</span><span class="token punctuation">(</span><span class="token keyword">bool</span> bEnable<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bIsBlocking <span class="token operator">==</span> bEnable<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\tbIsBlocking <span class="token operator">=</span> bEnable<span class="token punctuation">;</span>\n\t<span class="token function">GetRenderComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">SetCollisionResponseToChannel</span><span class="token punctuation">(</span>ECC_Pawn<span class="token punctuation">,</span> bEnable <span class="token operator">?</span> ECR_Block <span class="token operator">:</span> ECR_Ignore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnTriggerOverlap</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> OverlappedComponent<span class="token punctuation">,</span> AActor<span class="token operator">*</span> OtherActor<span class="token punctuation">,</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OtherComp<span class="token punctuation">,</span> int32 OtherBodyIndex<span class="token punctuation">,</span> <span class="token keyword">bool</span> bFromSweep<span class="token punctuation">,</span> <span class="token keyword">const</span> FHitResult<span class="token operator">&amp;</span> SweepResult<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OtherActor <span class="token operator">&amp;&amp;</span> OtherActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>ACharacter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function">SetBlocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnTriggerEndOverlap</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> OverlappedComponent<span class="token punctuation">,</span> AActor<span class="token operator">*</span> OtherActor<span class="token punctuation">,</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OtherComp<span class="token punctuation">,</span> int32 OtherBodyIndex<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OtherActor <span class="token operator">&amp;&amp;</span> OtherActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>ACharacter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token function">SetBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="方案1-问题——多角色处理" tabindex="-1"><a class="header-anchor" href="#方案1-问题——多角色处理"><span>方案1|问题——多角色处理</span></a></h3>',5),h=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token comment">// 记录 Trigger 内的角色数量</span>\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>VisibleAnywhere<span class="token punctuation">,</span> BlueprintReadOnly<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Collision&quot;</span><span class="token punctuation">)</span>\nint32 OverlappingCharacters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnTriggerOverlap</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> OverlappedComponent<span class="token punctuation">,</span> AActor<span class="token operator">*</span> OtherActor<span class="token punctuation">,</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OtherComp<span class="token punctuation">,</span> int32 OtherBodyIndex<span class="token punctuation">,</span> <span class="token keyword">bool</span> bFromSweep<span class="token punctuation">,</span> <span class="token keyword">const</span> FHitResult<span class="token operator">&amp;</span> SweepResult<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OtherActor <span class="token operator">&amp;&amp;</span> OtherActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>ACharacter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tOverlappingCharacters<span class="token operator">++</span><span class="token punctuation">;</span>\n\t\t<span class="token function">SetBlocking</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token class-name">APlatformBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnTriggerEndOverlap</span><span class="token punctuation">(</span>UPrimitiveComponent<span class="token operator">*</span> OverlappedComponent<span class="token punctuation">,</span> AActor<span class="token operator">*</span> OtherActor<span class="token punctuation">,</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OtherComp<span class="token punctuation">,</span> int32 OtherBodyIndex<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>OtherActor <span class="token operator">&amp;&amp;</span> OtherActor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>ACharacter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tOverlappingCharacters <span class="token operator">=</span> <span class="token class-name">FMath</span><span class="token double-colon punctuation">::</span><span class="token function">Max</span><span class="token punctuation">(</span>OverlappingCharacters <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">SetBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方案2-代码" tabindex="-1"><a class="header-anchor" href="#方案2-代码"><span>方案2|代码</span></a></h3>',2),f=(0,t.Fv)('<figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token keyword">void</span> <span class="token class-name">ADoodleJumpCharacter</span><span class="token double-colon punctuation">::</span><span class="token function">OnFootTriggerOverlap</span><span class="token punctuation">(</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OverlappedComponent<span class="token punctuation">,</span>\n\tAActor<span class="token operator">*</span> OtherActor<span class="token punctuation">,</span>\n\tUPrimitiveComponent<span class="token operator">*</span> OtherComp<span class="token punctuation">,</span>\n\tint32 OtherBodyIndex<span class="token punctuation">,</span>\n\t<span class="token keyword">bool</span> bFromSweep<span class="token punctuation">,</span>\n\t<span class="token keyword">const</span> FHitResult<span class="token operator">&amp;</span> SweepResult<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>OtherActor<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>APaperFlipbookActor<span class="token operator">*</span> Platform <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>APaperFlipbookActor<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>OtherActor<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">const</span> FVector CharLocation <span class="token operator">=</span> FootTrigger<span class="token operator">-&gt;</span><span class="token function">GetComponentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">const</span> FVector PlatformLocation <span class="token operator">=</span> Platform<span class="token operator">-&gt;</span><span class="token function">GetActorLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>CharLocation<span class="token punctuation">.</span>Z <span class="token operator">&gt;</span> PlatformLocation<span class="token punctuation">.</span>Z<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tPlatform<span class="token operator">-&gt;</span><span class="token function">GetRenderComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">SetCollisionResponseToChannel</span><span class="token punctuation">(</span>ECC_Pawn<span class="token punctuation">,</span> ECR_Block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>Platform<span class="token operator">-&gt;</span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ImplementsInterface</span><span class="token punctuation">(</span><span class="token class-name">UPlatformInterface</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t<span class="token class-name">IPlatformInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_TouchAction</span><span class="token punctuation">(</span>Platform<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">else</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tPlatform<span class="token operator">-&gt;</span><span class="token function">GetRenderComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">SetCollisionResponseToChannel</span><span class="token punctuation">(</span>ECC_Pawn<span class="token punctuation">,</span> ECR_Ignore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),C=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),y={},O=(0,s(66262).A)(y,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[r,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 还记得小时候玩的魂斗罗、马里奥这种横板游戏吗？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 当然记得啦！ ")])),_:1}),u,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 不知道你有没有注意其中的一个细节。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 什么细节? ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你有没有想过，怎么还原这种从下方穿透、上方可以站立的平台？ ")])),_:1}),k,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 对哦，如果平台一直开着碰撞，显然我们只能从旁边跳上去。 ")])),_:1}),d,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 而且最重要的是碰撞体积，比如角色胶囊体积对单一物体不会存在既能穿透、又能阻挡的叠加态。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 提到这个我们还是先来回顾一下UE中碰撞体积的一些知识 ")])),_:1}),v,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[m])),_:1}),g,(0,t.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 我想到的第一个方法是给平台上方加一个触发体积 ")])),_:1}),b,(0,t.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果是多角色阁下怎么应对？ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 这还不简单，直接加一个计数器,记录一下多少角色触碰了就行了。 ")])),_:1}),h,(0,t.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:35},{default:(0,t.k6)((()=>[(0,t.eW)(" 当然上面的方案是站在平台角度思考的，我这里其实有一种站在角色本身角度思考的方法。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 说说看。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:35},{default:(0,t.k6)((()=>[(0,t.eW)(" 反过来，给角色加一个额外的碰撞体积。 ")])),_:1}),f,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 至于跳跃，如果是类似跳一跳的游戏，可以在Tick中一直触发跳跃事件，目前来说无伤大雅。 ")])),_:1}),C])}]]),A=JSON.parse('{"path":"/unreal/exp_%E7%BB%8F%E9%AA%8C_/14.OneWayPlatform.html","title":"EXP14.单向跳跃平台(碰撞体积)","lang":"zh-CN","frontmatter":{"title":"EXP14.单向跳跃平台(碰撞体积)","order":14,"category":["u++"],"description":"提要 响应通道（Collision Response Channels） UE 的碰撞系统由三部分组成： 碰撞通道（Collision Channel） 用于标记对象所属类型。 UE 内置两种类型： Object Channels（对象通道）：标记对象类别，比如 Pawn、WorldStatic、WorldDynamic。 Trace Channels...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/exp_%E7%BB%8F%E9%AA%8C_/14.OneWayPlatform.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"EXP14.单向跳跃平台(碰撞体积)"}],["meta",{"property":"og:description","content":"提要 响应通道（Collision Response Channels） UE 的碰撞系统由三部分组成： 碰撞通道（Collision Channel） 用于标记对象所属类型。 UE 内置两种类型： Object Channels（对象通道）：标记对象类别，比如 Pawn、WorldStatic、WorldDynamic。 Trace Channels..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-27T06:40:08.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-08-27T06:40:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"EXP14.单向跳跃平台(碰撞体积)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-27T06:40:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"提要","slug":"提要","link":"#提要","children":[{"level":3,"title":"响应通道（Collision Response Channels）","slug":"响应通道-collision-response-channels","link":"#响应通道-collision-response-channels","children":[]}]},{"level":2,"title":"方案","slug":"方案","link":"#方案","children":[{"level":3,"title":"方案1","slug":"方案1","link":"#方案1","children":[]},{"level":3,"title":"方案1|问题——多角色处理","slug":"方案1-问题——多角色处理","link":"#方案1-问题——多角色处理","children":[]},{"level":3,"title":"方案2|代码","slug":"方案2-代码","link":"#方案2-代码","children":[]}]}],"git":{"createdTime":1756276808000,"updatedTime":1756276808000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.37,"words":1012},"filePathRelative":"unreal/exp[经验]/14.OneWayPlatform.md","localizedDate":"2025年8月27日","excerpt":"<h2>提要</h2>\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n<h3>响应通道（Collision Response Channels）</h3>\\n<figure><figcaption></figcaption></figure>\\n<hr>\\n<blockquote>\\n<p>UE 的碰撞系统由三部分组成：</p>\\n</blockquote>\\n<ol>\\n<li>\\n<p><strong>碰撞通道（Collision Channel）</strong></p>\\n<ul>\\n<li>\\n<p>用于标记对象所属类型。</p>\\n</li>\\n<li>\\n<p>UE 内置两种类型：</p>\\n<ul>\\n<li><strong>Object Channels（对象通道）</strong>：标记对象类别，比如 <code>Pawn</code>、<code>WorldStatic</code>、<code>WorldDynamic</code>。</li>\\n<li><strong>Trace Channels（射线通道）</strong>：用于射线/扫描（LineTrace、SphereTrace）检测。</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}')}}]);