"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1895],{41453:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>x,data:()=>F});var e=s(20641);const t=s.p+"assets/img/BLUEPRINTNATIVEENVENT.404740a3.png",i=s.p+"assets/img/interfacebp007.cf1f7e43.svg",l=s.p+"assets/img/interfacebp001.af63ef4e.png",c=s.p+"assets/img/interfacebp002.694b1b67.jpg",p=s.p+"assets/img/interfacebp003.2f35312f.png",o=s.p+"assets/img/interfacebp004.55b9f5b2.png",r=s.p+"assets/img/interfacebp005.02a0e168.jpg",k=s.p+"assets/img/interfacebp006.7d40957d.png",u=(0,e.Lk)("p",null,[(0,e.Lk)("strong",null,"接口（Interface"),(0,e.eW)(" 是一种纯抽象的类型，只包含方法签名（即纯虚函数或抽象方法），不包含任何具体实现。")],-1),d=(0,e.Lk)("h2",{id:"接口组成",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#接口组成"},[(0,e.Lk)("span",null,"接口组成")])],-1),v=(0,e.Lk)("p",null,"UE的接口由两部分组成：",-1),m=(0,e.Fv)('<ol><li><p><strong>UINTERFACE</strong>：使用 <code>UINTERFACE</code> 宏声明的空 <code>UClass</code>，仅用于让反射系统识别接口，不包含具体逻辑。</p></li><li><p><strong>IInterface</strong>：以 <code>I</code> 开头的纯 C++ 类，包含所有纯虚函数声明，是真正需要被实现的接口。</p></li></ol><h2 id="接口声明" tabindex="-1"><a class="header-anchor" href="#接口声明"><span>接口声明</span></a></h2><h3 id="接口声明-blueprintnativeevent" tabindex="-1"><a class="header-anchor" href="#接口声明-blueprintnativeevent"><span>接口声明|BlueprintNativeEvent</span></a></h3><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/Interface.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyInterface.generated.h&quot;</span></span>\n\n<span class="token function">UINTERFACE</span><span class="token punctuation">(</span>MinimalAPI<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">UMyInterface</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UInterface</span><span class="token comment">//继承自UInterface</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MYPROJECT_API</span> IMyInterface<span class="token comment">//使用时继承这个即可。</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\n\t<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintNativeEvent<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;CameraInterface&quot;</span><span class="token punctuation">)</span>\n\t<span class="token keyword">void</span>  <span class="token function">IChangeCamera</span> <span class="token punctuation">(</span>int32 CameraID<span class="token punctuation">,</span><span class="token keyword">float</span> CameraSwitchTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="接口声明-传统纯虚函数" tabindex="-1"><a class="header-anchor" href="#接口声明-传统纯虚函数"><span>接口声明|传统纯虚函数</span></a></h3>',7),b=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/Interface.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyInterface.generated.h&quot;</span></span>\n\n<span class="token function">UINTERFACE</span><span class="token punctuation">(</span>MinimalAPI<span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">UMyInterface</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UInterface</span></span>\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MYPROJECT_API</span> IMyInterface\n<span class="token punctuation">{</span>\n\t<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n\t<span class="token keyword">void</span>  <span class="token function">IChangeCamera</span> <span class="token punctuation">(</span>int32 CameraID<span class="token punctuation">,</span><span class="token keyword">float</span> CameraSwitchTime<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//纯虚函数</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="接口实现" tabindex="-1"><a class="header-anchor" href="#接口实现"><span>接口实现</span></a></h2><h3 id="_1-纯虚函数" tabindex="-1"><a class="header-anchor" href="#_1-纯虚函数"><span>①.纯虚函数</span></a></h3>',3),g=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"pragma"),(0,e.eW)(),(0,e.Lk)("span",{class:"token expression"},"once")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"CoreMinimal.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyInterface.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.generated.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token comment"},"// 声明类并实现接口"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"UCLASS"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"MYPROJECT_API"),(0,e.eW)(" UMyClass "),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" UObject"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" IMyInterface\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token function"},"GENERATED_BODY"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token comment"},"//重写虚函数。"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token keyword"},"virtual"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(" IChangeCamera "),(0,e.Lk)("span",{class:"token keyword"},"override"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),h=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"UMyClass"),(0,e.Lk)("span",{class:"token double-colon punctuation"},"::"),(0,e.Lk)("span",{class:"token function"},"MyMethod_Implementation"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token comment"},"// 实现接口方法的具体逻辑"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),L=(0,e.Lk)("h3",{id:"_2-blueprintnativeevent",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#_2-blueprintnativeevent"},[(0,e.Lk)("span",null,"②. BlueprintNativeEvent")])],-1),f=(0,e.Lk)("p",null,[(0,e.eW)("无需加"),(0,e.Lk)("code",null," virtual"),(0,e.eW)(" 关键字")],-1),y=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"pragma"),(0,e.eW)(),(0,e.Lk)("span",{class:"token expression"},"once")]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"CoreMinimal.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyInterface.h"')]),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.generated.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token comment"},"// 声明类并实现接口"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token function"},"UCLASS"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token keyword"},"class"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"MYPROJECT_API"),(0,e.eW)(" UMyClass "),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" UObject"),(0,e.Lk)("span",{class:"token punctuation"},","),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.eW)(" IMyInterface\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token function"},"GENERATED_BODY"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"public"),(0,e.Lk)("span",{class:"token operator"},":"),(0,e.eW)("\n   "),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token function"},"IChangeCamera_Implementation"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)(),(0,e.Lk)("span",{class:"token keyword"},"override"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.Lk)("span",{class:"token punctuation"},";"),(0,e.eW)("\n")])]),(0,e.Lk)("div",{class:"highlight-lines"},[(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("br"),(0,e.Lk)("div",{class:"highlight-line"}," "),(0,e.Lk)("br")]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),I=(0,e.Lk)("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp","data-title":"cpp"},[(0,e.Lk)("pre",{class:"language-cpp"},[(0,e.Lk)("code",null,[(0,e.Lk)("span",{class:"token macro property"},[(0,e.Lk)("span",{class:"token directive-hash"},"#"),(0,e.Lk)("span",{class:"token directive keyword"},"include"),(0,e.eW)(),(0,e.Lk)("span",{class:"token string"},'"MyClass.h"')]),(0,e.eW)("\n\n"),(0,e.Lk)("span",{class:"token keyword"},"void"),(0,e.eW)(),(0,e.Lk)("span",{class:"token class-name"},"UMyClass"),(0,e.Lk)("span",{class:"token double-colon punctuation"},"::"),(0,e.Lk)("span",{class:"token function"},"MyMethod_Implementation"),(0,e.Lk)("span",{class:"token punctuation"},"("),(0,e.Lk)("span",{class:"token punctuation"},")"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"{"),(0,e.eW)("\n    "),(0,e.Lk)("span",{class:"token comment"},"// 实现接口方法的具体逻辑"),(0,e.eW)("\n"),(0,e.Lk)("span",{class:"token punctuation"},"}"),(0,e.eW)("\n\n")])]),(0,e.Lk)("div",{class:"line-numbers","aria-hidden":"true"},[(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"}),(0,e.Lk)("div",{class:"line-number"})])],-1),W=(0,e.Lk)("h2",{id:"接口调用",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#接口调用"},[(0,e.Lk)("span",null,"接口调用")])],-1),C=(0,e.Lk)("hr",null,null,-1),E=(0,e.Fv)('<figure><img src="'+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-纯虚函数-1" tabindex="-1"><a class="header-anchor" href="#_1-纯虚函数-1"><span>①.纯虚函数</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>IMenuInterface<span class="token operator">*</span> Interface <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>IMenuInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Interface<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Interface<span class="token operator">-&gt;</span><span class="token function">ISetLockVisibility</span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">,</span>IsFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_2-blueprintnativeevent-1" tabindex="-1"><a class="header-anchor" href="#_2-blueprintnativeevent-1"><span>②. BlueprintNativeEvent</span></a></h3>',5),_=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>IMenuInterface<span class="token operator">*</span> Interface <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>IMenuInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>Interface<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Interface<span class="token operator">-&gt;</span><span class="token function">Execute_ISetLockVisibility</span><span class="token punctuation">(</span>FocusActor<span class="token punctuation">,</span>IsFocus<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),w=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>Actor<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">Implements</span><span class="token generic class-name"><span class="token operator">&lt;</span>UHighlightInterface<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">IHighlightInterface</span><span class="token double-colon punctuation">::</span><span class="token function">Execute_UnHighlightActor</span><span class="token punctuation">(</span>Actor<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="蓝图接口" tabindex="-1"><a class="header-anchor" href="#蓝图接口"><span>蓝图接口</span></a></h2><h3 id="蓝图接口-声明定义" tabindex="-1"><a class="header-anchor" href="#蓝图接口-声明定义"><span>蓝图接口|声明定义</span></a></h3><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="蓝图接口-实现" tabindex="-1"><a class="header-anchor" href="#蓝图接口-实现"><span>蓝图接口|实现</span></a></h3><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="蓝图接口-调用" tabindex="-1"><a class="header-anchor" href="#蓝图接口-调用"><span>蓝图接口|调用</span></a></h3><blockquote><p>类内直接调用</p></blockquote><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>类外需找到对象</p></blockquote><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>',14),M={href:"https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Interfaces/",target:"_blank",rel:"noopener noreferrer"},A={},x=(0,s(66262).A)(A,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),t=(0,e.g2)("CodeTabs"),i=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 什么是接口？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[u])),_:1}),d,(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[v])),_:1}),m,(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 依然可以使用传统虚函数方法定义接口。 ")])),_:1}),b,(0,e.bF)(t,{id:"48",data:[{id:"MyClass.h"},{id:"MyClass.cpp"}],"tab-id":"language"},{title0:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)("MyClass.h")])),title1:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)("MyClass.cpp")])),tab0:(0,e.k6)((({value:n,isActive:a})=>[g])),tab1:(0,e.k6)((({value:n,isActive:a})=>[h])),_:1},8,["data"]),L,(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[f])),_:1}),(0,e.bF)(t,{id:"64",data:[{id:"MyClass.h"},{id:"MyClass.cpp"}],"tab-id":"language"},{title0:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)("MyClass.h")])),title1:(0,e.k6)((({value:n,isActive:a})=>[(0,e.eW)("MyClass.cpp")])),tab0:(0,e.k6)((({value:n,isActive:a})=>[y])),tab1:(0,e.k6)((({value:n,isActive:a})=>[I])),_:1},8,["data"]),W,C,(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 怎么调用呢？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 接口的本质其实是多态，通过继承来实现的。意味着还是需要获取到对应的实现类才能调用。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 那和我直接获取这个类调用有什么区别啊？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 你可以理解成接口是一些公共功能的扩展或者抽象，这意味着我不必获取具体的实现就能统一用接口调用。 但如果你连对象都找不到的话，显然没法通信是吧。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 好家伙有点霸总的味道：“我不关心你是谁，只要你会干这个活。” ")])),_:1}),(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 贴心的Baba给你画了一个图加深理解。 ")])),_:1}),E,(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 只会调用到C++的版本，蓝图中的接口不会被调用。 ")])),_:1}),_,(0,e.bF)(s,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" C++/蓝图接口都会被调用 ")])),_:1}),w,(0,e.Lk)("p",null,[(0,e.Lk)("a",M,[(0,e.eW)("官方文档"),(0,e.bF)(i)])])])}]]),F=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html","title":"c5.Interface|接口","lang":"zh-CN","frontmatter":{"title":"c5.Interface|接口","order":500,"category":["u++"],"description":"接口组成 UINTERFACE：使用 UINTERFACE 宏声明的空 UClass，仅用于让反射系统识别接口，不包含具体逻辑。 IInterface：以 I 开头的纯 C++ 类，包含所有纯虚函数声明，是真正需要被实现的接口。 接口声明 接口声明|BlueprintNativeEvent 接口声明|传统纯虚函数 接口实现 ①.纯虚函数 ②. Blue...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/5-Interface.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c5.Interface|接口"}],["meta",{"property":"og:description","content":"接口组成 UINTERFACE：使用 UINTERFACE 宏声明的空 UClass，仅用于让反射系统识别接口，不包含具体逻辑。 IInterface：以 I 开头的纯 C++ 类，包含所有纯虚函数声明，是真正需要被实现的接口。 接口声明 接口声明|BlueprintNativeEvent 接口声明|传统纯虚函数 接口实现 ①.纯虚函数 ②. Blue..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-17T06:07:07.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-06-17T06:07:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c5.Interface|接口\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-17T06:07:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"接口组成","slug":"接口组成","link":"#接口组成","children":[]},{"level":2,"title":"接口声明","slug":"接口声明","link":"#接口声明","children":[{"level":3,"title":"接口声明|BlueprintNativeEvent","slug":"接口声明-blueprintnativeevent","link":"#接口声明-blueprintnativeevent","children":[]},{"level":3,"title":"接口声明|传统纯虚函数","slug":"接口声明-传统纯虚函数","link":"#接口声明-传统纯虚函数","children":[]}]},{"level":2,"title":"接口实现","slug":"接口实现","link":"#接口实现","children":[{"level":3,"title":"①.纯虚函数","slug":"_1-纯虚函数","link":"#_1-纯虚函数","children":[]},{"level":3,"title":"②. BlueprintNativeEvent","slug":"_2-blueprintnativeevent","link":"#_2-blueprintnativeevent","children":[]}]},{"level":2,"title":"接口调用","slug":"接口调用","link":"#接口调用","children":[{"level":3,"title":"①.纯虚函数","slug":"_1-纯虚函数-1","link":"#_1-纯虚函数-1","children":[]},{"level":3,"title":"②. BlueprintNativeEvent","slug":"_2-blueprintnativeevent-1","link":"#_2-blueprintnativeevent-1","children":[]}]},{"level":2,"title":"蓝图接口","slug":"蓝图接口","link":"#蓝图接口","children":[{"level":3,"title":"蓝图接口|声明定义","slug":"蓝图接口-声明定义","link":"#蓝图接口-声明定义","children":[]},{"level":3,"title":"蓝图接口|实现","slug":"蓝图接口-实现","link":"#蓝图接口-实现","children":[]},{"level":3,"title":"蓝图接口|调用","slug":"蓝图接口-调用","link":"#蓝图接口-调用","children":[]}]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1750140427000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":5}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"unreal/core[核心]/5-Interface.md","localizedDate":"2024年1月3日","excerpt":"\\n\\n<h2>接口组成</h2>\\n\\n<ol>\\n<li>\\n<p><strong>UINTERFACE</strong>：使用 <code>UINTERFACE</code> 宏声明的空 <code>UClass</code>，仅用于让反射系统识别接口，不包含具体逻辑。</p>\\n</li>\\n<li>\\n<p><strong>IInterface</strong>：以 <code>I</code> 开头的纯 C++ 类，包含所有纯虚函数声明，是真正需要被实现的接口。</p>\\n</li>\\n</ol>\\n<h2>接口声明</h2>\\n<h3>接口声明|BlueprintNativeEvent</h3>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}')}}]);