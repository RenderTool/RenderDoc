"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[6830],{82384:(a,e,t)=>{t.r(e),t.d(e,{comp:()=>C,data:()=>O});var i=t(20641);const l=t.p+"assets/img/110-Vlado-full (1).bbc94223.jpg",n=t.p+"assets/img/Light001.a24b3597.jpg",s=t.p+"assets/img/lightmap001.0bc7d621.png",r=t.p+"assets/img/lightmap002.03083b7f.png",g=t.p+"assets/img/lightmap003.26d1c8a9.png",o=t.p+"assets/img/lightmap004.d47e376b.jpg",d=t.p+"assets/img/lightmap005.35e4df1b.jpg",p=t.p+"assets/img/lightmap006.39f20ecb.jpg",h=t.p+"assets/img/lightmap007.4bd16337.png",c=t.p+"assets/img/lightmap008.970599dc.jpg",u=t.p+"assets/img/lightmap009.060017bf.jpg",k=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:l,alt:"110-Vlado-full (1).jpg",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption",null,"110-Vlado-full (1).jpg")],-1),f=(0,i.Lk)("h2",{id:"从灯光开始",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#从灯光开始"},[(0,i.Lk)("span",null,"从灯光开始")])],-1),m=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:n,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),L=(0,i.Fv)("<ol><li><p><strong>固定管线时代：</strong> 在早期的游戏引擎中，使用固定管线图形渲染流水线。灯光通常是基于简单的光照模型，如冯·肖定律（Phong Shading）等。这种方法的计算相对简单，但在细节和真实感方面表现一般。</p></li><li><p><strong>可编程管线和着色器：</strong> 随着可编程图形管线的出现，引擎可以更灵活地处理灯光。开发者可以使用自定义的着色器编写更复杂的光照算法，如基于物理的渲染（Physically Based Rendering，PBR）。PBR模型更准确地模拟了真实世界中光的反射和折射。</p></li><li><p><strong>实时光照技术：</strong> 引擎开始引入实时光照技术，如实时全局光照（Real-Time Global Illumination）和实时阴影技术。这些技术旨在模拟真实世界中的光照效果，提高场景的真实感。包括屏幕空间反射（Screen Space Reflection）和环境遮挡（Ambient Occlusion）等技术。</p></li><li><p><strong>实时光追：</strong> 随着硬件性能的提升，一些引擎引入了实时光追技术，这种技术通过模拟光线在场景中的传播来实现更高质量的光照效果。实时光追通常需要更强大的计算资源，但可以提供更真实的光照和阴影。</p></li><li><p><strong>深度学习和实时渲染：</strong> 最近，深度学习技术开始应用于游戏渲染，例如基于机器学习的超分辨率技术、反走样和实时光照估计等。这些技术旨在通过神经网络等方法改善实时渲染的质量和性能。</p></li></ol>",1),b=(0,i.Lk)("h3",{id:"灯光烘培",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#灯光烘培"},[(0,i.Lk)("span",null,"灯光烘培")])],-1),v=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:s,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),j=(0,i.Lk)("blockquote",null,[(0,i.Lk)("p",null,"由于本人精力有限，这里记录一些重点，更加详细的还是看专门的视频吧，码字实在太累了！")],-1),y=(0,i.Lk)("h3",{id:"_2uv",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#_2uv"},[(0,i.Lk)("span",null,"2UV")])],-1),W=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),_=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:g,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),x=(0,i.Lk)("blockquote",null,[(0,i.Lk)("p",null,"图里确实是AO贴图，你没看错，AO叫环境光遮蔽，理论上也算灯光阴影贴图。")],-1),F=(0,i.Lk)("h3",{id:"光源色温",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#光源色温"},[(0,i.Lk)("span",null,"光源色温")])],-1),E=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),S=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),z=(0,i.Lk)("h3",{id:"光源大小",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#光源大小"},[(0,i.Lk)("span",null,"光源大小")])],-1),A=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),R=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),B=(0,i.Lk)("h3",{id:"物体影响",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#物体影响"},[(0,i.Lk)("span",null,"物体影响")])],-1),P=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:c,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),D=(0,i.Lk)("h3",{id:"构图",tabindex:"-1"},[(0,i.Lk)("a",{class:"header-anchor",href:"#构图"},[(0,i.Lk)("span",null,"构图")])],-1),V=(0,i.Lk)("figure",null,[(0,i.Lk)("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),(0,i.Lk)("figcaption")],-1),T={},C=(0,t(66262).A)(T,[["render",function(a,e){const t=(0,i.g2)("chatmessage");return(0,i.uX)(),(0,i.CE)("div",null,[(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 为什么我的材质质感总是达不到想要的效果？ ")])),_:1}),(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" everything has fresnel!但前提是要有光！ ")])),_:1}),k,f,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 说到灯光，我们肯定先能想到日常生活中的太阳、电灯、手电等。当然游戏中还有一些例子特效等。 这些光源或是直接影响物体，或是间接影响物体。 ")])),_:1}),m,(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 可是为什么总觉得游戏中的质感就是没有渲染器渲染的好？ ")])),_:1}),(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 游戏引擎不比离线灯光算法的，离线渲染器只要你想，可以一直用渐进式渲下去，游戏往往需要在每秒60帧的时间内计算出灯光效果，每帧不得超过60毫秒。 ")])),_:1}),L,(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 可是早期我看游戏灯光不也挺自然的吗？ ")])),_:1}),b,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 你看到的可能是提前渲染烘培好的灯光，然后保存到一张贴图中，我们通常把这个贴图叫灯光贴图，这种计算烘培的技术在UE也叫Lightmass。 ")])),_:1}),v,j,y,(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 问题来了！这个灯光贴图贴哪？我看有些灯光贴图的样子和本体不太一样啊！ ")])),_:1}),(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 问的好！游戏中分两套UV，第一套是给物体本身用的，第二套是拿来烘培灯光的。这也是烘培时代有些物体烘培后会出现黑面的原因之一，2uv没展！ ")])),_:1}),W,_,x,F,(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 可是有时候我们渲染的东西有色差啊！尤其是面料这种材质色彩特别明显。 ")])),_:1}),(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 灯光不仅仅拥有亮度，同时还有一个重要的属性——色温，你拍摄的环境有色温，你处理的手法等导致你口中所谓的色差。 ")])),_:1}),E,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 某宝的截图 ")])),_:1}),S,z,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(' 除了色温，光源本身的物理尺寸也会影响"质感"。 ')])),_:1}),A,(0,i.bF)(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,i.k6)((()=>[(0,i.eW)(" 可是我明明已经按照现实打光了！为什么还是没有质感？ ")])),_:1}),(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 现实中，尤其是拍电影的时候往往需要一些额外的灯光补充细节。 ")])),_:1}),R,B,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 当然，物体本身也会影响你的场景亮度，比如下面不同透光类型的窗帘。 ")])),_:1}),P,D,(0,i.bF)(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,i.k6)((()=>[(0,i.eW)(" 还有一个重要元素就是构图的影响。好比你给女朋友拍照一个道理，合适的透视关系很重要！ ")])),_:1}),V])}]]),O=JSON.parse('{"path":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html","title":"SD4.灯光","lang":"zh-CN","frontmatter":{"title":"SD4.灯光","order":4,"category":["unreal"],"description":"110-Vlado-full (1).jpg110-Vlado-full (1).jpg 从灯光开始 固定管线时代： 在早期的游戏引擎中，使用固定管线图形渲染流水线。灯光通常是基于简单的光照模型，如冯·肖定律（Phong Shading）等。这种方法的计算相对简单，但在细节和真实感方面表现一般。 可编程管线和着色器： 随着可编程图形管线的出现，引擎可以...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/4-%E5%A7%8B%E4%BA%8E%E7%81%AF%E5%85%89.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"SD4.灯光"}],["meta",{"property":"og:description","content":"110-Vlado-full (1).jpg110-Vlado-full (1).jpg 从灯光开始 固定管线时代： 在早期的游戏引擎中，使用固定管线图形渲染流水线。灯光通常是基于简单的光照模型，如冯·肖定律（Phong Shading）等。这种方法的计算相对简单，但在细节和真实感方面表现一般。 可编程管线和着色器： 随着可编程图形管线的出现，引擎可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-03T17:33:45.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-02-03T17:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SD4.灯光\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-03T17:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"从灯光开始","slug":"从灯光开始","link":"#从灯光开始","children":[{"level":3,"title":"灯光烘培","slug":"灯光烘培","link":"#灯光烘培","children":[]},{"level":3,"title":"2UV","slug":"_2uv","link":"#_2uv","children":[]},{"level":3,"title":"光源色温","slug":"光源色温","link":"#光源色温","children":[]},{"level":3,"title":"光源大小","slug":"光源大小","link":"#光源大小","children":[]},{"level":3,"title":"物体影响","slug":"物体影响","link":"#物体影响","children":[]},{"level":3,"title":"构图","slug":"构图","link":"#构图","children":[]}]}],"git":{"createdTime":1706981625000,"updatedTime":1706981625000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":4.11,"words":1232},"filePathRelative":"unreal/shader[着色器]/4-始于灯光.md","localizedDate":"2024年2月3日","excerpt":"\\n\\n<figure><figcaption>110-Vlado-full (1).jpg</figcaption></figure>\\n<h2>从灯光开始</h2>\\n\\n<figure><figcaption></figcaption></figure>\\n\\n\\n<ol>\\n<li>\\n<p><strong>固定管线时代：</strong>\\n在早期的游戏引擎中，使用固定管线图形渲染流水线。灯光通常是基于简单的光照模型，如冯·肖定律（Phong Shading）等。这种方法的计算相对简单，但在细节和真实感方面表现一般。</p>\\n</li>\\n<li>\\n<p><strong>可编程管线和着色器：</strong>\\n随着可编程图形管线的出现，引擎可以更灵活地处理灯光。开发者可以使用自定义的着色器编写更复杂的光照算法，如基于物理的渲染（Physically Based Rendering，PBR）。PBR模型更准确地模拟了真实世界中光的反射和折射。</p>\\n</li>\\n<li>\\n<p><strong>实时光照技术：</strong>\\n引擎开始引入实时光照技术，如实时全局光照（Real-Time Global Illumination）和实时阴影技术。这些技术旨在模拟真实世界中的光照效果，提高场景的真实感。包括屏幕空间反射（Screen Space Reflection）和环境遮挡（Ambient Occlusion）等技术。</p>\\n</li>\\n<li>\\n<p><strong>实时光追：</strong>\\n随着硬件性能的提升，一些引擎引入了实时光追技术，这种技术通过模拟光线在场景中的传播来实现更高质量的光照效果。实时光追通常需要更强大的计算资源，但可以提供更真实的光照和阴影。</p>\\n</li>\\n<li>\\n<p><strong>深度学习和实时渲染：</strong>\\n最近，深度学习技术开始应用于游戏渲染，例如基于机器学习的超分辨率技术、反走样和实时光照估计等。这些技术旨在通过神经网络等方法改善实时渲染的质量和性能。</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);