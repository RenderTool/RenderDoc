"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[864],{66071:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>E,data:()=>z});var e=s(20641);const p=s.p+"assets/img/stringarray.fe090cef.png",t=s.p+"assets/img/ptrarray.2bdee3ba.jpg",o=s.p+"assets/img/intptrarrayfirest.cbe4e98f.png",c=s.p+"assets/img/arrayptrall.fe0a5b16.png",l=s.p+"assets/img/ggbl.5e910c30.png",i=(0,e.Lk)("h2",{id:"概念",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#概念"},[(0,e.Lk)("span",null,"概念")])],-1),u=(0,e.Lk)("h2",{id:"指针数组",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#指针数组"},[(0,e.Lk)("span",null,"指针数组")])],-1),r=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption")],-1),k=(0,e.Lk)("span",{style:{color:"#c0392b"}},"数组",-1),d=(0,e.Fv)('<blockquote><p>UE中一堆<code>对象指针</code>组成的<code>数组</code>就是<code>指针数组</code>例如：TArray&lt;ACameraActor*&gt;Camera。（多直观易懂）</p></blockquote><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p><strong>语法：<code>typename* ArrayName[arraySize]</code>;</strong></p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 假设有三个整数</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 声明一个指针数组，其中每个元素都是指向整数的指针</span>\n    <span class="token keyword">int</span><span class="token operator">*</span> ptrArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 将指针指向对应的整数</span>\n    ptrArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>\n    ptrArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>\n    ptrArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用指针数组中的指针访问对应的整数值</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value at index &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptrArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>ptrArray</code> 是一个包含三个元素的数组，每个元素都是一个指向整数的指针。通过将这些指针分别指向整数变量 <code>a</code>、<code>b</code> 和 <code>c</code>，我们形成了一个指针数组。在循环中，我们使用指针数组中的指针访问对应的整数值。</p><p>指针数组在某些情况下非常有用，例如在处理字符串数组、动态分配内存等情况下。</p><h2 id="i-与-i" tabindex="-1"><a class="header-anchor" href="#i-与-i"><span>i++与++i</span></a></h2>',7),m=(0,e.Lk)("h2",{id:"多维指针数组",tabindex:"-1"},[(0,e.Lk)("a",{class:"header-anchor",href:"#多维指针数组"},[(0,e.Lk)("span",null,"多维指针数组")])],-1),v=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),b=(0,e.Lk)("br",null,null,-1),g=(0,e.Lk)("br",null,null,-1),y=(0,e.Lk)("br",null,null,-1),h=(0,e.Lk)("br",null,null,-1),f=(0,e.Lk)("br",null,null,-1),w=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span>\n<span class="token punctuation">{</span>\n    <span class="token punctuation">{</span>\n        <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n        <span class="token punctuation">{</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),W=(0,e.Fv)('<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>\narr[2][3][4]\narr[①][②][③]\n|\n|-- [0]\n|   |\n|   |-- [0]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n|   |\n|   |-- [1]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n|   |\n|   |-- [2]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n|\n|-- [1]\n|   |\n|   |-- [0]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n|   |\n|   |-- [1]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n|   |\n|   |-- [2]\n|   |   |-- [0]\n|   |   |-- [1]\n|   |   |-- [2]\n|   |   |-- [3]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),A=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明一个三维数组，2个矩阵，每个矩阵3行4列</span>\n    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 初始化数组元素的值</span>\n    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 访问数组元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value at (1,2,3): &quot;</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token comment">// 释放分配的内存</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组指针" tabindex="-1"><a class="header-anchor" href="#数组指针"><span>数组指针</span></a></h2>',2),L=(0,e.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> array2<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> array2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',1),j=(0,e.Lk)("figure",null,[(0,e.Lk)("img",{src:o,alt:"普通指针，指向数组首元素",tabindex:"0",loading:"lazy"}),(0,e.Lk)("figcaption",null,"普通指针，指向数组首元素")],-1),x=(0,e.Fv)('<figure><img src="'+c+'" alt="保存的是整个数组的地址" tabindex="0" loading="lazy"><figcaption>保存的是整个数组的地址</figcaption></figure><h3 id="图中案例" tabindex="-1"><a class="header-anchor" href="#图中案例"><span>图中案例</span></a></h3><blockquote><p><strong>语法 typename( * p)[n];</strong></p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    \n    <span class="token keyword">int</span> <span class="token operator">*</span> P1 <span class="token operator">=</span> array<span class="token punctuation">;</span><span class="token comment">//P指向array首元素，本质还是int指针。</span>\n\n    <span class="token keyword">int</span> <span class="token operator">*</span> P2 <span class="token operator">=</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//注意看地址和P1一致。</span>\n    \n    <span class="token keyword">int</span> <span class="token operator">*</span> P3 <span class="token operator">=</span> <span class="token operator">&amp;</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//注意看地址。</span>\n    \n    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> P4<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>array<span class="token punctuation">;</span><span class="token comment">//P2指向array整个内存空间.注意看IDEP4地址。</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+l+'" alt="内存图" tabindex="0" loading="lazy"><figcaption>内存图</figcaption></figure>',5),F=(0,e.Fv)('<h2 id="多维数组指针" tabindex="-1"><a class="header-anchor" href="#多维数组指针"><span>多维数组指针</span></a></h2><p>多维数组指针的基本语法如下：</p><ol><li><p>声明二维数组指针：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptrTo2DArray<span class="token punctuation">)</span><span class="token punctuation">[</span>Columns<span class="token punctuation">]</span> <span class="token operator">=</span> array2D<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>Columns</code> 是二维数组的列数，<code>array2D</code> 是二维数组的名字。</p></li><li><p>声明三维数组指针：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptrTo3DArray<span class="token punctuation">)</span><span class="token punctuation">[</span>Rows<span class="token punctuation">]</span><span class="token punctuation">[</span>Columns<span class="token punctuation">]</span> <span class="token operator">=</span> array3D<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，<code>Rows</code> 是三维数组的行数，<code>Columns</code> 是列数，<code>array3D</code> 是三维数组的名字。</p></li><li><p>访问元素：</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>value <span class="token operator">=</span> ptrTo2DArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\nvalue <span class="token operator">=</span> ptrTo3DArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用指针可以通过索引访问多维数组的元素。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明一个二维整数数组</span>\n    <span class="token keyword">int</span> array2D<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                         <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n                         <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 声明一个指向二维数组的指针</span>\n    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptrToArray2D<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> array2D<span class="token punctuation">;</span>\n\n    <span class="token comment">// 使用指针访问数组元素</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value at (1,2): &quot;</span> <span class="token operator">&lt;&lt;</span> ptrToArray2D<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接"><span>参考链接</span></a></h2>',5),q={href:"https://zhuanlan.zhihu.com/p/391942337",target:"_blank",rel:"noopener noreferrer"},_={href:"https://blog.csdn.net/chenmozhe22/article/details/106420311",target:"_blank",rel:"noopener noreferrer"},C={href:"https://blog.csdn.net/chenmozhe22/article/details/106420311",target:"_blank",rel:"noopener noreferrer"},D={},E=(0,s(66262).A)(D,[["render",function(n,a){const s=(0,e.g2)("chatmessage"),p=(0,e.g2)("gifwithbutton"),t=(0,e.g2)("ExternalLinkIcon");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 有了先前知识点的铺垫，现在正是理解数组指针|指针数组最佳时机 ")])),_:1}),i,u,(0,e.bF)(s,{avatar:"../../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 什么叫指针数组？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 先别急着抠字眼，先看看这些：字符串数组、结构体数组,这些你能想到什么？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 一堆字符串组成的数组和一堆结构体组成的数组呗 ")])),_:1}),r,(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 那么他换个马甲你就不认识？指针数组，不就是一堆指针组成的"),k,(0,e.eW)("嘛？ ")])),_:1}),d,(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 我不理解！为什么这里用++i而不是i++，有什么区别嘛？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 在这里i没有对其他变量赋值，所以没有区别。你可以康康我之前的文章《i++|++i区别》 ")])),_:1}),m,(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 讨论多维指针数组之前先来复习一下多维数组。比如：int arr[2][3]是什么意思？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 表示一个二维数组，2表示行数，3表示列数。 ")])),_:1}),v,(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" goodjob!int arr[2][3][4]呢？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 隔着套娃呢！这个我就迷糊了，2行 3列 4？ ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 你可以这么理解，从左边开始："),b,(0,e.eW)(" arr[2][3][4]"),g,(0,e.eW)(" arr[①][②][③]"),y,(0,e.eW)(" - 每个①有2个数组②。"),h,(0,e.eW)(" - 每个②有3个数组③。"),f,(0,e.eW)(" - 每个③有4个元素。 ")])),_:1}),w,(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (6).png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 那么说！其实就是一个数括号游戏。 ")])),_:1}),W,(0,e.bF)(s,{avatar:"../../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 多维指针数组依然是一个指针组成的数组。 ")])),_:1}),A,(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" Baba帮我康康我写的这个p2是不是就是数组指针？ ")])),_:1}),L,(0,e.bF)(s,{avatar:"../../../../assets/emoji//blzt.png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 你说的这个不叫数组指针，是一个普通指针。 ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 数组指针不是直接可以用 指针指向数组首地址进行访问么? ")])),_:1}),(0,e.bF)(s,{avatar:"../../../../assets/emoji//bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 是的，实践证明确实首地址和整个数组地址一致，但你这个确实只是一个指向的是数组首元素的普通指针，看下面的程序调试图： ")])),_:1}),j,(0,e.bF)(s,{avatar:"../../../../assets/emoji//bqb (3).png",avatarWidth:40,alignLeft:""},{default:(0,e.k6)((()=>[(0,e.eW)(" 真正的数组指针长这样： ")])),_:1}),x,(0,e.bF)(p,{src:"../../../../assets/unrealgif/arrayptr.gif"}),F,(0,e.Lk)("p",null,[(0,e.Lk)("a",q,[(0,e.eW)("i++/++i"),(0,e.bF)(t)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",_,[(0,e.eW)("数组指针/指针数组"),(0,e.bF)(t)])]),(0,e.Lk)("p",null,[(0,e.Lk)("a",C,[(0,e.eW)("C语言基础---14.指针数组 & 数组指针---图解篇"),(0,e.bF)(t)])])])}]]),z=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html","title":"c++数组指针|指针数组","lang":"zh-CN","frontmatter":{"title":"c++数组指针|指针数组","order":4,"category":["c++"],"description":"概念 指针数组 UE中一堆对象指针组成的数组就是指针数组例如：TArray<ACameraActor*>Camera。（多直观易懂） 语法：typename* ArrayName[arraySize]; 在这个例子中，ptrArray 是一个包含三个元素的数组，每个元素都是一个指向整数的指针。通过将这些指针分别指向整数变量 a、b 和 c，我们形成了一...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/ptr_%E6%8C%87%E9%92%88_/3-Ptr-Array.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++数组指针|指针数组"}],["meta",{"property":"og:description","content":"概念 指针数组 UE中一堆对象指针组成的数组就是指针数组例如：TArray<ACameraActor*>Camera。（多直观易懂） 语法：typename* ArrayName[arraySize]; 在这个例子中，ptrArray 是一个包含三个元素的数组，每个元素都是一个指向整数的指针。通过将这些指针分别指向整数变量 a、b 和 c，我们形成了一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++数组指针|指针数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"指针数组","slug":"指针数组","link":"#指针数组","children":[]},{"level":2,"title":"i++与++i","slug":"i-与-i","link":"#i-与-i","children":[]},{"level":2,"title":"多维指针数组","slug":"多维指针数组","link":"#多维指针数组","children":[]},{"level":2,"title":"数组指针","slug":"数组指针","link":"#数组指针","children":[{"level":3,"title":"图中案例","slug":"图中案例","link":"#图中案例","children":[]}]},{"level":2,"title":"多维数组指针","slug":"多维数组指针","link":"#多维数组指针","children":[]},{"level":2,"title":"参考链接","slug":"参考链接","link":"#参考链接","children":[]}],"git":{"createdTime":1700738130000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":2},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":5.03,"words":1509},"filePathRelative":"language/cpp/BaseGuide[基础概念]/ptr[指针]/3-Ptr-Array.md","localizedDate":"2023年11月23日","excerpt":"\\n<h2>概念</h2>\\n<h2>指针数组</h2>\\n\\n\\n\\n<figure><figcaption></figcaption></figure>\\n\\n<blockquote>\\n<p>UE中一堆<code>对象指针</code>组成的<code>数组</code>就是<code>指针数组</code>例如：TArray&lt;ACameraActor*&gt;Camera。（多直观易懂）</p>\\n</blockquote>\\n<figure><figcaption></figcaption></figure>\\n<blockquote>\\n<p><strong>语法：<code>typename* ArrayName[arraySize]</code>;</strong></p>\\n</blockquote>","autoDesc":true}')}}]);