"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[8495],{29236:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var e=a(20641);const p=(0,e.Fv)('<ol><li><p><strong>解决循环依赖：</strong> 当两个或多个头文件相互包含时，可能会导致循环依赖的问题。通过使用前置声明，可以在一个头文件中声明另一个头文件中的类或函数，而不需要包含整个定义。</p><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 文件 A.h</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">A_H</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">A_H</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">;</span>  <span class="token comment">// 前置声明，避免循环依赖</span>\n\n<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>B<span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 文件 B.h</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">B_H</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">B_H</span></span>\n\n<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>  <span class="token comment">// 前置声明，避免循环依赖</span>\n\n<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span>A<span class="token operator">*</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>编译时间优化：</strong> 前置声明可以减少头文件的依赖性，从而降低编译时间。当一个头文件只需要知道某个标识符的存在而不需要知道其具体定义时，前置声明可以提高编译效率。</p></li><li><p><strong>减小编译单元之间的耦合性：</strong> 如果某个编译单元只需要了解另一个编译单元中的某个标识符，而不需要知道其具体实现细节，前置声明可以减小它们之间的耦合性。</p></li><li><p><strong>降低头文件的依赖性：</strong> 使用前置声明可以减少头文件之间的直接依赖关系，从而降低了代码的耦合性，使得代码更容易维护和理解。</p></li><li><p><strong>提高代码的可读性：</strong> 在头文件中只包含必要的信息，通过前置声明将不需要详细了解的信息推迟到实现文件中，有助于提高代码的可读性。</p></li></ol>',1),t={},o=(0,a(66262).A)(t,[["render",function(n,s){const a=(0,e.g2)("chatmessage");return(0,e.uX)(),(0,e.CE)("div",null,[(0,e.bF)(a,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,e.k6)((()=>[(0,e.eW)(" 在编程中，前置声明是指在使用某个标识符之前提前声明该标识符，而不是直接包含其定义。 前置声明可以应用于函数、类、结构体等标识符。以下是使用前置声明的一些好处： ")])),_:1}),p])}]]),c=JSON.parse('{"path":"/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html","title":"c++3.声明前置","lang":"zh-CN","frontmatter":{"title":"c++3.声明前置","order":3,"category":["c++"],"description":"解决循环依赖： 当两个或多个头文件相互包含时，可能会导致循环依赖的问题。通过使用前置声明，可以在一个头文件中声明另一个头文件中的类或函数，而不需要包含整个定义。 编译时间优化： 前置声明可以减少头文件的依赖性，从而降低编译时间。当一个头文件只需要知道某个标识符的存在而不需要知道其具体定义时，前置声明可以提高编译效率。 减小编译单元之间的耦合性： 如果某...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/language/cpp/BaseGuide_%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5_/3-Forward%20declaration.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++3.声明前置"}],["meta",{"property":"og:description","content":"解决循环依赖： 当两个或多个头文件相互包含时，可能会导致循环依赖的问题。通过使用前置声明，可以在一个头文件中声明另一个头文件中的类或函数，而不需要包含整个定义。 编译时间优化： 前置声明可以减少头文件的依赖性，从而降低编译时间。当一个头文件只需要知道某个标识符的存在而不需要知道其具体定义时，前置声明可以提高编译效率。 减小编译单元之间的耦合性： 如果某..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++3.声明前置\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1701893836000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.59,"words":477},"filePathRelative":"language/cpp/BaseGuide[基础概念]/3-Forward declaration.md","localizedDate":"2023年12月6日","excerpt":"\\n<ol>\\n<li>\\n<p><strong>解决循环依赖：</strong> 当两个或多个头文件相互包含时，可能会导致循环依赖的问题。通过使用前置声明，可以在一个头文件中声明另一个头文件中的类或函数，而不需要包含整个定义。</p>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// 文件 A.h</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">A_H</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">A_H</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">B</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 前置声明，避免循环依赖</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">foo</span><span class=\\"token punctuation\\">(</span>B<span class=\\"token operator\\">*</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n</code></pre></div><div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">// 文件 B.h</span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">ifndef</span> <span class=\\"token expression\\">B_H</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">B_H</span></span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">A</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 前置声明，避免循环依赖</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">B</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">bar</span><span class=\\"token punctuation\\">(</span>A<span class=\\"token operator\\">*</span> a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">endif</span></span>\\n</code></pre></div></li>\\n<li>\\n<p><strong>编译时间优化：</strong> 前置声明可以减少头文件的依赖性，从而降低编译时间。当一个头文件只需要知道某个标识符的存在而不需要知道其具体定义时，前置声明可以提高编译效率。</p>\\n</li>\\n<li>\\n<p><strong>减小编译单元之间的耦合性：</strong> 如果某个编译单元只需要了解另一个编译单元中的某个标识符，而不需要知道其具体实现细节，前置声明可以减小它们之间的耦合性。</p>\\n</li>\\n<li>\\n<p><strong>降低头文件的依赖性：</strong> 使用前置声明可以减少头文件之间的直接依赖关系，从而降低了代码的耦合性，使得代码更容易维护和理解。</p>\\n</li>\\n<li>\\n<p><strong>提高代码的可读性：</strong> 在头文件中只包含必要的信息，通过前置声明将不需要详细了解的信息推迟到实现文件中，有助于提高代码的可读性。</p>\\n</li>\\n</ol>","autoDesc":true}')}}]);