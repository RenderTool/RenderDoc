"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[9944],{62181:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>x,data:()=>W});var t=s(20641);const e=s.p+"assets/img/ptfunction.dfe36513.png",p=s.p+"assets/img/templatefunc.4826365a.png",o=s.p+"assets/img/array.da73db77.jpg",l=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//这是普通函数写法</span>\n<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//函数重载</span>\n<span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a <span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>\n <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),c=(0,t.Lk)("h2",{id:"函数模板",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#函数模板"},[(0,t.Lk)("span",null,"函数模板")])],-1),i=(0,t.Lk)("blockquote",null,[(0,t.Lk)("p",null,[(0,t.eW)("语法："),(0,t.Lk)("code",null,"template<typename T>")])],-1),u=(0,t.Lk)("h2",{id:"调用规则",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#调用规则"},[(0,t.Lk)("span",null,"调用规则")])],-1),r=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token comment">//普通函数</span>\n<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\nstd<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;调用普通函数&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n<span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\nT <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\nstd<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;调用模板&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),d=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:e,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),k=(0,t.Lk)("h3",{id:"_2-空模板参数列表强制使用模板-显式指定模板参数",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#_2-空模板参数列表强制使用模板-显式指定模板参数"},[(0,t.Lk)("span",null,"2. 空模板参数列表强制使用模板|显式指定模板参数")])],-1),m=(0,t.Lk)("p",null,[(0,t.eW)("很简单，调用时加一对"),(0,t.Lk)("code",null,"<>"),(0,t.eW)("即可。")],-1),v=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">max</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',2),b=(0,t.Fv)('<h3 id="_3-有更好的匹配时-优先使用模板-如-使用不同数据类型" tabindex="-1"><a class="header-anchor" href="#_3-有更好的匹配时-优先使用模板-如-使用不同数据类型"><span>3.有更好的匹配时，优先使用模板|如：使用不同数据类型</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">20.5</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 使用不同类型的参数，可能更容易匹配模板函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),g=(0,t.Fv)('<h3 id="_4-强制类型转换" tabindex="-1"><a class="header-anchor" href="#_4-强制类型转换"><span>4.强制类型转换</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 使用强制类型转换，优先选择模板函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-模板特化" tabindex="-1"><a class="header-anchor" href="#_5-模板特化"><span>5. 模板特化</span></a></h3>',3),h=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 使用不同类型的参数，可能更容易匹配模板函数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),y=(0,t.Lk)("figure",null,[(0,t.Lk)("img",{src:o,alt:"",tabindex:"0",loading:"lazy"}),(0,t.Lk)("figcaption")],-1),f=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n\n<span class="token comment">// 普通函数</span>\n<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;调用普通函数&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 模板函数</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\nT <span class="token function">max</span><span class="token punctuation">(</span>T a<span class="token punctuation">,</span> T b<span class="token punctuation">)</span> \n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;调用模板&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> a <span class="token operator">&gt;</span> b <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 模板特化用于比较数组大小</span>\n<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> size_t N<span class="token operator">&gt;</span>\nT <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">T</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">T</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;调用特化数组&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    T max_val <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max_val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            max_val <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> max_val<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>  <span class="token comment">// 调用特化数组，比较数组大小</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-类模板和函数模板区别" tabindex="-1"><a class="header-anchor" href="#_6-类模板和函数模板区别"><span>6. 类模板和函数模板区别</span></a></h3><blockquote><p>语法：<code>template&lt;typename T&gt; class</code></p></blockquote><table><thead><tr><th>特征</th><th>函数模板</th><th>类模板</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>创建泛型函数，处理多种数据类型</td><td>创建泛型类，处理多种数据类型</td></tr><tr><td><strong>定义方式</strong></td><td>使用 <code>template</code> 关键字定义，通常在函数声明或定义前加上模板声明</td><td>使用 <code>template</code> 关键字定义，通常在类声明或定义前加上模板声明</td></tr><tr><td><strong>实例化</strong></td><td>在使用函数时，根据传递的实际参数类型生成对应的函数实例。可以显式指定模板参数，也可以根据参数推断</td><td>在使用类时，通常需要显式指定模板参数，因为编译器不能总是从上下文中推断出所需的类型</td></tr><tr><td><strong>成员函数和成员变量的模板化</strong></td><td>可以模板化整个函数，也可以只模板化函数的部分</td><td>可以模板化整个类，包括成员函数和成员变量</td></tr></tbody></table><h3 id="类模板成员函数创建时机" tabindex="-1"><a class="header-anchor" href="#类模板成员函数创建时机"><span>类模板成员函数创建时机</span></a></h3>',5),w=(0,t.Fv)('<ul><li><p><strong>普通类：</strong></p><ul><li>成员函数的定义和实现通常在类的声明中完成。</li><li>当实例化一个普通类的对象时，编译器会在链接时生成相应的函数代码，并将其与类的实例链接在一起。</li><li>所有对象共享相同的函数实现。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 普通类</span>\n<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 函数实现</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>类模板：</strong></p><ul><li>成员函数的定义和实现通常也在类模板的声明中完成。</li><li>然而，由于类模板是泛型的，函数代码的实例化是在使用时进行的，即在实例化模板的特定类型时生成。</li><li>每个模板实例都有其独立的函数实现，针对特定的模板参数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 类模板</span>\n<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>\n<span class="token keyword">class</span> <span class="token class-name">MyTemplateClass</span> <span class="token punctuation">{</span>\n<span class="token keyword">public</span><span class="token operator">:</span>\n    <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 函数实现</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 实例化模板，生成特定类型的函数实现</span>\nMyTemplateClass<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> obj1<span class="token punctuation">;</span>\nMyTemplateClass<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> obj2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul>',1),_={},x=(0,s(66262).A)(_,[["render",function(n,a){const s=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 每一次增加一个数据类型，就得重写写一次函数，使得代码非常冗余，有没有办法改进？ ")])),_:1}),l,(0,t.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你可以使用函数模板。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 怎么用呢？ ")])),_:1}),c,i,(0,t.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 当然一些调用规则需要牢记 ")])),_:1}),u,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你觉得下面的函数会调用那个版本？ ")])),_:1}),r,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 我觉得应该会调用模板吧。 ")])),_:1}),(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 然而事实上是优先调用普通函数，有多个函数或模板可以匹配调用时，编译器会选择最特定的版本。 ")])),_:1}),d,(0,t.bF)(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 那么我怎么强制他使用我的模板版本重载呢？ ")])),_:1}),k,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[m])),_:1}),v,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 当然，这不是绝对的，如果有一个更好的匹配时，也会优先使用模板函数 ")])),_:1}),b,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 但需注意窄化转换。 ")])),_:1}),g,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 模板并不是万能的，就拿这个例子来说，我们传入数组你看会发生什么？ ")])),_:1}),h,(0,t.bF)(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 打印了一串地址耶！ ")])),_:1}),y,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 没错，这时候咱们就需要特殊的处理一下这个版本，让他可以传入数组。 ")])),_:1}),f,(0,t.bF)(s,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 类模板（Class Template）和普通类（Non-Template Class）之间的主要区别在于成员函数的实例化时机。 ")])),_:1}),w])}]]),W=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html","title":"c++1.template","lang":"zh-CN","frontmatter":{"title":"c++1.template","order":1,"category":["c++"],"description":"函数模板 语法：template<typename T> 调用规则 2. 空模板参数列表强制使用模板|显式指定模板参数 3.有更好的匹配时，优先使用模板|如：使用不同数据类型 4.强制类型转换 5. 模板特化 6. 类模板和函数模板区别 语法：template<typename T> class 类模板成员函数创建时机 普通类： 成员函数的定义和实现通...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/1-template.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++1.template"}],["meta",{"property":"og:description","content":"函数模板 语法：template<typename T> 调用规则 2. 空模板参数列表强制使用模板|显式指定模板参数 3.有更好的匹配时，优先使用模板|如：使用不同数据类型 4.强制类型转换 5. 模板特化 6. 类模板和函数模板区别 语法：template<typename T> class 类模板成员函数创建时机 普通类： 成员函数的定义和实现通..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++1.template\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"函数模板","slug":"函数模板","link":"#函数模板","children":[]},{"level":2,"title":"调用规则","slug":"调用规则","link":"#调用规则","children":[{"level":3,"title":"2. 空模板参数列表强制使用模板|显式指定模板参数","slug":"_2-空模板参数列表强制使用模板-显式指定模板参数","link":"#_2-空模板参数列表强制使用模板-显式指定模板参数","children":[]},{"level":3,"title":"3.有更好的匹配时，优先使用模板|如：使用不同数据类型","slug":"_3-有更好的匹配时-优先使用模板-如-使用不同数据类型","link":"#_3-有更好的匹配时-优先使用模板-如-使用不同数据类型","children":[]},{"level":3,"title":"4.强制类型转换","slug":"_4-强制类型转换","link":"#_4-强制类型转换","children":[]},{"level":3,"title":"5. 模板特化","slug":"_5-模板特化","link":"#_5-模板特化","children":[]},{"level":3,"title":"6. 类模板和函数模板区别","slug":"_6-类模板和函数模板区别","link":"#_6-类模板和函数模板区别","children":[]},{"level":3,"title":"类模板成员函数创建时机","slug":"类模板成员函数创建时机","link":"#类模板成员函数创建时机","children":[]}]}],"git":{"createdTime":1701893836000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":4.52,"words":1355},"filePathRelative":"language/cpp/stl[标准模板]/1-template.md","localizedDate":"2023年12月6日","excerpt":"\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">//这是普通函数写法</span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a <span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">&gt;</span> b <span class=\\"token operator\\">?</span> a <span class=\\"token operator\\">:</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//函数重载</span>\\n<span class=\\"token keyword\\">double</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> a <span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">&gt;</span> b <span class=\\"token operator\\">?</span> a <span class=\\"token operator\\">:</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}')}}]);