"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[4616],{36565:(t,e,a)=>{t.exports=a.p+"assets/img/GameMode.b89e4dd6.jpg"},49427:(t,e,a)=>{t.exports=a.p+"assets/img/gamemodeinclue.1dad98d5.jpg"},70062:(t,e,a)=>{a.r(e),a.d(e,{comp:()=>u,data:()=>m});var n=a(20641),s=a(36565),o=a(49427);const d=a.p+"assets/img/gamemodesuper.48429691.jpg",r=a.p+"assets/img/gamemodecpp2bp.5d3a956a.png",l=(0,n.Fv)('<h2 id="_1-新建gamemode类" tabindex="-1"><a class="header-anchor" href="#_1-新建gamemode类"><span>1. 新建GameMode类</span></a></h2><figure><img src="'+s+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>类别</th><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>APawn class</td><td>游戏中的角色</td><td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td></tr><tr><td>AHUD class</td><td>Heads-Up Display (HUD)</td><td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td></tr><tr><td>APlayerController class</td><td>玩家控制器</td><td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td></tr><tr><td>AGameState class</td><td>游戏状态</td><td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td></tr><tr><td>APlayerState class</td><td>玩家状态</td><td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td></tr><tr><td>ASpectatorPawn class</td><td>观察者角色</td><td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td></tr></tbody></table><h2 id="_2-写入对应的类" tabindex="-1"><a class="header-anchor" href="#_2-写入对应的类"><span>2. 写入对应的类</span></a></h2><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameMode/MenuPlayerController.h&quot;</span><span class="token comment">//引入对应头文件</span></span>\n<span class="token class-name">AMainMenuGameMode</span><span class="token double-colon punctuation">::</span><span class="token function">AMainMenuGameMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 设置默认的PlayerController类</span>\n    PlayerControllerClass <span class="token operator">=</span> <span class="token class-name">AMenuPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),i=(0,n.Fv)('<blockquote><p>以下截取自：GameModeBase.h,其他类类似写法。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\t<span class="token comment">/** The class of PlayerController to spawn for players logging in. */</span>\n\t<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> NoClear<span class="token punctuation">,</span> BlueprintReadOnly<span class="token punctuation">,</span> Category<span class="token operator">=</span>Classes<span class="token punctuation">)</span>\n\tTSubclassOf<span class="token operator">&lt;</span>APlayerController<span class="token operator">&gt;</span> PlayerControllerClass<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-编译使用or派生蓝图" tabindex="-1"><a class="header-anchor" href="#_3-编译使用or派生蓝图"><span>3. 编译使用OR派生蓝图</span></a></h2>',4),p=(0,n.Lk)("figure",null,[(0,n.Lk)("img",{src:r,alt:"",tabindex:"0",loading:"lazy"}),(0,n.Lk)("figcaption")],-1),c={},u=(0,a(66262).A)(c,[["render",function(t,e){const a=(0,n.g2)("chatmessage");return(0,n.uX)(),(0,n.CE)("div",null,[(0,n.bF)(a,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 使用C++来绑定GameMode的方法 ")])),_:1}),l,(0,n.bF)(a,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 这里的PlayerControllerClass是GameMode父类中定义的subclass(子类) ")])),_:1}),i,(0,n.bF)(a,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:(0,n.k6)((()=>[(0,n.eW)(" 可以在c++类目录中看到这个GameMode类，也可以再次基于这个GameMode派生蓝图类。 ")])),_:1}),p])}]]),m=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html","title":"c2.GameMode|游戏模式","lang":"zh-CN","frontmatter":{"title":"c2.GameMode|游戏模式","order":200,"category":["u++"],"description":"1. 新建GameMode类 2. 写入对应的类 以下截取自：GameModeBase.h,其他类类似写法。 3. 编译使用OR派生蓝图","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/2-GameMode.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c2.GameMode|游戏模式"}],["meta",{"property":"og:description","content":"1. 新建GameMode类 2. 写入对应的类 以下截取自：GameModeBase.h,其他类类似写法。 3. 编译使用OR派生蓝图"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-03T18:34:11.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-03T18:34:11.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c2.GameMode|游戏模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-03T18:34:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"1. 新建GameMode类","slug":"_1-新建gamemode类","link":"#_1-新建gamemode类","children":[]},{"level":2,"title":"2. 写入对应的类","slug":"_2-写入对应的类","link":"#_2-写入对应的类","children":[]},{"level":2,"title":"3. 编译使用OR派生蓝图","slug":"_3-编译使用or派生蓝图","link":"#_3-编译使用or派生蓝图","children":[]}],"git":{"createdTime":1704306851000,"updatedTime":1704306851000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.47,"words":440},"filePathRelative":"unreal/core[核心]/2-GameMode.md","localizedDate":"2024年1月3日","excerpt":"\\n<h2>1. 新建GameMode类</h2>\\n<figure><figcaption></figcaption></figure>\\n<figure><figcaption></figcaption></figure>\\n<table>\\n<thead>\\n<tr>\\n<th>类别</th>\\n<th>类名</th>\\n<th>用途</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>APawn class</td>\\n<td>游戏中的角色</td>\\n<td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td>\\n</tr>\\n<tr>\\n<td>AHUD class</td>\\n<td>Heads-Up Display (HUD)</td>\\n<td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td>\\n</tr>\\n<tr>\\n<td>APlayerController class</td>\\n<td>玩家控制器</td>\\n<td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td>\\n</tr>\\n<tr>\\n<td>AGameState class</td>\\n<td>游戏状态</td>\\n<td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td>\\n</tr>\\n<tr>\\n<td>APlayerState class</td>\\n<td>玩家状态</td>\\n<td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td>\\n</tr>\\n<tr>\\n<td>ASpectatorPawn class</td>\\n<td>观察者角色</td>\\n<td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);