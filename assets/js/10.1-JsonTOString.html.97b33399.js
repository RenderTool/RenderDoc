"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[8115],{83103:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>i,data:()=>l});var t=a(20641);const e=a.p+"assets/img/json5.f1125b9f.png",p=a.p+"assets/img/json6.9ef66e19.png",o=(0,t.Fv)('<figure><img src="'+e+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-找到定义" tabindex="-1"><a class="header-anchor" href="#_1-找到定义"><span>1.找到定义</span></a></h3><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-发现是宏函数-使用了通配符-所以要找到具体的定义函数cpp" tabindex="-1"><a class="header-anchor" href="#_2-发现是宏函数-使用了通配符-所以要找到具体的定义函数cpp"><span>2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code> P_NATIVE_BEGIN\n    bResult <span class="token operator">=</span> <span class="token class-name">FJsonObjectConverter</span><span class="token double-colon punctuation">::</span><span class="token function">UStructToJsonObjectString</span><span class="token punctuation">(</span>StructProperty<span class="token operator">-&gt;</span>Struct<span class="token punctuation">,</span> ValuePtr<span class="token punctuation">,</span> OutJsonString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    P_NATIVE_END\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-引入具体的头文件" tabindex="-1"><a class="header-anchor" href="#_3-引入具体的头文件"><span>3. 引入具体的头文件</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JsonObjectWrapper.h&quot;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;JsonObjectWrapper.h&quot;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-实现函数" tabindex="-1"><a class="header-anchor" href="#_4-实现函数"><span>4.实现函数</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">//jsontostring</span>\n<span class="token keyword">bool</span> <span class="token class-name">FJsonObjectWrapper</span><span class="token double-colon punctuation">::</span><span class="token function">JsonObjectToString</span><span class="token punctuation">(</span>FString<span class="token operator">&amp;</span> Str<span class="token punctuation">)</span> <span class="token keyword">const</span>\n<span class="token punctuation">{</span>\n    TSharedRef<span class="token operator">&lt;</span>TJsonWriter<span class="token operator">&lt;</span>TCHAR<span class="token punctuation">,</span> TCondensedJsonPrintPolicy<span class="token operator">&lt;</span>TCHAR<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> JsonWriter <span class="token operator">=</span> <span class="token class-name">TJsonWriterFactory</span><span class="token operator">&lt;</span>TCHAR<span class="token punctuation">,</span> TCondensedJsonPrintPolicy<span class="token operator">&lt;</span>TCHAR<span class="token operator">&gt;&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Str<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">FJsonSerializer</span><span class="token double-colon punctuation">::</span><span class="token function">Serialize</span><span class="token punctuation">(</span>JsonObject<span class="token punctuation">.</span><span class="token function">ToSharedRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> JsonWriter<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//jsonfromstring</span>\n<span class="token keyword">bool</span> <span class="token class-name">FJsonObjectWrapper</span><span class="token double-colon punctuation">::</span><span class="token function">JsonObjectFromString</span><span class="token punctuation">(</span><span class="token keyword">const</span> FString<span class="token operator">&amp;</span> Str<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    TSharedRef<span class="token operator">&lt;</span>TJsonReader<span class="token operator">&lt;</span><span class="token operator">&gt;&gt;</span> JsonReader <span class="token operator">=</span> <span class="token class-name">TJsonReaderFactory</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">Create</span><span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">FJsonSerializer</span><span class="token double-colon punctuation">::</span><span class="token function">Deserialize</span><span class="token punctuation">(</span>JsonReader<span class="token punctuation">,</span> JsonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',9),c={},i=(0,a(66262).A)(c,[["render",function(n,s){const a=(0,t.g2)("chatmessage");return(0,t.uX)(),(0,t.CE)("div",null,[(0,t.bF)(a,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" Json和结构体互转 ")])),_:1}),o])}]]),l=JSON.parse('{"path":"/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html","title":"c10.1JsonToString","lang":"zh-CN","frontmatter":{"title":"c10.1JsonToString","order":1001,"category":["u++"],"description":"1.找到定义 2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp 3. 引入具体的头文件 4.实现函数","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/unreal/core_%E6%A0%B8%E5%BF%83_/10.1-JsonTOString.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c10.1JsonToString"}],["meta",{"property":"og:description","content":"1.找到定义 2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp 3. 引入具体的头文件 4.实现函数"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-31T09:49:23.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-10-31T09:49:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c10.1JsonToString\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-31T09:49:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"1.找到定义","slug":"_1-找到定义","link":"#_1-找到定义","children":[]},{"level":3,"title":"2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp","slug":"_2-发现是宏函数-使用了通配符-所以要找到具体的定义函数cpp","link":"#_2-发现是宏函数-使用了通配符-所以要找到具体的定义函数cpp","children":[]},{"level":3,"title":"3. 引入具体的头文件","slug":"_3-引入具体的头文件","link":"#_3-引入具体的头文件","children":[]},{"level":3,"title":"4.实现函数","slug":"_4-实现函数","link":"#_4-实现函数","children":[]}],"git":{"createdTime":1705946800000,"updatedTime":1730368163000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":3}]},"readingTime":{"minutes":0.43,"words":130},"filePathRelative":"unreal/core[核心]/10.1-JsonTOString.md","localizedDate":"2024年1月22日","excerpt":"\\n<figure><figcaption></figcaption></figure>\\n<h3>1.找到定义</h3>\\n<figure><figcaption></figcaption></figure>\\n<h3>2. 发现是宏函数，使用了通配符，所以要找到具体的定义函数cpp</h3>\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code> P_NATIVE_BEGIN\\n    bResult <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">FJsonObjectConverter</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">UStructToJsonObjectString</span><span class=\\"token punctuation\\">(</span>StructProperty<span class=\\"token operator\\">-&gt;</span>Struct<span class=\\"token punctuation\\">,</span> ValuePtr<span class=\\"token punctuation\\">,</span> OutJsonString<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    P_NATIVE_END\\n</code></pre></div>","autoDesc":true}')}}]);