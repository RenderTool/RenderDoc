"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[3935],{35523:(n,a,s)=>{s.r(a),s.d(a,{comp:()=>d,data:()=>k});var t=s(20641);const e=(0,t.Lk)("h2",{id:"导-案例1-收集datatable表格中的名称",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#导-案例1-收集datatable表格中的名称"},[(0,t.Lk)("span",null,"导|案例1- 收集Datatable表格中的名称")])],-1),p=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">)</span>\n<span class="token keyword">bool</span> bAutoMatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">)</span>\nTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> CollectedNames<span class="token punctuation">;</span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadWrite<span class="token punctuation">,</span> EditAnywhere<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;DataTable&quot;</span><span class="token punctuation">)</span>\nTObjectPtr<span class="token operator">&lt;</span><span class="token keyword">const</span> UDataTable<span class="token operator">&gt;</span> DataTable<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inlineeditconditiontoggle" tabindex="-1"><a class="header-anchor" href="#inlineeditconditiontoggle"><span>InlineEditConditionToggle</span></a></h3>',2),o=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>InlineEditConditionToggle<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">bool</span> bAutoMatching <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">(</span>EditCondition<span class="token operator">=</span><span class="token string">&quot;bAsPackageName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> CollectedNames<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),c=(0,t.Lk)("h3",{id:"posteditchangeproperty",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#posteditchangeproperty"},[(0,t.Lk)("span",null,"PostEditChangeProperty")])],-1),i=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">WITH_EDITOR</span></span>\n<span class="token keyword">void</span> <span class="token class-name">YourClass</span><span class="token double-colon punctuation">::</span><span class="token function">PostEditChangeProperty</span><span class="token punctuation">(</span>FPropertyChangedEvent<span class="token operator">&amp;</span> PropertyChangedEvent<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">PostEditChangeProperty</span><span class="token punctuation">(</span>PropertyChangedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    FName PropertyName <span class="token operator">=</span> PropertyChangedEvent<span class="token punctuation">.</span><span class="token function">GetPropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n\t<span class="token comment">// 处理 AutoMatching 逻辑</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>PropertyName <span class="token operator">==</span> <span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>UMultiDataTableRows<span class="token punctuation">,</span> bAutoMatching<span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\tPropertyName <span class="token operator">==</span> <span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>UMultiDataTableRows<span class="token punctuation">,</span> MatchingField<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bAutoMatching<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tRowNames<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t\t\t<span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span><span class="token operator">&amp;</span> CollectedNames <span class="token operator">=</span> <span class="token function">GetRowNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>CollectedNames<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n\t\t\t\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>MatchingField<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\tRowNames<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>CollectedNames<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token keyword">else</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> FName<span class="token operator">&amp;</span> Name <span class="token operator">:</span> CollectedNames<span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>Name<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">StartsWith</span><span class="token punctuation">(</span>MatchingField<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">{</span>\n\t\t\t\t\t\tRowNames<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t\t<span class="token punctuation">}</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),l=(0,t.Lk)("h2",{id:"案例2-预览包名",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#案例2-预览包名"},[(0,t.Lk)("span",null,"案例2- 预览包名")])],-1),u=(0,t.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;PackageName&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">bool</span> bAsPackageName <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  \n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;PackageName&quot;</span><span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">(</span>EditCondition<span class="token operator">=</span><span class="token string">&quot;bAsPackageName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    FString PackageNamePrefix<span class="token punctuation">;</span>\n\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> BlueprintReadWrite<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;PackageName&quot;</span><span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">(</span>EditCondition<span class="token operator">=</span><span class="token string">&quot;bAsPackageName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    FString PackageNameSuffix<span class="token punctuation">;</span>\n\n    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintReadOnly<span class="token punctuation">,</span>VisibleAnywhere<span class="token punctuation">,</span>Category <span class="token operator">=</span> <span class="token string">&quot;PackageName&quot;</span><span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">(</span>EditCondition<span class="token operator">=</span><span class="token string">&quot;bAsPackageName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    FString PackageNamePreview<span class="token punctuation">;</span>\n    \n<span class="token keyword">void</span> <span class="token class-name">UMultiDataTableRows</span><span class="token double-colon punctuation">::</span><span class="token function">PostEditChangeProperty</span><span class="token punctuation">(</span>FPropertyChangedEvent<span class="token operator">&amp;</span> PropertyChangedEvent<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">PostEditChangeProperty</span><span class="token punctuation">(</span>PropertyChangedEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\n\t<span class="token keyword">const</span> FName PropertyName <span class="token operator">=</span> PropertyChangedEvent<span class="token punctuation">.</span><span class="token function">GetPropertyName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>PropertyName <span class="token operator">==</span> <span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>UMultiDataTableRows<span class="token punctuation">,</span> bAsPackageName<span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\tPropertyName <span class="token operator">==</span> <span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>UMultiDataTableRows<span class="token punctuation">,</span> PackageNamePrefix<span class="token punctuation">)</span> <span class="token operator">||</span>\n\t\tPropertyName <span class="token operator">==</span> <span class="token function">GET_MEMBER_NAME_CHECKED</span><span class="token punctuation">(</span>UMultiDataTableRows<span class="token punctuation">,</span> PackageNameSuffix<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span>bAsPackageName <span class="token operator">&amp;&amp;</span> DataTable<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">{</span>\n\t\t\tTArray<span class="token operator">&lt;</span>FName<span class="token operator">&gt;</span> RowNamesList <span class="token operator">=</span> DataTable<span class="token operator">-&gt;</span><span class="token function">GetRowNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RowNamesList<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">{</span>\n\t\t\t\tPackageNamePreview <span class="token operator">=</span> PackageNamePrefix <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> RowNamesList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> PackageNameSuffix<span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),r={},d=(0,s(66262).A)(r,[["render",function(n,a){const s=(0,t.g2)("chatmessage"),r=(0,t.g2)("gifwithbutton");return(0,t.uX)(),(0,t.CE)("div",null,[e,(0,t.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" Dady!我能不能根据某个变量真假来执行某些操作？例如：下面的bAutoMatching为真时，自动收集表格中的名称 ")])),_:1}),p,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 如果是单纯的显示CollectedNames这个字段，可以用之前提到过的`InlineEditConditionToggle`。 ")])),_:1}),o,(0,t.bF)(s,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 额！我说的是收集表格名称 ")])),_:1}),c,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 得用编辑器钩子PostEditChangeProperty ")])),_:1}),(0,t.bF)(r,{src:"../../assets/unrealgif/hpup51.gif"}),i,(0,t.bF)(s,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:(0,t.k6)((()=>[(0,t.eW)(" 也就是说在bAutoMatching这个变量发送变化时会触发下面的事件是吧！ ")])),_:1}),(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 是的，这也可以将一些原本手动的逻辑变成自动逻辑。 ")])),_:1}),l,(0,t.bF)(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:(0,t.k6)((()=>[(0,t.eW)(" 你甚至可以写一个动态的Log系统 ")])),_:1}),(0,t.bF)(r,{src:"../../assets/unrealgif/hpup50.gif"}),u])}]]),k=JSON.parse('{"path":"/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/01-PostEditChangeProperty.html","title":"ED01.PostEditChangeProperty","lang":"zh-CN","frontmatter":{"title":"ED01.PostEditChangeProperty","order":1,"category":["u++"],"description":"导|案例1- 收集Datatable表格中的名称 InlineEditConditionToggle PostEditChangeProperty","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/editor_%E7%BC%96%E8%BE%91%E5%99%A8_/01-PostEditChangeProperty.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"ED01.PostEditChangeProperty"}],["meta",{"property":"og:description","content":"导|案例1- 收集Datatable表格中的名称 InlineEditConditionToggle PostEditChangeProperty"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-29T22:17:54.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2025-03-29T22:17:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ED01.PostEditChangeProperty\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-29T22:17:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"导|案例1- 收集Datatable表格中的名称","slug":"导-案例1-收集datatable表格中的名称","link":"#导-案例1-收集datatable表格中的名称","children":[{"level":3,"title":"InlineEditConditionToggle","slug":"inlineeditconditiontoggle","link":"#inlineeditconditiontoggle","children":[]},{"level":3,"title":"PostEditChangeProperty","slug":"posteditchangeproperty","link":"#posteditchangeproperty","children":[]}]},{"level":2,"title":"案例2- 预览包名","slug":"案例2-预览包名","link":"#案例2-预览包名","children":[]}],"git":{"createdTime":1743286674000,"updatedTime":1743286674000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.37,"words":411},"filePathRelative":"unreal/editor[编辑器]/01-PostEditChangeProperty.md","localizedDate":"2025年3月29日","excerpt":"<h2>导|案例1- 收集Datatable表格中的名称</h2>\\n\\n<div class=\\"language-cpp\\" data-ext=\\"cpp\\" data-title=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">bool</span> bAutoMatching <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>EditAnywhere<span class=\\"token punctuation\\">,</span> BlueprintReadWrite<span class=\\"token punctuation\\">)</span>\\nTArray<span class=\\"token operator\\">&lt;</span>FName<span class=\\"token operator\\">&gt;</span> CollectedNames<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">UPROPERTY</span><span class=\\"token punctuation\\">(</span>BlueprintReadWrite<span class=\\"token punctuation\\">,</span> EditAnywhere<span class=\\"token punctuation\\">,</span> Category <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"DataTable\\"</span><span class=\\"token punctuation\\">)</span>\\nTObjectPtr<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">const</span> UDataTable<span class=\\"token operator\\">&gt;</span> DataTable<span class=\\"token punctuation\\">;</span>\\n\\n</code></pre></div>","autoDesc":true}')}}]);