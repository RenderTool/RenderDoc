"use strict";(self.webpackChunkrenderdoc=self.webpackChunkrenderdoc||[]).push([[1606],{49813:(n,t,s)=>{s.r(t),s.d(t,{comp:()=>m,data:()=>b});var a=s(20641);const e=(0,a.Fv)('<table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>ofstream</td><td>输出文件流，用于创建文件并向文件写入信息。</td></tr><tr><td>ifstream</td><td>输入文件流，用于从文件读取信息。</td></tr><tr><td>fstream</td><td>文件流，同时具有 ofstream 和 ifstream 功能，可以创建文件，向文件写入信息，从文件读取信息。</td></tr></tbody></table><table><thead><tr><th>步骤</th><th>操作</th><th>代码示例</th></tr></thead><tbody><tr><td>1</td><td>包含头文件</td><td><code>#include &lt;fstream&gt;</code></td></tr><tr><td>2</td><td>打开文件（文件输入流）</td><td><code>std::ifstream inputFile(&quot;input.txt&quot;);</code></td></tr><tr><td>3</td><td>打开文件（文件输出流）</td><td><code>std::ofstream outputFile(&quot;output.txt&quot;);</code></td></tr><tr><td>4</td><td>打开文件（文件输入和输出流）</td><td>`std::fstream file(&quot;data.txt&quot;, std::ios::in</td></tr><tr><td>5</td><td>检查文件是否成功打开</td><td><code>if (inputFile.is_open()) { /* 文件成功打开，进行读取操作 */ }</code></td></tr><tr><td>6</td><td>读取操作（从文件中读取数据）</td><td><code>int value; inputFile &gt;&gt; value;</code></td></tr><tr><td>7</td><td>写入操作（向文件中写入数据）</td><td><code>outputFile &lt;&lt; &quot;Hello, File!&quot;;</code></td></tr><tr><td>8</td><td>读写操作（文件输入和输出流的读写操作）</td><td><code>file &gt;&gt; value; file &lt;&lt; &quot;Data&quot;;</code></td></tr><tr><td>9</td><td>关闭文件流</td><td><code>inputFile.close(); outputFile.close(); file.close();</code></td></tr></tbody></table><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><h3 id="_1-包含头文件" tabindex="-1"><a class="header-anchor" href="#_1-包含头文件"><span>1. <strong>包含头文件：</strong></span></a></h3>',4),o=(0,a.Lk)("p",null,[(0,a.eW)("首先，你需要包含 "),(0,a.Lk)("code",null,"<fstream>"),(0,a.eW)(" 头文件。")],-1),p=(0,a.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-打开文件" tabindex="-1"><a class="header-anchor" href="#_2-打开文件"><span>2. <strong>打开文件：</strong></span></a></h3>',2),l=(0,a.Lk)("p",null,[(0,a.eW)("使用文件流对象打开要读取或写入的文件。对于输入流（读取文件），使用 "),(0,a.Lk)("code",null,"ifstream"),(0,a.eW)("，对于输出流（写入文件），使用 "),(0,a.Lk)("code",null,"ofstream"),(0,a.eW)("。")],-1),c=(0,a.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token comment">// 文件输入流</span>\nstd<span class="token double-colon punctuation">::</span>ifstream <span class="token function">inputFile</span><span class="token punctuation">(</span><span class="token string">&quot;input.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 文件输出流</span>\nstd<span class="token double-colon punctuation">::</span>ofstream <span class="token function">outputFile</span><span class="token punctuation">(</span><span class="token string">&quot;output.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 文件输入和输出流</span>\nstd<span class="token double-colon punctuation">::</span>fstream <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;data.txt&quot;</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>in <span class="token operator">|</span> std<span class="token double-colon punctuation">::</span>ios<span class="token double-colon punctuation">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述代码中，<code>inputFile</code> 用于读取 &quot;input.txt&quot; 文件，<code>outputFile</code> 用于写入 &quot;output.txt&quot; 文件，而 <code>file</code> 同时用于读取和写入 &quot;data.txt&quot; 文件。</p><h3 id="_3-检查文件是否成功打开" tabindex="-1"><a class="header-anchor" href="#_3-检查文件是否成功打开"><span>3. <strong>检查文件是否成功打开：</strong></span></a></h3>',3),i=(0,a.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>inputFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 文件成功打开，进行读取操作</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 文件打开失败，处理错误</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-读取和写入操作" tabindex="-1"><a class="header-anchor" href="#_4-读取和写入操作"><span>4. <strong>读取和写入操作：</strong></span></a></h3>',2),d=(0,a.Lk)("p",null,[(0,a.eW)("对于输入流，你可以使用类似 "),(0,a.Lk)("code",null,">>"),(0,a.eW)(" 运算符进行从文件读取的操作。对于输出流，你可以使用 "),(0,a.Lk)("code",null,"<<"),(0,a.eW)(" 运算符进行向文件写入的操作。")],-1),u=(0,a.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> value<span class="token punctuation">;</span>\ninputFile <span class="token operator">&gt;&gt;</span> value<span class="token punctuation">;</span> <span class="token comment">// 从文件读取一个整数</span>\n\noutputFile <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Hello, File!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 向文件写入字符串</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于文件输入和输出流，你可以使用 <code>&lt;&lt;</code> 和 <code>&gt;&gt;</code> 运算符进行读取和写入操作。</p><h3 id="_5-关闭文件" tabindex="-1"><a class="header-anchor" href="#_5-关闭文件"><span>5. <strong>关闭文件：</strong></span></a></h3>',3),r=(0,a.Fv)('<div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code>inputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\noutputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',1),k=(0,a.Fv)('<h3 id="完整案例" tabindex="-1"><a class="header-anchor" href="#完整案例"><span>完整案例</span></a></h3><div class="language-cpp line-numbers-mode" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream&gt;</span></span>\n\n<span class="token comment">// 读取文件函数</span>\nstd<span class="token double-colon punctuation">::</span>string <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>ifstream <span class="token function">inputFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 检查文件是否成功打开</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>string text<span class="token punctuation">;</span>\n\n        <span class="token comment">// 从文件读取内容</span>\n        inputFile <span class="token operator">&gt;&gt;</span> text<span class="token punctuation">;</span>\n\n        <span class="token comment">// 关闭文件流</span>\n        inputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> text<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 文件打开失败，处理错误</span>\n        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error opening file.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 写入文件函数</span>\n<span class="token keyword">void</span> <span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> filePath<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>ofstream <span class="token function">outputFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 检查文件是否成功打开</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 向文件写入内容</span>\n        outputFile <span class="token operator">&lt;&lt;</span> content<span class="token punctuation">;</span>\n\n        <span class="token comment">// 关闭文件流</span>\n        outputFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 文件打开失败，处理错误</span>\n        std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Error opening file.&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    std<span class="token double-colon punctuation">::</span>string filePath<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入要打开的文件地址例如 C:\\\\test.txt&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> filePath<span class="token punctuation">;</span>\n\n    <span class="token comment">// 读取文件</span>\n    std<span class="token double-colon punctuation">::</span>string content <span class="token operator">=</span> <span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>content<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Read value from file: &quot;</span> <span class="token operator">&lt;&lt;</span> content <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 写入文件</span>\n    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;输入写入的内容：&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>string inputContent<span class="token punctuation">;</span>\n    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> inputContent<span class="token punctuation">;</span>\n    <span class="token function">writeFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> inputContent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),v={},m=(0,s(66262).A)(v,[["render",function(n,t){const s=(0,a.g2)("chatmessage");return(0,a.uX)(),(0,a.CE)("div",null,[(0,a.bF)(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:(0,a.k6)((()=>[(0,a.eW)(" C++模板中有没有可以对文件读写操作的模板类？ ")])),_:1}),(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 有啊，fstream就是 ")])),_:1}),e,(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[o])),_:1}),p,(0,a.bF)(s,{avatar:"../../../assets/emoji/new5.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[l])),_:1}),c,(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 在打开文件后，你应该检查文件是否成功打开。如果文件打开失败，可能是因为文件不存在或者没有读写权限。 ")])),_:1}),i,(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[d])),_:1}),u,(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 在完成文件操作后，记得关闭文件流。这有助于释放相关资源。 ")])),_:1}),r,(0,a.bF)(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:(0,a.k6)((()=>[(0,a.eW)(" 当对象被销毁时，文件流也会自动关闭，但显式关闭文件是个好的实践，特别是在程序较大或长时间运行时。 ")])),_:1}),k])}]]),b=JSON.parse('{"path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html","title":"c++5.fstream|文件操作","lang":"zh-CN","frontmatter":{"title":"c++5.fstream|文件操作","order":5,"category":["c++"],"description":"基本用法 1. 包含头文件： 2. 打开文件： 在上述代码中，inputFile 用于读取 \\"input.txt\\" 文件，outputFile 用于写入 \\"output.txt\\" 文件，而 file 同时用于读取和写入 \\"data.txt\\" 文件。 3. 检查文件是否成功打开： 4. 读取和写入操作： 对于文件输入和输出流，你可以使用 << 和 >> ...","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/5-fstream.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++5.fstream|文件操作"}],["meta",{"property":"og:description","content":"基本用法 1. 包含头文件： 2. 打开文件： 在上述代码中，inputFile 用于读取 \\"input.txt\\" 文件，outputFile 用于写入 \\"output.txt\\" 文件，而 file 同时用于读取和写入 \\"data.txt\\" 文件。 3. 检查文件是否成功打开： 4. 读取和写入操作： 对于文件输入和输出流，你可以使用 << 和 >> ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++5.fstream|文件操作\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[{"level":3,"title":"1. 包含头文件：","slug":"_1-包含头文件","link":"#_1-包含头文件","children":[]},{"level":3,"title":"2. 打开文件：","slug":"_2-打开文件","link":"#_2-打开文件","children":[]},{"level":3,"title":"3. 检查文件是否成功打开：","slug":"_3-检查文件是否成功打开","link":"#_3-检查文件是否成功打开","children":[]},{"level":3,"title":"4. 读取和写入操作：","slug":"_4-读取和写入操作","link":"#_4-读取和写入操作","children":[]},{"level":3,"title":"5. 关闭文件：","slug":"_5-关闭文件","link":"#_5-关闭文件","children":[]},{"level":3,"title":"完整案例","slug":"完整案例","link":"#完整案例","children":[]}]}],"git":{"createdTime":1703074087000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.23,"words":969},"filePathRelative":"language/cpp/stl[标准模板]/5-fstream.md","localizedDate":"2023年12月20日","excerpt":"\\n\\n<table>\\n<thead>\\n<tr>\\n<th>数据类型</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>ofstream</td>\\n<td>输出文件流，用于创建文件并向文件写入信息。</td>\\n</tr>\\n<tr>\\n<td>ifstream</td>\\n<td>输入文件流，用于从文件读取信息。</td>\\n</tr>\\n<tr>\\n<td>fstream</td>\\n<td>文件流，同时具有 ofstream 和 ifstream 功能，可以创建文件，向文件写入信息，从文件读取信息。</td>\\n</tr>\\n</tbody>\\n</table>\\n<table>\\n<thead>\\n<tr>\\n<th>步骤</th>\\n<th>操作</th>\\n<th>代码示例</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>1</td>\\n<td>包含头文件</td>\\n<td><code>#include &lt;fstream&gt;</code></td>\\n</tr>\\n<tr>\\n<td>2</td>\\n<td>打开文件（文件输入流）</td>\\n<td><code>std::ifstream inputFile(\\"input.txt\\");</code></td>\\n</tr>\\n<tr>\\n<td>3</td>\\n<td>打开文件（文件输出流）</td>\\n<td><code>std::ofstream outputFile(\\"output.txt\\");</code></td>\\n</tr>\\n<tr>\\n<td>4</td>\\n<td>打开文件（文件输入和输出流）</td>\\n<td>`std::fstream file(\\"data.txt\\", std::ios::in</td>\\n</tr>\\n<tr>\\n<td>5</td>\\n<td>检查文件是否成功打开</td>\\n<td><code>if (inputFile.is_open()) { /* 文件成功打开，进行读取操作 */ }</code></td>\\n</tr>\\n<tr>\\n<td>6</td>\\n<td>读取操作（从文件中读取数据）</td>\\n<td><code>int value; inputFile &gt;&gt; value;</code></td>\\n</tr>\\n<tr>\\n<td>7</td>\\n<td>写入操作（向文件中写入数据）</td>\\n<td><code>outputFile &lt;&lt; \\"Hello, File!\\";</code></td>\\n</tr>\\n<tr>\\n<td>8</td>\\n<td>读写操作（文件输入和输出流的读写操作）</td>\\n<td><code>file &gt;&gt; value; file &lt;&lt; \\"Data\\";</code></td>\\n</tr>\\n<tr>\\n<td>9</td>\\n<td>关闭文件流</td>\\n<td><code>inputFile.close(); outputFile.close(); file.close();</code></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}')}}]);