const e=JSON.parse('{"key":"v-2ee2573a","path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html","title":"c++3.new|delete|malloc|free","lang":"zh-CN","frontmatter":{"title":"c++3.new|delete|malloc|free","order":3,"category":["c++"],"description":"new 和 delete（C++ 中使用） new： new 是 C++ 中的关键字，用于在堆上动态分配内存，并返回分配的内存的地址。new 还会调用对象的构造函数，用于在分配的内存中创建对象。 int* myInt = new int; // 动态分配一个 int int* myArray = new int[10]; // 动态分配一个 int 数组 MyClass* myObject = new MyClass(); // 动态分配一个 MyClass 对象 delete： delete 用于释放使用 new 分配的内存，同时调用对象的析构函数以进行清理。如果忘记使用 delete，可能导致内存泄漏。 delete myInt; // 释放动态分配的 int delete myObject; // 释放动态分配的 MyClass 对象 delete[] myArray; // 数组的delete格式比较特殊","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/3-Keywords%20new-delete-malloc-free.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++3.new|delete|malloc|free"}],["meta",{"property":"og:description","content":"new 和 delete（C++ 中使用） new： new 是 C++ 中的关键字，用于在堆上动态分配内存，并返回分配的内存的地址。new 还会调用对象的构造函数，用于在分配的内存中创建对象。 int* myInt = new int; // 动态分配一个 int int* myArray = new int[10]; // 动态分配一个 int 数组 MyClass* myObject = new MyClass(); // 动态分配一个 MyClass 对象 delete： delete 用于释放使用 new 分配的内存，同时调用对象的析构函数以进行清理。如果忘记使用 delete，可能导致内存泄漏。 delete myInt; // 释放动态分配的 int delete myObject; // 释放动态分配的 MyClass 对象 delete[] myArray; // 数组的delete格式比较特殊"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-20T12:08:07.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-12-20T12:08:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++3.new|delete|malloc|free\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-20T12:08:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"new 和 delete（C++ 中使用）","slug":"new-和-delete-c-中使用","link":"#new-和-delete-c-中使用","children":[]},{"level":3,"title":"malloc 和 free（C 中使用）","slug":"malloc-和-free-c-中使用","link":"#malloc-和-free-c-中使用","children":[]},{"level":3,"title":"区别和注意事项：","slug":"区别和注意事项","link":"#区别和注意事项","children":[]}],"git":{"createdTime":1700738130000,"updatedTime":1703074087000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":3}]},"readingTime":{"minutes":3.03,"words":910},"filePathRelative":"language/cpp/keywords[关键字]/3-Keywords new-delete-malloc-free.md","localizedDate":"2023年11月23日","excerpt":"\\n<h3> <code>new</code> 和 <code>delete</code>（C++ 中使用）</h3>\\n<ol>\\n<li>\\n<p><strong><code>new</code>：</strong></p>\\n<ul>\\n<li>\\n<p><code>new</code> 是 C++ 中的关键字，用于在堆上动态分配内存，并返回分配的内存的地址。<code>new</code> 还会调用对象的构造函数，用于在分配的内存中创建对象。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> myInt <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 动态分配一个 int</span>\\n<span class=\\"token keyword\\">int</span><span class=\\"token operator\\">*</span> myArray <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 动态分配一个 int 数组</span>\\nMyClass<span class=\\"token operator\\">*</span> myObject <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 动态分配一个 MyClass 对象</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong><code>delete</code>：</strong></p>\\n<ul>\\n<li>\\n<p><code>delete</code> 用于释放使用 <code>new</code> 分配的内存，同时调用对象的析构函数以进行清理。如果忘记使用 <code>delete</code>，可能导致内存泄漏。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">delete</span> myInt<span class=\\"token punctuation\\">;</span>      <span class=\\"token comment\\">// 释放动态分配的 int</span>\\n<span class=\\"token keyword\\">delete</span> myObject<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">// 释放动态分配的 MyClass 对象</span>\\n<span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> myArray<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 数组的delete格式比较特殊</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
