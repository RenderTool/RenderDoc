import{b as p,a as c,_ as d}from"./abutton-24fc08f2.js";import{_ as r,r as o,o as u,c as g,d as s,w as t,a,b as n,e as v}from"./app-94ffcd11.js";const i="/RenderDoc/assets/details-5d14e28a.png",m="/RenderDoc/assets/pscpp-09c67419.png",_="/RenderDoc/assets/umgmovie-6e6b0e5b.png",h="/RenderDoc/assets/preconstruct-3069b1af.jpg",f="/RenderDoc/assets/detialview-4ecaa7c6.png",b="/RenderDoc/assets/dtview-0216c0b0.jpg",k="/RenderDoc/assets/still-c4d4b5a9.jpg",y="/RenderDoc/assets/title-ae132dc2.png",P="/RenderDoc/assets/view222-a461fd0e.png",w="/RenderDoc/assets/DETAIUMG-175c037a.png",C="/RenderDoc/assets/behavior-1aa8c891.jpg",j="/RenderDoc/assets/runview-1455a512.png",x="/RenderDoc/assets/bpview-bd861096.jpg",N="/RenderDoc/assets/font-64adf32e.png",W="/RenderDoc/assets/out-c0dc7df9.jpg",D="/RenderDoc/assets/type-ff91bd88.jpg",E="/RenderDoc/assets/detai223-1275a016.jpg",R="/RenderDoc/assets/functionchage-92bf3fe8.png",L="/RenderDoc/assets/wt-81109151.png",O="/RenderDoc/assets/functionname-d998449e.png",z={},A=a("figure",null,[a("img",{src:i,alt:"本章概要",tabindex:"0",loading:"lazy"}),a("figcaption",null,"本章概要")],-1),B=a("br",null,null,-1),U=a("br",null,null,-1),V=a("h3",{id:"编辑器工具控件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#编辑器工具控件","aria-hidden":"true"},"#"),n(" 编辑器工具控件")],-1),F=a("figure",null,[a("img",{src:p,alt:"咱做的",tabindex:"0",loading:"lazy"}),a("figcaption",null,"咱做的")],-1),q=a("figure",null,[a("img",{src:c,alt:"官方的",tabindex:"0",loading:"lazy"}),a("figcaption",null,"官方的")],-1),T=a("h2",{id:"detailsview",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#detailsview","aria-hidden":"true"},"#"),n(" DetailsView")],-1),M=a("figure",null,[a("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),S=a("figure",null,[a("img",{src:_,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),I=a("figure",null,[a("img",{src:h,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),G=a("figure",null,[a("img",{src:f,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),Y=a("span",{style:{color:"#c0392b"}},"Still Settings",-1),H=a("figure",null,[a("img",{src:b,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),J=a("figure",null,[a("img",{src:k,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),K=a("figure",null,[a("img",{src:y,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),Q=a("figure",null,[a("img",{src:P,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),X=a("figure",null,[a("img",{src:w,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),Z=a("span",{style:{color:"#c0392b"}},"显示的类型",-1),$=a("span",{style:{color:"#c0392b"}},"类目标题",-1),aa=a("figure",null,[a("img",{src:C,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),na=a("figure",null,[a("img",{src:j,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),sa=a("figure",null,[a("img",{src:x,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ea=a("figure",null,[a("img",{src:N,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ta=a("h3",{id:"多语言注意事项",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#多语言注意事项","aria-hidden":"true"},"#"),n(" 多语言注意事项")],-1),oa=a("figure",null,[a("img",{src:W,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ia=a("p",null,[n("绝了！可是这个"),a("code",null,"显示的类型"),n("和"),a("code",null,"显示的属性"),n("有什么区别吗？")],-1),la=a("figure",null,[a("img",{src:D,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),pa=a("figure",null,[a("img",{src:E,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ca=a("h3",{id:"属性控制",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#属性控制","aria-hidden":"true"},"#"),n(" 属性控制")],-1),da=a("p",null,[n("绝了！也就是说："),a("br"),a("code",null,"显示的类型"),n("控制整组显示。"),a("br"),a("code",null,"显示的属性"),n("控制单个显示。")],-1),ra=a("figure",null,[a("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ua=a("figure",null,[a("img",{src:d,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ga=a("h3",{id:"委托触发修改",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#委托触发修改","aria-hidden":"true"},"#"),n(" 委托触发修改")],-1),va=a("p",null,[n("要么用"),a("code",null,"按钮"),n("主动触发呗,要么用它"),a("code",null,"属性改变时"),n("的委托呗")],-1),ma=a("figure",null,[a("img",{src:R,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),_a=a("figure",null,[a("img",{src:L,alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),ha=v('<h3 id="代码分析" tabindex="-1"><a class="header-anchor" href="#代码分析" aria-hidden="true">#</a> 代码分析</h3><figure><img src="'+O+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token operator">-</span>UDetailsView <span class="token operator">:</span> <span class="token keyword">public</span> UPropertyViewBase<span class="token punctuation">,</span> <span class="token keyword">public</span> FNotifyHook
  <span class="token operator">-</span>UPropertyViewBase <span class="token operator">:</span> <span class="token keyword">public</span> UWidget	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token comment">//①一个参数的动态多播委托</span>
    <span class="token comment">/** Sets a delegate called when the property value changes */</span>
    <span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span><span class="token punctuation">(</span>FOnPropertyValueChanged<span class="token punctuation">,</span> FName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//②这个就是蓝图事件函数节点</span>
    <span class="token comment">/** Sets a delegate called when the property value changes */</span>
    <span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintAssignable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;View|Event&quot;</span><span class="token punctuation">)</span>
    FOnPropertyValueChanged OnPropertyChanged<span class="token punctuation">;</span>

    <span class="token comment">//③ 代理函数声明</span>
	<span class="token keyword">void</span> <span class="token function">OnPropertyChangedBroadcast</span><span class="token punctuation">(</span>FName PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//④代理函数定义</span>
	<span class="token keyword">void</span> <span class="token class-name">UPropertyViewBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnPropertyChangedBroadcast</span><span class="token punctuation">(</span>FName PropertyName<span class="token punctuation">)</span>
    <span class="token punctuation">{</span> 
        OnPropertyChanged<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
	<span class="token comment">//⑤使用者调用</span>
	<span class="token keyword">void</span> <span class="token class-name">UDetailsView</span><span class="token double-colon punctuation">::</span><span class="token function">NotifyPostChange</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPropertyChangedEvent<span class="token operator">&amp;</span> PropertyChangedEvent<span class="token punctuation">,</span> FProperty<span class="token operator">*</span> PropertyThatChanged<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name">FNotifyHook</span><span class="token double-colon punctuation">::</span><span class="token function">NotifyPostChange</span><span class="token punctuation">(</span>PropertyChangedEvent<span class="token punctuation">,</span> PropertyThatChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// 获取发生变化的属性的名称</span>
        FName PropertyName <span class="token operator">=</span> PropertyThatChanged <span class="token operator">?</span> PropertyThatChanged<span class="token operator">-&gt;</span><span class="token function">GetFName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> NAME_None<span class="token punctuation">;</span>
    
        <span class="token comment">// 触发委托广播，通知已注册的监听者属性已经发生了变化</span>
        <span class="token function">OnPropertyChangedBroadcast</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p><strong><code>DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</code> 宏：</strong></p><ul><li>这是一个宏，用于声明带有一个参数的动态多播委托。<code>FOnPropertyValueChanged</code> 是委托的类型名称，表示当某个属性值发生变化时触发的事件。在这里，<code>FName</code> 是参数类型，表示属性的名称。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span><span class="token punctuation">(</span>FOnPropertyValueChanged<span class="token punctuation">,</span> FName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong><code>UPROPERTY(BlueprintAssignable)</code> 宏：</strong></p><ul><li>这是UE宏，用于声明一个在蓝图中可绑定的委托实例。<code>OnPropertyChanged</code> 是类的成员变量，它是 <code>FOnPropertyValueChanged</code> 委托的实例。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">UPROPERTY</span><span class="token punctuation">(</span>BlueprintAssignable<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;View|Event&quot;</span><span class="token punctuation">)</span>
FOnPropertyValueChanged OnPropertyChanged<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>委托函数 <code>OnPropertyChangedBroadcast</code>：</strong></p><ul><li>这是一个成员函数，用于在属性值发生变化时触发委托的广播。该函数接受一个类型为 <code>FName</code> 的参数 <code>PropertyName</code>，表示发生变化的属性的名称。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">OnPropertyChangedBroadcast</span><span class="token punctuation">(</span>FName PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>函数实现 <code>UPropertyViewBase::OnPropertyChangedBroadcast</code>：</strong></p><ul><li>这是 <code>OnPropertyChangedBroadcast</code> 函数的具体实现。在这里，通过 <code>OnPropertyChanged.Broadcast(PropertyName);</code> 触发委托的广播，通知已注册的监听者（可能是蓝图中的事件节点或其他代码）属性值已经发生了变化。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">UPropertyViewBase</span><span class="token double-colon punctuation">::</span><span class="token function">OnPropertyChangedBroadcast</span><span class="token punctuation">(</span>FName PropertyName<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    OnPropertyChanged<span class="token punctuation">.</span><span class="token function">Broadcast</span><span class="token punctuation">(</span>PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>UDetailsView::NotifyPostChange</code> 的使用者：</strong></p><ul><li><code>NotifyPostChange</code> 是一个虚函数，并在 <code>UDetailsView</code> 中被重写。以下是声明：</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">NotifyPostChange</span><span class="token punctuation">(</span><span class="token keyword">const</span> FPropertyChangedEvent<span class="token operator">&amp;</span> PropertyChangedEvent<span class="token punctuation">,</span> FProperty<span class="token operator">*</span> PropertyThatChanged<span class="token punctuation">)</span> <span class="token keyword">override</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,5);function fa(ba,ka){const e=o("chatmessage"),l=o("gifwithbutton");return u(),g("div",null,[A,s(e,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 上一篇我们介绍了两种编辑器工具蓝图："),B,n(" 1.编辑器工具蓝图：ActorActionUtility|AssetActionUtility"),U,n(" 2.编辑器蓝图控件 ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 没错，这一篇咱们重点关注一下编辑器蓝图工具 ")]),_:1}),V,s(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 可是对比官方demo做的咱这个界面也太丑了！ ")]),_:1}),F,q,s(e,{avatar:"../../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 安排 ")]),_:1}),T,s(e,{avatar:"../../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 先检查官方的MovieRender有没有派生C++类。 ")]),_:1}),M,s(e,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:t(()=>[n(" 好耶，目前来说没毛病！是纯蓝图。 ")]),_:1}),s(e,{avatar:"../../../assets/emoji/new7.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 别高兴太早，组件确实是纯蓝图，里面的数据源是不是就不知道了！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/new4.png",avatarWidth:40,alignLeft:""},{default:t(()=>[n(" 而且第一印象并不乐观！并没有我们想象超复杂样式UMG ")]),_:1}),S,s(e,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 有没有可能是数据驱动呢？ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/new8.png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 数据驱动是必然了！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[n(" 可是！这个蓝图怎么回事！一个预构造函数，也没看到他UI生成逻辑啊！ ")]),_:1}),I,s(e,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 不过一个细节咱应该注意到了，层级组件中多了一个叫DetailsView的组件 ")]),_:1}),G,s(e,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[n(" 问题又来了！这东西的属性里除了一个"),Y,n("也没别的东西啊！ ")]),_:1}),H,s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 别急，既然他写了一定有他的来源！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (4).png",avatarWidth:40},{default:t(()=>[n(" 我全局搜了！没有！ ")]),_:1}),J,s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 你注意到一个细节没有！这个是个标题我们试着从他的内容出发。 ")]),_:1}),K,s(e,{avatar:"../../../assets/emoji/bqb (3).png",avatarWidth:40},{default:t(()=>[n(" 我看到他了！而且这个Still Settings是类别名！ ")]),_:1}),Q,s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" ok，咱们可以在我们自己的蓝图中做个简单测试。 ")]),_:1}),X,s(e,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:t(()=>[n(" 这里显示未定义对象！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 别急，如果按照之前的表现，这里要"),Z,n("应该对应我们的"),$]),_:1}),aa,s(e,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 还是显示未定义对象！ ")]),_:1}),na,s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 还记之前的预构造蓝图吗？连上试试！ ")]),_:1}),sa,s(e,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:t(()=>[n(" 还是没反应！ ")]),_:1}),ea,ta,s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 试试看用英文名 ")]),_:1}),oa,s(e,{avatar:"../../../assets/emoji/bqb (5).png",avatarWidth:40},{default:t(()=>[ia]),_:1}),la,s(e,{avatar:"../../../assets/emoji/new2.png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 试试看不就知道了！ ")]),_:1}),pa,s(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40},{default:t(()=>[ca,da]),_:1}),s(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[n(" 可是这个不支持中文太遗憾了！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 不是绝对的，你可以新建一个中文变量名的变量试试看 ")]),_:1}),ra,s(e,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:t(()=>[n(" 6！难不成是因为原始变量是英文，本地化成中文，这个组件只认原始数据,后面我们用中文变量命名就能正常显示。 ")]),_:1}),s(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 应该就是这样 ")]),_:1}),s(e,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:t(()=>[n(" 这么说来和之前的ActorActionUtility|AssetActionUtility弹出来的结果很相似啊！ ")]),_:1}),ua,s(e,{avatar:"../../../assets/emoji/new5.png",avatarWidth:50,alignLeft:""},{default:t(()=>[n(" 确实像，不过这个自由度更高！ ")]),_:1}),s(e,{avatar:"../../../assets/emoji/new1.png",avatarWidth:45},{default:t(()=>[n(" 现在界面有了，可是咱们用呢？ ")]),_:1}),ga,s(e,{avatar:"../../../assets/emoji/new8.png",avatarWidth:50,alignLeft:""},{default:t(()=>[va]),_:1}),ma,s(l,{src:"../../../assets/unrealgif/gifprint.gif"}),s(e,{avatar:"../../../assets/emoji/new8.png",avatarWidth:50},{default:t(()=>[n(" 委托?咱们花了大篇幅将的那个委托？ ")]),_:1}),_a,s(e,{avatar:"../../../assets/emoji/new1.png",avatarWidth:45,alignLeft:""},{default:t(()=>[n(" 是的，说到委托，我开始对这个组件的代码感兴趣了！ ")]),_:1}),ha])}const wa=r(z,[["render",fa],["__file","2-editortoolBP2.html.vue"]]);export{wa as default};
