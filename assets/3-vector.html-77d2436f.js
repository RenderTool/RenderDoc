import{_ as r,r as i,o as d,c as k,d as a,w as t,a as n,b as s,e as o}from"./app-55be7ff9.js";const v="/RenderDoc/assets/vectorsample-0d91fa4a.png",m={},b=n("h3",{id:"vector",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vector","aria-hidden":"true"},"#"),s(" vector")],-1),g=o('<ol><li><p><strong>静态空间 vs. 动态扩展</strong>：</p><ul><li><strong>数组</strong>：在定义时，数组的大小就已经固定，它占据静态的空间，无法在运行时改变大小。数组的大小是在编译时确定的。</li><li><strong><code>std::vector</code></strong>：<code>std::vector</code> 是一个动态数组的实现，它可以在运行时动态扩展。这意味着 <code>std::vector</code> 的大小可以根据需要动态增加或减少，而不需要手动管理内存。</li></ul></li><li><p><strong>动态扩展的实现</strong>：</p><ul><li>当 <code>std::vector</code> 的容量不足以容纳新元素时，它会请求更大的内存块。这通常涉及到分配一块新的内存空间，将原有元素拷贝到新的内存中，然后释放原有的内存。这个过程确保了内存的连续性，有助于提高访问效率。</li><li>遵循左闭右开原则</li></ul></li></ol><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="3"><li><strong>优势和灵活性</strong>： <ul><li><code>std::vector</code> 提供了动态内存管理，这使得它在处理不确定数量的元素时更为灵活。它自动处理内存的分配和释放，减轻了程序员的负担。</li><li>普通数组在编译时就需要知道其大小，这可能导致一些不便，尤其是在需要动态调整大小的情况下。</li></ul></li></ol><h3 id="实例化vector" tabindex="-1"><a class="header-anchor" href="#实例化vector" aria-hidden="true">#</a> 实例化vector</h3>',4),h=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[s("std"),n("span",{class:"token double-colon punctuation"},"::"),s("vector"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"int"),n("span",{class:"token operator"},">"),s(" v"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Alloc"),s(),n("span",{class:"token operator"},"="),s(" allocator"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"vector"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),_=n("h3",{id:"基本方法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基本方法","aria-hidden":"true"},"#"),s(" 基本方法")],-1),y={href:"https://en.cppreference.com/w/cpp/container/vector",target:"_blank",rel:"noopener noreferrer"},w=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>

    <span class="token comment">// 添加元素</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将 10 添加到 v 中</span>
    v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印元素</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;打印元素: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 修改元素</span>
    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>  <span class="token comment">// 将索引为 1 的元素修改为 25</span>

    <span class="token comment">// 删除元素</span>
    v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除最后一个元素</span>

    <span class="token comment">// 插入元素</span>
    v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在索引为 1 的位置插入元素 15</span>

    <span class="token comment">// 输出修改后的向量元素</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;修改后: &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 查找元素</span>
    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> it <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;元素 &quot;</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;找到的索引 &quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">distance</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;元素 &quot;</span> <span class="token operator">&lt;&lt;</span> target <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; 没有找到元素\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器" aria-hidden="true">#</a> 迭代器</h3>`,2),q=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个包含整数的 vector</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// ①使用迭代器遍历 vector 并输出元素</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> myVector<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
     <span class="token punctuation">{</span>
        <span class="token operator">*</span>it <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//也可以修改</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// ②使用范围-based for 循环（C++11及以后版本）</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> element <span class="token operator">:</span> myVector<span class="token punctuation">)</span> 
    <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><h4 id="_1-为什么要用迭代器遍历" tabindex="-1"><a class="header-anchor" href="#_1-为什么要用迭代器遍历" aria-hidden="true">#</a> 1. 为什么要用迭代器遍历</h4>`,3),x=n("p",null,[s("在这里你可以把他当作指针用，但"),n("code",null,"迭代器"),s("其实是一种用于访问、操作容器（如数组、列表、集合等）元素的抽象接口。")],-1),j=n("hr",null,null,-1),W=n("h4",{id:"_2-动态开辟空间问题优化-预留空间",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-动态开辟空间问题优化-预留空间","aria-hidden":"true"},"#"),s(" 2.动态开辟空间问题优化-预留空间")],-1),V=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            num<span class="token operator">++</span><span class="token punctuation">;</span>
            std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">&quot;num=&quot;</span><span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),L=n("hr",null,null,-1),C=n("h3",{id:"_3-front和begin区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-front和begin区别","aria-hidden":"true"},"#"),s(" 3. front和begin区别")],-1),T=o(`<ol><li><p><strong><code>begin()</code> 函数：</strong></p><ul><li><strong>返回类型：</strong> <code>begin()</code> 函数返回一个迭代器，指向双端队列的第一个元素（前端块的第一个元素）。</li><li><strong>用途：</strong> 主要用于遍历 <code>std::vector</code> 中的元素，它标识了双端队列的起始位置。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>front()</code> 函数：</strong></p><ul><li><strong>返回类型：</strong> <code>front()</code> 函数返回一个引用，指向双端队列的第一个元素（前端块的第一个元素）。</li><li><strong>用途：</strong> 主要用于访问或修改 <code>std::vector</code> 的第一个元素的值。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> myVector <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> firstElement <span class="token operator">=</span> myVector<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>总结：</strong></p><ul><li><code>begin()</code> 返回一个迭代器，主要用于遍历容器元素。</li><li><code>front()</code> 返回第一个元素的引用，主要用于访问或修改第一个元素的值。</li></ul>`,3),A=n("h3",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),s(" 参考链接")],-1),B={href:"https://www.w3schools.cn/cpp_standard_library/array.html",target:"_blank",rel:"noopener noreferrer"},E={href:"https://en.cppreference.com/w/cpp/container/vector",target:"_blank",rel:"noopener noreferrer"};function N(z,I){const e=i("chatmessage"),u=i("CodeTabs"),p=i("ExternalLinkIcon");return d(),k("div",null,[b,a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" Baba能不能带我手把手体验vector容器一下怎么用? ")]),_:1}),a(e,{avatar:"../../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 安排！ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" vector 是 C++ 标准模板库（STL）中的一个是可以改变大小的序列容器，序列容器严格按线性顺序存储元素。本质上是一个类模板，还记得类模板的特性吗？在使用类模板时，需要对其进行实例化。 ")]),_:1}),g,a(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 既然vector本质是一个类模板，那么我们用它的时候也需要实例化对象。 ")]),_:1}),a(u,{id:"68",data:[{id:"实例化"},{id:"标准库中的定义"}],"tab-id":"language"},{title0:t(({value:c,isActive:l})=>[s("实例化")]),title1:t(({value:c,isActive:l})=>[s("标准库中的定义")]),tab0:t(({value:c,isActive:l})=>[h]),tab1:t(({value:c,isActive:l})=>[f]),_:1}),_,a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" ok，现在我们怎么进行增删改查呢？ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 调用对应的成员方法即可。 ")]),_:1}),n("blockquote",null,[n("p",null,[s("这是vector"),n("a",y,[s("成员函数参考"),a(p)])])]),w,a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 现在我想取出所有元素，我还能用遍历吗？ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 他的本质是一个模板类，不能用传统的for循环依靠指针遍历数组，但底层已经封装了遍历的方法，我们管他叫迭代器。 ")]),_:1}),q,a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 我看见你用*it输出到屏幕，莫非这个迭代器（iterator）是一个指针？ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[x]),_:1}),j,W,a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 我听他们说每次vector新加元素都会动态开辟一个新的空间，怎么验证呢？ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (1).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 很简单，可以用一个指针来验证。 ")]),_:1}),V,a(e,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:t(()=>[s(" 妙啊！意味着如果首地址更换了指针就会被重新赋值，num也会递增就得到了重新分配地址的次数了！ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 一般来说他默认分配的内存已经够用了，上面执行了100000次也就分配了几次。但对于更大的数据来说，能不能再优化减少动态分配的次数呢？ ")]),_:1}),a(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 你想到的问题官方也想到了。为此增加了一个叫预留空间函数——reserve(int size)。 ")]),_:1}),L,C,a(e,{avatar:"../../../assets/emoji/new3.png",avatarWidth:50},{default:t(()=>[s(" front和begin区别有啥区别啊？ ")]),_:1}),T,a(e,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 请注意，使用 `front()` 之前需要确保 `std::vector` 不为空，因为对于空的 `std::vector` 调用 `front()` 是未定义行为,最好使用 empty() 函数进行检查。 ")]),_:1}),A,n("p",null,[n("a",B,[s("国内网站"),a(p)]),n("a",E,[s("vector"),a(p)])])])}const D=r(m,[["render",N],["__file","3-vector.html.vue"]]);export{D as default};
