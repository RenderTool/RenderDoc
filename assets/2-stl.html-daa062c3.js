const t=JSON.parse('{"key":"v-c27c08f6","path":"/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html","title":"c++2.stl模板概述","lang":"zh-CN","frontmatter":{"title":"c++2.stl模板概述","order":2,"category":["c++"],"description":"STL 核心组件 类别 组件 描述 容器（Containers） vector 动态数组，支持快速随机访问和尾部插入操作。 list 双向链表，支持在任意位置插入和删除操作。 deque 双端队列，支持在两端快速插入和删除操作。 queue 队列，先进先出（FIFO）数据结构。 stack 栈，后进先出（LIFO）数据结构。 set 集合，元素唯一，有序。 map 映射，键-值对的集合，键唯一，有序。 unordered_set 无序集合，元素唯一。 unordered_map 无序映射，键-值对的集合，键唯一。 stack 栈，后进先出（LIFO）数据结构。 迭代器（Iterators） input_iterator 用于遍历序列的输入迭代器。 output_iterator 用于向序列写入的输出迭代器。 forward_iterator 单向遍历序列的迭代器，支持逐个增加。 bidirectional_iterator 双向遍历序列的迭代器，支持逐个增加或逐个减少。 random_access_iterator 随机访问序列的迭代器，支持直接跳跃访问。 算法（Algorithms） sort 对序列进行排序。 find 在序列中查找特定元素。 transform 对序列进行变换操作。 accumulate 计算序列元素的累积值。 for_each 对序列的每个元素执行指定操作。 适配器（Adapters） stack 适配器，将栈的操作添加到其他容器上。 queue 适配器，将队列的操作添加到其他容器上。 priority_queue 适配器，将优先队列的操作添加到其他容器上。 仿函数（Functors） less 二元谓词，用于比较两个元素。 greater 二元谓词，用于比较两个元素。 plus 二元函数对象，实现加法。 minus 二元函数对象，实现减法。 negate 一元函数对象，实现取反。 空间配置器（Allocators） allocator 分配和释放内存的对象。 allocator_traits 提供对分配器属性和操作的访问。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/stl_%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF_/2-stl.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++2.stl模板概述"}],["meta",{"property":"og:description","content":"STL 核心组件 类别 组件 描述 容器（Containers） vector 动态数组，支持快速随机访问和尾部插入操作。 list 双向链表，支持在任意位置插入和删除操作。 deque 双端队列，支持在两端快速插入和删除操作。 queue 队列，先进先出（FIFO）数据结构。 stack 栈，后进先出（LIFO）数据结构。 set 集合，元素唯一，有序。 map 映射，键-值对的集合，键唯一，有序。 unordered_set 无序集合，元素唯一。 unordered_map 无序映射，键-值对的集合，键唯一。 stack 栈，后进先出（LIFO）数据结构。 迭代器（Iterators） input_iterator 用于遍历序列的输入迭代器。 output_iterator 用于向序列写入的输出迭代器。 forward_iterator 单向遍历序列的迭代器，支持逐个增加。 bidirectional_iterator 双向遍历序列的迭代器，支持逐个增加或逐个减少。 random_access_iterator 随机访问序列的迭代器，支持直接跳跃访问。 算法（Algorithms） sort 对序列进行排序。 find 在序列中查找特定元素。 transform 对序列进行变换操作。 accumulate 计算序列元素的累积值。 for_each 对序列的每个元素执行指定操作。 适配器（Adapters） stack 适配器，将栈的操作添加到其他容器上。 queue 适配器，将队列的操作添加到其他容器上。 priority_queue 适配器，将优先队列的操作添加到其他容器上。 仿函数（Functors） less 二元谓词，用于比较两个元素。 greater 二元谓词，用于比较两个元素。 plus 二元函数对象，实现加法。 minus 二元函数对象，实现减法。 negate 一元函数对象，实现取反。 空间配置器（Allocators） allocator 分配和释放内存的对象。 allocator_traits 提供对分配器属性和操作的访问。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++2.stl模板概述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"STL","slug":"stl","link":"#stl","children":[]},{"level":3,"title":"核心组件","slug":"核心组件","link":"#核心组件","children":[]}],"git":{"createdTime":1701893836000,"updatedTime":1704233233000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1},{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":1.79,"words":536},"filePathRelative":"language/cpp/stl[标准模板]/2-stl.md","localizedDate":"2023年12月6日","excerpt":"<h3> STL</h3>\\n\\n<h3> 核心组件</h3>\\n<table>\\n<thead>\\n<tr>\\n<th>类别</th>\\n<th>组件</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>容器（Containers）</td>\\n<td>vector</td>\\n<td>动态数组，支持快速随机访问和尾部插入操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>list</td>\\n<td>双向链表，支持在任意位置插入和删除操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>deque</td>\\n<td>双端队列，支持在两端快速插入和删除操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>queue</td>\\n<td>队列，先进先出（FIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>stack</td>\\n<td>栈，后进先出（LIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>set</td>\\n<td>集合，元素唯一，有序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>map</td>\\n<td>映射，键-值对的集合，键唯一，有序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>unordered_set</td>\\n<td>无序集合，元素唯一。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>unordered_map</td>\\n<td>无序映射，键-值对的集合，键唯一。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>stack</td>\\n<td>栈，后进先出（LIFO）数据结构。</td>\\n</tr>\\n<tr>\\n<td>迭代器（Iterators）</td>\\n<td>input_iterator</td>\\n<td>用于遍历序列的输入迭代器。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>output_iterator</td>\\n<td>用于向序列写入的输出迭代器。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>forward_iterator</td>\\n<td>单向遍历序列的迭代器，支持逐个增加。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>bidirectional_iterator</td>\\n<td>双向遍历序列的迭代器，支持逐个增加或逐个减少。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>random_access_iterator</td>\\n<td>随机访问序列的迭代器，支持直接跳跃访问。</td>\\n</tr>\\n<tr>\\n<td>算法（Algorithms）</td>\\n<td>sort</td>\\n<td>对序列进行排序。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>find</td>\\n<td>在序列中查找特定元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>transform</td>\\n<td>对序列进行变换操作。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>accumulate</td>\\n<td>计算序列元素的累积值。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>for_each</td>\\n<td>对序列的每个元素执行指定操作。</td>\\n</tr>\\n<tr>\\n<td>适配器（Adapters）</td>\\n<td>stack</td>\\n<td>适配器，将栈的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>queue</td>\\n<td>适配器，将队列的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>priority_queue</td>\\n<td>适配器，将优先队列的操作添加到其他容器上。</td>\\n</tr>\\n<tr>\\n<td>仿函数（Functors）</td>\\n<td>less</td>\\n<td>二元谓词，用于比较两个元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>greater</td>\\n<td>二元谓词，用于比较两个元素。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>plus</td>\\n<td>二元函数对象，实现加法。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>minus</td>\\n<td>二元函数对象，实现减法。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>negate</td>\\n<td>一元函数对象，实现取反。</td>\\n</tr>\\n<tr>\\n<td>空间配置器（Allocators）</td>\\n<td>allocator</td>\\n<td>分配和释放内存的对象。</td>\\n</tr>\\n<tr>\\n<td></td>\\n<td>allocator_traits</td>\\n<td>提供对分配器属性和操作的访问。</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
