import{_ as c,r as a,o,c as i,d as e,w as l,a as n,b as s,e as u}from"./app-8a846373.js";const d={},r=n("h2",{id:"实践",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实践","aria-hidden":"true"},"#"),s(" 实践")],-1),k=u(`<h2 id="前置头文件" tabindex="-1"><a class="header-anchor" href="#前置头文件" aria-hidden="true">#</a> 前置头文件</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Net/UnrealNetwork.h&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="函数复制-rpc" tabindex="-1"><a class="header-anchor" href="#函数复制-rpc" aria-hidden="true">#</a> 函数复制（RPC）</h2><h3 id="函数复制-rpc-的netmulticast-组播多播" tabindex="-1"><a class="header-anchor" href="#函数复制-rpc-的netmulticast-组播多播" aria-hidden="true">#</a> 函数复制（RPC）的NetMulticast(组播多播)：</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MulticastFunction 函数</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>NetMulticast<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中定义 MulticastFunction 函数</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">MulticastFunction_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里添加多播函数的实现</span>
    <span class="token comment">// 这里的代码会在所有客户端上执行</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个函数中调用 NetMulticast</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在服务端调用 NetMulticast，它将在所有客户端上执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">MulticastFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数复制-rpc-的server-客户端上调用、但需要在服务器上执行" tabindex="-1"><a class="header-anchor" href="#函数复制-rpc-的server-客户端上调用、但需要在服务器上执行" aria-hidden="true">#</a> 函数复制（RPC）的Server（客户端上调用、但需要在服务器上执行）：</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 ServerFunction 函数</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Server<span class="token punctuation">,</span> Reliable<span class="token punctuation">,</span> WithValidation<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">ServerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中定义 ServerFunction 函数</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerFunction_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里添加服务端函数的实现</span>
    <span class="token comment">// 这里的代码只会在服务端上执行</span>
<span class="token punctuation">}</span>

<span class="token keyword">bool</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ServerFunction_Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里添加验证逻辑</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个函数中调用 Server</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在客户端调用 Server，它将在服务端上执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ServerFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="函数复制-rpc-的client-服务器上调用、但需要在客户端上执行" tabindex="-1"><a class="header-anchor" href="#函数复制-rpc-的client-服务器上调用、但需要在客户端上执行" aria-hidden="true">#</a> 函数复制（RPC）的Client（服务器上调用、但需要在客户端上执行）：</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 ClientFunction 函数</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>Client<span class="token punctuation">,</span> Reliable<span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">ClientFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中定义 ClientFunction 函数</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">ClientFunction_Implementation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在这里添加客户端函数的实现</span>
    <span class="token comment">// 这里的代码只会在客户端上执行</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个函数中调用 Client</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在服务端调用 Client，它将在对应的客户端上执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">ClientFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可靠性-reliable" tabindex="-1"><a class="header-anchor" href="#可靠性-reliable" aria-hidden="true">#</a> 可靠性|Reliable</h3><blockquote><p>默认情况RPC不可靠，所以需要一个Reliable，但别滥用。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">UFUNCTION</span><span class="token punctuation">(</span> Client<span class="token punctuation">,</span> Reliable <span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">ClientRPCFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证-withvalidation" tabindex="-1"><a class="header-anchor" href="#验证-withvalidation" aria-hidden="true">#</a> 验证|WithValidation</h3><blockquote><p>默认情况RPC不验证</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">bool</span> <span class="token function">SomeRPCFunction_Validate</span><span class="token punctuation">(</span> int32 AddHealth <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> AddHealth <span class="token operator">&gt;</span> MAX_ADD_HEALTH <span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                       <span class="token comment">// This will disconnect the caller</span>
    <span class="token punctuation">}</span>
<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                              <span class="token comment">// This will allow the RPC to be called</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">SomeRPCFunction_Implementation</span><span class="token punctuation">(</span> int32 AddHealth <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    Health <span class="token operator">+=</span> AddHealth<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量复制-rpc" tabindex="-1"><a class="header-anchor" href="#变量复制-rpc" aria-hidden="true">#</a> 变量复制（RPC）</h2><h3 id="replicated" tabindex="-1"><a class="header-anchor" href="#replicated" aria-hidden="true">#</a> Replicated</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>
<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>Replicated<span class="token punctuation">)</span>
<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中设置变量同步</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个函数中调用 NetMulticast 修改变量值</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在服务端调用 NetMulticast，它将在所有客户端上执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        MyVariable <span class="token operator">=</span> <span class="token number">42.0f</span><span class="token punctuation">;</span>
        <span class="token function">MulticastVariable</span><span class="token punctuation">(</span>MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repnotify-onrep" tabindex="-1"><a class="header-anchor" href="#repnotify-onrep" aria-hidden="true">#</a> RepNotify|OnRep</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 在 .h 文件中声明 MyVariable 变量</span>
<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>ReplicatedUsing <span class="token operator">=</span> OnRep_MyVariable<span class="token punctuation">)</span>
<span class="token keyword">float</span> MyVariable<span class="token punctuation">;</span>

<span class="token comment">// 在 .cpp 文件中设置变量同步，并声明 OnRep_MyVariable 函数</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span> FLifetimeProperty <span class="token operator">&gt;</span> <span class="token operator">&amp;</span> OutLifetimeProps<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
   <span class="token class-name">Super</span><span class="token double-colon punctuation">::</span><span class="token function">GetLifetimeReplicatedProps</span><span class="token punctuation">(</span>OutLifetimeProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">DOREPLIFETIME_CONDITION_NOTIFY</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">,</span> REPNOTIFY_Always<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// OnRep_MyVariable 函数将在 MyVariable 发生变化时被调用</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">OnRep_MyVariable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 在这里添加在变量改变时执行的逻辑</span>
   <span class="token function">UE_LOG</span><span class="token punctuation">(</span>LogTemp<span class="token punctuation">,</span> Warning<span class="token punctuation">,</span> <span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;MyVariable changed to: %f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MyVariable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在某个函数中修改 MyVariable 的值</span>
<span class="token keyword">void</span> <span class="token class-name">AMyActor</span><span class="token double-colon punctuation">::</span><span class="token function">SomeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HasAuthority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       MyVariable <span class="token operator">=</span> <span class="token number">42.0f</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="doreplifetime变量的复制规则" tabindex="-1"><a class="header-anchor" href="#doreplifetime变量的复制规则" aria-hidden="true">#</a> <code>DOREPLIFETIME</code>变量的复制规则</h3><h3 id="doreplifetime" tabindex="-1"><a class="header-anchor" href="#doreplifetime" aria-hidden="true">#</a> DOREPLIFETIME:</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏用于声明一个类的变量需要在网络上进行复制。它会自动生成必要的复制代码。</p><h3 id="doreplifetime-condition" tabindex="-1"><a class="header-anchor" href="#doreplifetime-condition" aria-hidden="true">#</a> DOREPLIFETIME_CONDITION:</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>ClassName<span class="token punctuation">,</span> VariableName<span class="token punctuation">,</span> ReplicationCondition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个宏也用于声明一个类的变量需要在网络上进行复制，但允许添加一个额外的条件。<code>ReplicationCondition</code> 是一个用于判断是否进行复制的布尔表达式。只有在这个表达式为真时，复制才会发生。</p><p>示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DOREPLIFETIME_CONDITION</span><span class="token punctuation">(</span>AMyActor<span class="token punctuation">,</span> MyVariable<span class="token punctuation">,</span> COND_SkipOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>条件标签</th><th>描述</th></tr></thead><tbody><tr><td><code>COND_InitialOnly</code></td><td>仅在初始数据组尝试发送</td></tr><tr><td><code>COND_OwnerOnly</code></td><td>仅发送至 actor 的所有者</td></tr><tr><td><code>COND_SkipOwner</code></td><td>发送至除所有者之外的每个连接</td></tr><tr><td><code>COND_SimulatedOnly</code></td><td>仅发送至模拟 actor</td></tr><tr><td><code>COND_AutonomousOnly</code></td><td>仅发送给自治 actor</td></tr><tr><td><code>COND_SimulatedOrPhysics</code></td><td>发送至模拟或 <code>bRepPhysics</code> actor</td></tr><tr><td><code>COND_InitialOrOwner</code></td><td>发送初始数据包，或者发送至 actor 所有者</td></tr><tr><td><code>COND_Custom</code></td><td>没有特定条件，但需要通过 <code>SetCustomIsActiveOverride</code> 开启/关闭能力</td></tr></tbody></table><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,31),v={href:"https://docs.unrealengine.com/5.2/zh-CN/multiplayer-programming-quick-start-for-unreal-engine/",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const t=a("chatmessage"),p=a("ExternalLinkIcon");return o(),i("div",null,[r,e(t,{avatar:" ../../assets/emoji/hx.png",avatarWidth:40},{default:l(()=>[s(" 本篇为网络复制实践 ")]),_:1}),k,n("p",null,[n("a",v,[s("官方文档"),e(p)])])])}const y=c(d,[["render",m],["__file","4-GamePlayNetWorkUse.html.vue"]]);export{y as default};
