import{_ as d,r as l,o as u,c as k,d as e,w as a,a as n,b as s,e as o}from"./app-08971ec0.js";const v="/RenderDoc/assets/BLUEPRINTNATIVEENVENT-bada8031.png",m={},b=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>    <span class="token keyword">class</span> <span class="token class-name">IMyInterface</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 实现接口的类</span>
    <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">IMyInterface</span></span>
    <span class="token punctuation">{</span>
        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">override</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 实现接口方法的具体逻辑</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),h=o(`<h3 id="简单实践" tabindex="-1"><a class="header-anchor" href="#简单实践" aria-hidden="true">#</a> 简单实践</h3><ol><li>继承<code>UInterface</code></li></ol><div class="hint-container note"><p class="hint-container-title">注</p><p>声明接口类与声明普通的虚幻类相似，但仍有几个区别。<br> 1.接口类使用UINTERFACE宏而不是UCLASS宏.<br> 2.继承自&quot;UInterface&quot;而不是&quot;UObject&quot;。<br> 3.依然可以使用传统虚函数方法定义接口。</p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;CoreMinimal.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;UObject/Interface.h&quot;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;MyInterface.generated.h&quot;</span></span>

<span class="token function">UINTERFACE</span><span class="token punctuation">(</span>MinimalAPI<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">UMyInterface</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">UInterface</span><span class="token comment">//继承自UInterface</span></span>
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">MYPROJECT_API</span> IMyInterface<span class="token comment">//使用时继承这个即可。</span>
<span class="token punctuation">{</span>
	<span class="token function">GENERATED_BODY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">public</span><span class="token operator">:</span>

	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> BlueprintNativeEvent<span class="token punctuation">,</span> Category <span class="token operator">=</span> <span class="token string">&quot;CameraInterface&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">void</span>  <span class="token function">IChangeCamera</span> <span class="token punctuation">(</span>int32 CameraID<span class="token punctuation">,</span><span class="token keyword">float</span> CameraSwitchTime<span class="token punctuation">)</span> <span class="token punctuation">;</span>

<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>调用方继承刚刚定义的接口类后用虚函数重写即可。</li></ol>`,5),y=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"pragma"),s(),n("span",{class:"token expression"},"once")]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"CoreMinimal.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"MyInterface.h"')]),s(`
`),n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"MyClass.generated.h"')]),s(`

`),n("span",{class:"token comment"},"// 声明类并实现接口"),s(`
`),n("span",{class:"token function"},"UCLASS"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MYPROJECT_API"),s(" UMyClass "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"public"),s(" UObject"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"public"),s(` IMyInterface
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"GENERATED_BODY"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token keyword"},"public"),n("span",{class:"token operator"},":"),s(`
    `),n("span",{class:"token keyword"},"virtual"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"IChangeCamera_Implementation"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"override"),n("span",{class:"token punctuation"},";"),n("span",{class:"token comment"},"//重写虚函数。"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token macro property"},[n("span",{class:"token directive-hash"},"#"),n("span",{class:"token directive keyword"},"include"),s(),n("span",{class:"token string"},'"MyClass.h"')]),s(`

`),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token class-name"},"UMyClass"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"MyMethod_Implementation"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 实现接口方法的具体逻辑"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("h3",{id:"blueprintnativeevent-blueprintimplementableevent",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#blueprintnativeevent-blueprintimplementableevent","aria-hidden":"true"},"#"),s(" BlueprintNativeEvent & BlueprintImplementableEvent")],-1),f=n("figure",null,[n("img",{src:v,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),w=n("h3",{id:"参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考链接","aria-hidden":"true"},"#"),s(" 参考链接")],-1),I={href:"https://docs.unrealengine.com/4.26/zh-CN/ProgrammingAndScripting/GameplayArchitecture/Interfaces/",target:"_blank",rel:"noopener noreferrer"};function C(E,M){const t=l("chatmessage"),p=l("CodeTabs"),r=l("ExternalLinkIcon");return u(),k("div",null,[e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" UEC++中怎么写接口？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 你指的是接口类吧！ ")]),_:1}),e(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:a(()=>[s(" 是的，我知道多态虚函数本身也是接口，我想知道UE中有没有什么特殊的地方。 ")]),_:1}),b,e(t,{avatar:"../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 安排! ")]),_:1}),h,e(p,{id:"28",data:[{id:"MyClass.h"},{id:"MyClass.cpp"}],"tab-id":"language"},{title0:a(({value:c,isActive:i})=>[s("MyClass.h")]),title1:a(({value:c,isActive:i})=>[s("MyClass.cpp")]),tab0:a(({value:c,isActive:i})=>[y]),tab1:a(({value:c,isActive:i})=>[g]),_:1},8,["data"]),_,e(t,{avatar:"../../assets/emoji/new2.png",avatarWidth:50},{default:a(()=>[s(" 传统的接口概念差不多，但多了一个BlueprintNativeEvent宏标记！和BlueprintImplementableEvent什么区别？ ")]),_:1}),e(t,{avatar:"../../assets/emoji/new9.png",avatarWidth:40,alignLeft:""},{default:a(()=>[s(" 看文档： ")]),_:1}),f,w,n("p",null,[n("a",I,[s("官方文档"),e(r)])])])}const U=d(m,[["render",C],["__file","5-Interface.html.vue"]]);export{U as default};
