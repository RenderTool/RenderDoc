import{_ as p,r as c,o as i,c as o,d as s,w as a,e as t,b as e}from"./app-89c110f4.js";const l="/RenderDoc/assets/referenceorvalue-1bb960f0.png",r="/RenderDoc/assets/valueblueprint-bc08dc59.png",u="/RenderDoc/assets/referenceblueprint-c7553af2.png",d="/RenderDoc/assets/runreference-490553ac.gif",k="/RenderDoc/assets/referenceerrorcpp-b6753960.png",m="/RenderDoc/assets/runvaluegif-08148b9a.gif",v="/RenderDoc/assets/runreferencegif-f6962dec.gif",b={},g=t(`<h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><blockquote><p>不想看代码可以看正片内容 <a href="#%E6%AD%A3%E7%89%87">正片</a></p></blockquote><p>值传递（Pass by Value）和引用传递（Pass by Reference）是两种不同的参数传递方式。</p><h3 id="值传递" tabindex="-1"><a class="header-anchor" href="#值传递" aria-hidden="true">#</a> 值传递：</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的值复制给形式参数，函数得到的是实际数据的副本。</p></li><li><p><strong>对实参的影响：</strong> 在函数内对形式参数的修改不会影响实际参数的值。</p></li><li><p><strong>内存开销：</strong> 由于复制了实际参数的值，可能会产生额外的内存开销，尤其是对于大型对象或数据结构。</p></li><li><p><strong>使用时机：</strong> 适用于简单的数据类型或对象，或者当函数不需要修改实际参数的值时。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//值传递</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="引用传递" tabindex="-1"><a class="header-anchor" href="#引用传递" aria-hidden="true">#</a> 引用传递：</h3><ol><li><p><strong>传递方式：</strong> 通过将实际参数的地址传递给形式参数，函数得到的是实际数据的引用。</p></li><li><p><strong>对实参的影响：</strong> 在函数内对形式参数的修改会影响实际参数的值。</p></li><li><p><strong>内存开销：</strong> 不会产生额外的内存开销，因为没有进行值的复制。</p></li><li><p><strong>使用时机：</strong> 适用于需要修改实际参数的值或希望避免复制大型对象的情况。</p></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//值传递</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    x<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印6</span>
    <span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印7</span>
    cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//打印8因为实际参数被改变了</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="const引用传递" tabindex="-1"><a class="header-anchor" href="#const引用传递" aria-hidden="true">#</a> const引用传递：</h3><blockquote><p>细心的你可能已经注意到了，引用性能虽好，但他会改变实参。<br> 那有没办法，既能有引用传递又不会更改实参呢？</p></blockquote>`,11),f=t(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//值传递</span>
<span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token comment">//x++;//error: increment of read-only reference ‘x’</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印5</span>
<span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印6</span>
<span class="token function">increment</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果打印7</span>
cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//打印8因为实际参数被改变了</span>
<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经接受过关键字<code>const</code> 是只读的，所以这里++会报错。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>考虑性能使用引用（const reference）减小内存开销。</p><h2 id="正片" tabindex="-1"><a class="header-anchor" href="#正片" aria-hidden="true">#</a> 正片</h2>`,5),h=t('<h3 id="_1-创建" tabindex="-1"><a class="header-anchor" href="#_1-创建" aria-hidden="true">#</a> 1.创建</h3><blockquote><p>对应的蓝图节点</p></blockquote><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+r+'" alt="默认值传递" tabindex="0" loading="lazy"><figcaption>默认值传递</figcaption></figure><figure><img src="'+u+'" alt="值引用" tabindex="0" loading="lazy"><figcaption>值引用</figcaption></figure><h3 id="_2-运行" tabindex="-1"><a class="header-anchor" href="#_2-运行" aria-hidden="true">#</a> 2.运行</h3><figure><img src="'+d+'" alt="默认参数是1" tabindex="0" loading="lazy"><figcaption>默认参数是1</figcaption></figure><h3 id="_3-注意" tabindex="-1"><a class="header-anchor" href="#_3-注意" aria-hidden="true">#</a> 3.注意</h3>',8),_=t('<figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-debug" tabindex="-1"><a class="header-anchor" href="#_4-debug" aria-hidden="true">#</a> 4.debug</h3><figure><img src="'+m+'" alt="值传递" tabindex="0" loading="lazy"><figcaption>值传递</figcaption></figure><figure><img src="'+v+'" alt="值引用" tabindex="0" loading="lazy"><figcaption>值引用</figcaption></figure>',4);function y(x,w){const n=c("ChatMessage");return i(),o("div",null,[s(n,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:a(()=>[e(" 值传递（Pass by Value）和引用传递（Pass by Reference） ")]),_:1}),g,s(n,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:a(()=>[e(" 使用const + 值引用 ")]),_:1}),f,s(n,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:a(()=>[e(" 如果只是这样也太没劲了，为此Baba在UE中用蓝图节点模拟了一下值传递和值引用 ")]),_:1}),h,s(n,{avatar:"../../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[e(" 注意如果你这里用+1是没有用的，要用自增。 ")]),_:1}),_])}const V=p(b,[["render",y],["__file","VariablePassbyValue _ Reference.html.vue"]]);export{V as default};
