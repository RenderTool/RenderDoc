const n=JSON.parse('{"key":"v-2bd582c7","path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/Keywords%20new_%20delete.html","title":"c++new和delete","lang":"zh-CN","frontmatter":{"title":"c++new和delete","category":["c++"],"tag":["new","delete"],"description":"隐藏式new和delete 早在一开始接触C++变量的时候就已经知道变量定义是在内存中开辟空间。 这里的内存中其实就是我们之前提过的4大区中的栈（stack）。而stack是系统自动管理的，所以不需要new和delete。 基本数据类型： 对于基本数据类型（例如 int, float, char），它们的定义通常不涉及显式的 new 操作符。这些变量通常是在栈上分配的，而不是在堆上。例如： int x = 42; // 在栈上分配内存，不需要显式的 new 自定义类型（类对象）： 对于自定义类型，如果该类型的对象通过 new 关键字进行动态分配，则需要显式使用 new。例如： class MyClass { public: MyClass() { // 构造函数 } ~MyClass() { // 析构函数 } }; int main() { // 显式使用 new 进行动态分配 MyClass* obj = new MyClass; // ... // 显式使用 delete 进行释放 delete obj; return 0; }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/Keywords%20new_%20delete.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++new和delete"}],["meta",{"property":"og:description","content":"隐藏式new和delete 早在一开始接触C++变量的时候就已经知道变量定义是在内存中开辟空间。 这里的内存中其实就是我们之前提过的4大区中的栈（stack）。而stack是系统自动管理的，所以不需要new和delete。 基本数据类型： 对于基本数据类型（例如 int, float, char），它们的定义通常不涉及显式的 new 操作符。这些变量通常是在栈上分配的，而不是在堆上。例如： int x = 42; // 在栈上分配内存，不需要显式的 new 自定义类型（类对象）： 对于自定义类型，如果该类型的对象通过 new 关键字进行动态分配，则需要显式使用 new。例如： class MyClass { public: MyClass() { // 构造函数 } ~MyClass() { // 析构函数 } }; int main() { // 显式使用 new 进行动态分配 MyClass* obj = new MyClass; // ... // 显式使用 delete 进行释放 delete obj; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-13T17:06:48.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"new"}],["meta",{"property":"article:tag","content":"delete"}],["meta",{"property":"article:modified_time","content":"2023-11-13T17:06:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++new和delete\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-13T17:06:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"隐藏式new和delete","slug":"隐藏式new和delete","link":"#隐藏式new和delete","children":[]}],"git":{"createdTime":1699887822000,"updatedTime":1699895208000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":1.08,"words":325},"filePathRelative":"language/cpp/keywords[关键字]/Keywords new& delete.md","localizedDate":"2023年11月13日","excerpt":"\\n<h2> 隐藏式new和delete</h2>\\n<p>早在一开始接触C++变量的时候就已经知道变量定义是在内存中开辟空间。\\n这里的内存中其实就是我们之前提过的4大区中的栈（stack）。而stack是系统自动管理的，所以不需要new和delete。</p>\\n\\n<ol>\\n<li>\\n<p><strong>基本数据类型：</strong> 对于基本数据类型（例如 <code>int</code>, <code>float</code>, <code>char</code>），它们的定义通常不涉及显式的 <code>new</code> 操作符。这些变量通常是在栈上分配的，而不是在堆上。例如：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">42</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">// 在栈上分配内存，不需要显式的 new</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>自定义类型（类对象）：</strong> 对于自定义类型，如果该类型的对象通过 <code>new</code> 关键字进行动态分配，则需要显式使用 <code>new</code>。例如：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyClass</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 构造函数</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token operator\\">~</span><span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 析构函数</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 显式使用 new 进行动态分配</span>\\n    MyClass<span class=\\"token operator\\">*</span> obj <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> MyClass<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// ...</span>\\n\\n    <span class=\\"token comment\\">// 显式使用 delete 进行释放</span>\\n    <span class=\\"token keyword\\">delete</span> obj<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
