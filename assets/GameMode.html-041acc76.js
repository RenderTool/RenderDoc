import{_ as l,a as d}from"./gamemodeinclue-310fc6c6.js";import{_ as c,r,o as i,c as p,d as s,w as e,e as o,a as n,b as t}from"./app-1fe256fd.js";const u="/RenderDoc/assets/gamemodesuper-78989f50.jpg",m="/RenderDoc/assets/gamemodecpp2bp-573cd184.png",h={},g=o('<h2 id="_1-新建gamemode类" tabindex="-1"><a class="header-anchor" href="#_1-新建gamemode类" aria-hidden="true">#</a> 1. 新建GameMode类</h2><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>类别</th><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>APawn class</td><td>游戏中的角色</td><td>代表游戏中的玩家、AI 或者其他角色。控制移动、动画、状态、碰撞等。</td></tr><tr><td>AHUD class</td><td>Heads-Up Display (HUD)</td><td>用于在屏幕上显示游戏信息，如分数、生命值、小地图等。通常负责在画面上绘制 UI 元素。</td></tr><tr><td>APlayerController class</td><td>玩家控制器</td><td>处理玩家输入，控制与玩家的交互，例如移动、攻击、交互等。可以操控一个或多个角色。</td></tr><tr><td>AGameState class</td><td>游戏状态</td><td>负责跟踪整个游戏的全局状态，例如游戏时间、分数、胜利条件等。用于同步状态给所有客户端。</td></tr><tr><td>APlayerState class</td><td>玩家状态</td><td>保存与玩家相关的状态，如分数、生命值、角色类型等。通常由服务器和客户端各自维护一份。</td></tr><tr><td>ASpectatorPawn class</td><td>观察者角色</td><td>允许玩家以观察者身份观察游戏，通常用于回放、录像功能或者观察比赛。不与玩家角色相关联，可以自由观察游戏世界。</td></tr></tbody></table><h2 id="_2-写入对应的类" tabindex="-1"><a class="header-anchor" href="#_2-写入对应的类" aria-hidden="true">#</a> 2. 写入对应的类</h2><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;GameMode/MenuPlayerController.h&quot;</span><span class="token comment">//引入对应头文件</span></span>
<span class="token class-name">AMainMenuGameMode</span><span class="token double-colon punctuation">::</span><span class="token function">AMainMenuGameMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 设置默认的PlayerController类</span>
    PlayerControllerClass <span class="token operator">=</span> <span class="token class-name">AMenuPlayerController</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),_=o(`<blockquote><p>以下截取自：GameModeBase.h,其他类类似写法。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token comment">/** The class of PlayerController to spawn for players logging in. */</span>
	<span class="token function">UPROPERTY</span><span class="token punctuation">(</span>EditAnywhere<span class="token punctuation">,</span> NoClear<span class="token punctuation">,</span> BlueprintReadOnly<span class="token punctuation">,</span> Category<span class="token operator">=</span>Classes<span class="token punctuation">)</span>
	TSubclassOf<span class="token operator">&lt;</span>APlayerController<span class="token operator">&gt;</span> PlayerControllerClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-编译使用or派生蓝图" tabindex="-1"><a class="header-anchor" href="#_3-编译使用or派生蓝图" aria-hidden="true">#</a> 3. 编译使用OR派生蓝图</h2>',4),v=n("figure",null,[n("img",{src:m,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function k(f,b){const a=r("ChatMessage");return i(),p("div",null,[s(a,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[t(" 使用C++来绑定GameMode的方法 ")]),_:1}),g,s(a,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[t(" 这里的PlayerControllerClass是GameMode父类中定义的subclass(子类) ")]),_:1}),_,s(a,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:e(()=>[t(" 可以在c++类目录中看到这个GameMode类，也可以再次基于这个GameMode派生蓝图类。 ")]),_:1}),v])}const M=c(h,[["render",k],["__file","GameMode.html.vue"]]);export{M as default};
