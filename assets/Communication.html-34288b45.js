import{_ as i,r as l,o as p,c as r,d as a,w as e,a as n,b as s,e as o}from"./app-89c110f4.js";const d="/RenderDoc/assets/2actor-d5d2d1a6.png",u="/RenderDoc/assets/testfunction-20c4aa72.png",k="/RenderDoc/assets/dyonghans-f914a165.png",v={},m=n("h2",{id:"命令台调用-commandlinecall",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#命令台调用-commandlinecall","aria-hidden":"true"},"#"),s(" 命令台调用|CommandLineCall")],-1),b=n("blockquote",null,[n("p",null,[n("strong",null,"语法：CE+函数名+空格+参数")])],-1),h=n("blockquote",null,[n("p",null,[n("strong",null,"语法：KE+类名+函数名")])],-1),f=n("h2",{id:"迭代查找-iterative-search",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#迭代查找-iterative-search","aria-hidden":"true"},"#"),s(" 迭代查找|Iterative search")],-1),g=o('<h3 id="蓝图" tabindex="-1"><a class="header-anchor" href="#蓝图" aria-hidden="true">#</a> 蓝图</h3><ol><li>新建两个actor放入场景。</li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>actor1中新建test001函数,actor2中新建test002函数</li></ol><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3.actor1中使用<code>getactorofclass</code>节点获取到actor2，并调用test2函数</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),_=n("h3",{id:"c",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c","aria-hidden":"true"},"#"),s(" c++")],-1),C=n("br",null,null,-1),y=n("br",null,null,-1),A=n("br",null,null,-1),x=n("hr",null,null,-1),W=n("span",{style:{color:"#c0392b"}},"getactorofclass",-1),j=o(`<h4 id="头文件-h" tabindex="-1"><a class="header-anchor" href="#头文件-h" aria-hidden="true">#</a> 头文件.h</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * 在世界中查找指定类的第一个Actor。
 * 这是一项耗时的操作，谨慎使用，例如不要在每一帧都使用。
 * @param ActorClass 要查找的Actor的类。必须指定，否则结果将为空。
 * @return 指定类的Actor。
 */</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Actor&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>WorldContext<span class="token operator">=</span><span class="token string">&quot;WorldContextObject&quot;</span><span class="token punctuation">,</span> DeterminesOutputType<span class="token operator">=</span><span class="token string">&quot;ActorClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AActor</span><span class="token operator">*</span> <span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w=n("p",null,[s("一个普通静态函数，返回类型是 "),n("code",null,"AActor*"),s("，即指向 "),n("code",null,"AActor"),s(" 类的指针。"),n("br"),s(" 在C++中，"),n("code",null,"static"),s(" 关键字用于指示该函数是属于类而不是类的实例，并且可以直接通过类名来调用，而不需要创建类的实例。")],-1),O=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass类的实例</span>
MyClass myObject<span class="token punctuation">;</span>

<span class="token comment">//如果函数是static实现，则不需要创建实例就可以直接调用</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 直接调用静态函数</span>
<span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),U=n("p",null,[s("所以"),n("code",null,"UGameplayStatics::GetActorOfClass"),s(" 可以直接调用，而不需要创建 "),n("code",null,"UGameplayStatics"),s(" 类的实例。")],-1),E=o(`<h4 id="源文件-cpp" tabindex="-1"><a class="header-anchor" href="#源文件-cpp" aria-hidden="true">#</a> 源文件.cpp</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>AActor<span class="token operator">*</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用QUICK_SCOPE_CYCLE_COUNTER进行性能分析，标记函数调用的性能</span>
    <span class="token function">QUICK_SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>UGameplayStatics_GetActorOfClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果未提供ActorClass，则不执行任何操作，直接返回nullptr</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClass<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 通过WorldContextObject获取当前世界的指针，如果失败则记录错误并返回nullptr</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>UWorld<span class="token operator">*</span> World <span class="token operator">=</span> GEngine<span class="token operator">-&gt;</span><span class="token function">GetWorldFromContextObject</span><span class="token punctuation">(</span>WorldContextObject<span class="token punctuation">,</span> EGetWorldErrorMode<span class="token double-colon punctuation">::</span>LogAndReturnNull<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 使用TActorIterator迭代World中的所有指定类型的Actor</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>TActorIterator<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> <span class="token function">It</span><span class="token punctuation">(</span>World<span class="token punctuation">,</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 获取当前迭代到的Actor指针</span>
                AActor<span class="token operator">*</span> Actor <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>
                <span class="token comment">// 返回找到的第一个符合条件的Actor</span>
                <span class="token keyword">return</span> Actor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果未找到符合条件的Actor，返回nullptr</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="委托-delegate" tabindex="-1"><a class="header-anchor" href="#委托-delegate" aria-hidden="true">#</a> 委托|Delegate</h2><h2 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface" aria-hidden="true">#</a> 接口|Interface</h2><h2 id="类型强转-cast" tabindex="-1"><a class="header-anchor" href="#类型强转-cast" aria-hidden="true">#</a> 类型强转|Cast</h2><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><p>https://forums.unrealengine.com/t/get-actor-of-class-vs-cast-to-class/597433</p>`,7);function G(q,I){const t=l("ChatMessage"),c=l("GifWithButton");return p(),r("div",null,[a(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[s(" UE软件内通信几种方法 ")]),_:1}),m,b,a(c,{src:"../../../assets/unrealgif/levelfunction.gif"}),h,a(c,{src:"../../../assets/unrealgif/keclassfunction.gif"}),f,a(t,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40},{default:e(()=>[s(" 迭代查找其实就是大海捞针。 ")]),_:1}),g,a(c,{src:"../../../assets/unrealgif/refencecom.gif"}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[s(" 细心的你应该已经发现了！关卡中必须都存在要通信的对象，不然会报错。 ")]),_:1}),_,a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 你以为这就结束了？好戏才刚刚开始！几个问题:"),C,s(" 1. 为什么要放在同一个关卡？"),y,s(" 2. 原理是什么？"),A]),_:1}),x,a(t,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 先来康康 "),W,s("节点实现 ")]),_:1}),j,a(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40,alignLeft:""},{default:e(()=>[w]),_:1}),a(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[s(" Baba我不懂什么叫创建类的实例！ ")]),_:1}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[s(" 给你举个例子吧！ ")]),_:1}),O,a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[U]),_:1}),E])}const L=i(v,[["render",G],["__file","Communication.html.vue"]]);export{L as default};
