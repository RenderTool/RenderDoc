const n=JSON.parse('{"key":"v-6309a789","path":"/language/cpp/modifiers_%E4%BF%AE%E9%A5%B0%E7%AC%A6_/Modifiers-Constants.html","title":"c++const","lang":"zh-CN","frontmatter":{"title":"c++const","order":1,"category":["c++"],"description":"const 修饰符用于声明常量（只读）。 常量成员函数： 当函数不修改对象的成员变量时，可以将函数声明为常量成员函数。这告诉编译器在函数体内部不允许修改对象的成员变量。这是为了确保调用常量对象上的这个函数时，不会修改对象的状态。 class MyClass { public: int getValue() const { return value; } private: int value; }; 参数为常量引用： 当函数不需要修改传递给它的参数时，可以将参数声明为常量引用。这有助于提高性能，避免复制大型对象，并表达了函数不会修改传递给它的对象。 void printValue(const int&amp; x) { std::cout &lt;&lt; x &lt;&lt; std::endl; } 返回常量引用： 当函数返回一个引用时，将其声明为常量引用有助于确保调用者无法修改函数返回的对象。 const int&amp; getMax(const int&amp; a, const int&amp; b) { return (a &gt; b) ? a : b; }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/modifiers_%E4%BF%AE%E9%A5%B0%E7%AC%A6_/Modifiers-Constants.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++const"}],["meta",{"property":"og:description","content":"const 修饰符用于声明常量（只读）。 常量成员函数： 当函数不修改对象的成员变量时，可以将函数声明为常量成员函数。这告诉编译器在函数体内部不允许修改对象的成员变量。这是为了确保调用常量对象上的这个函数时，不会修改对象的状态。 class MyClass { public: int getValue() const { return value; } private: int value; }; 参数为常量引用： 当函数不需要修改传递给它的参数时，可以将参数声明为常量引用。这有助于提高性能，避免复制大型对象，并表达了函数不会修改传递给它的对象。 void printValue(const int&amp; x) { std::cout &lt;&lt; x &lt;&lt; std::endl; } 返回常量引用： 当函数返回一个引用时，将其声明为常量引用有助于确保调用者无法修改函数返回的对象。 const int&amp; getMax(const int&amp; a, const int&amp; b) { return (a &gt; b) ? a : b; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-14T14:55:02.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-11-14T14:55:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++const\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-14T14:55:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"const 修饰符用于声明常量（只读）。","slug":"const-修饰符用于声明常量-只读-。","link":"#const-修饰符用于声明常量-只读-。","children":[]},{"level":2,"title":"const 常量来代替 #define 宏定义","slug":"const-常量来代替-define-宏定义","link":"#const-常量来代替-define-宏定义","children":[]},{"level":2,"title":"const 修饰指针","slug":"const-修饰指针","link":"#const-修饰指针","children":[{"level":3,"title":"底层 const（Low-level const）：","slug":"底层-const-low-level-const","link":"#底层-const-low-level-const","children":[]},{"level":3,"title":"顶层 const（Top-level const）：顶层 const 是指 const 修饰的是变量本身，表示该变量本身是不可修改的。","slug":"顶层-const-top-level-const-顶层-const-是指-const-修饰的是变量本身-表示该变量本身是不可修改的。","link":"#顶层-const-top-level-const-顶层-const-是指-const-修饰的是变量本身-表示该变量本身是不可修改的。","children":[]}]}],"git":{"createdTime":1699887822000,"updatedTime":1699973702000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":3}]},"readingTime":{"minutes":2.3,"words":691},"filePathRelative":"language/cpp/modifiers[修饰符]/Modifiers-Constants.md","localizedDate":"2023年11月13日","excerpt":"\\n<h2> <code>const</code> 修饰符用于声明常量（只读）。</h2>\\n<ol>\\n<li>\\n<p><strong>常量成员函数：</strong> 当函数不修改对象的成员变量时，可以将函数声明为常量成员函数。这告诉编译器在函数体内部不允许修改对象的成员变量。这是为了确保调用常量对象上的这个函数时，不会修改对象的状态。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyClass</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">getValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> value<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> value<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>参数为常量引用：</strong> 当函数不需要修改传递给它的参数时，可以将参数声明为常量引用。这有助于提高性能，避免复制大型对象，并表达了函数不会修改传递给它的对象。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">printValue</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> x <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>返回常量引用：</strong> 当函数返回一个引用时，将其声明为常量引用有助于确保调用者无法修改函数返回的对象。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> <span class=\\"token function\\">getMax</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&amp;</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>a <span class=\\"token operator\\">&gt;</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">?</span> a <span class=\\"token operator\\">:</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
