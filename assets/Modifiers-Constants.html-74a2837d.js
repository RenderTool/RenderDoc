import{_ as o,r as p,o as c,c as l,d as a,w as e,e as i,a as n,b as t}from"./app-2462d664.js";const d={},r=i(`<h2 id="const-修饰符用于声明常量-只读-。" tabindex="-1"><a class="header-anchor" href="#const-修饰符用于声明常量-只读-。" aria-hidden="true">#</a> <code>const</code> 修饰符用于声明常量（只读）。</h2><ol><li><p><strong>常量成员函数：</strong> 当函数不修改对象的成员变量时，可以将函数声明为常量成员函数。这告诉编译器在函数体内部不允许修改对象的成员变量。这是为了确保调用常量对象上的这个函数时，不会修改对象的状态。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>参数为常量引用：</strong> 当函数不需要修改传递给它的参数时，可以将参数声明为常量引用。这有助于提高性能，避免复制大型对象，并表达了函数不会修改传递给它的对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">printValue</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>返回常量引用：</strong> 当函数返回一个引用时，将其声明为常量引用有助于确保调用者无法修改函数返回的对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="const-常量来代替-define-宏定义" tabindex="-1"><a class="header-anchor" href="#const-常量来代替-define-宏定义" aria-hidden="true">#</a> <code>const</code> 常量来代替 #define 宏定义</h2><ol><li><p><strong>类型安全：</strong> 使用 <code>const</code> 常量提供了类型安全性，因为它们与变量一样有明确的数据类型。宏定义是简单的文本替换，没有类型检查，这可能导致不正确的类型使用。</p></li><li><p><strong>作用域限制：</strong><code>const</code> 常量具有作用域，而宏定义没有。宏定义是在预处理阶段进行文本替换，不受作用域的限制。<code>const</code> 常量可以更好地控制其可见性，仅在定义它的作用域内有效。</p></li><li><p><strong>调试友好：</strong> 使用 <code>const</code> 常量时，调试器能够提供更有意义的符号信息，因为它们是真正的标识符。宏定义只是简单的文本替换，可能导致调试信息不够清晰。</p></li><li><p><strong>避免副作用：</strong> 宏定义是在预处理阶段进行文本替换的，这可能导致一些副作用。<code>const</code> 常量是在编译期间创建的，没有类似宏定义的潜在问题。</p></li><li><p><strong>语法安全性：</strong><code>const</code> 常量通常与类型安全的语法一起使用，这有助于减少程序中的错误。宏定义是纯文本替换，容易引入错误，因为它没有语法结构。</p></li><li><p><strong>可读性：</strong><code>const</code> 常量有助于提高代码的可读性，因为它们是真正的变量，而不是简单的文本替换。在代码中使用有意义的常量名称可以使代码更易于理解。</p></li></ol><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3>`,5),u=n("p",null,[n("code",null,"# define day 7")],-1),k=n("blockquote",null,[n("p",null,"此时打印他的sizeof(day) = 4")],-1),v=n("p",null,[n("code",null,"# define day 7.")],-1),m=n("blockquote",null,[n("p",null,"此时打印他的sizeof(day) = 8")],-1);function g(h,b){const s=p("ChatMessage");return c(),l("div",null,[a(s,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[t(" 为什么C++ 中推荐使用 const 常量？ ")]),_:1}),r,a(s,{avatar:"../../../assets/emoji/bqb (6).png",avatarWidth:40},{default:e(()=>[t(" 举个例子一周7天，写成代码为 ")]),_:1}),u,k,a(s,{avatar:"../../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[t(" 很好这没问题，如果我不小心多打了个点 ")]),_:1}),v,m,a(s,{avatar:"../../../assets/emoji/blzt.png",avatarWidth:40},{default:e(()=>[t(" 细节决定成败，如果你觉得这种错误无关紧要，你可以跳过。 ")]),_:1})])}const f=o(d,[["render",g],["__file","Modifiers-Constants.html.vue"]]);export{f as default};
