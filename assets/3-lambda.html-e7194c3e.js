const e=JSON.parse('{"key":"v-287bdc3a","path":"/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html","title":"c++3.lambda表达式","lang":"zh-CN","frontmatter":{"title":"c++3.lambda表达式","order":3,"category":["c++"],"description":"函数式编程 函数式编程（Functional Programming）是一种编程范式，它将计算视为数学函数的求值，并避免了可变状态和可变数据。 函数式编程强调函数的纯粹性、不可变性和无副作用，这些特性使得程序更容易推理、测试和并行化。 lambda表达式 定义 语法 [capture](parameters) -&gt; return_type { // 函数体 }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/new_%E6%96%B0%E7%89%B9%E6%80%A7_/3-lambda.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++3.lambda表达式"}],["meta",{"property":"og:description","content":"函数式编程 函数式编程（Functional Programming）是一种编程范式，它将计算视为数学函数的求值，并避免了可变状态和可变数据。 函数式编程强调函数的纯粹性、不可变性和无副作用，这些特性使得程序更容易推理、测试和并行化。 lambda表达式 定义 语法 [capture](parameters) -&gt; return_type { // 函数体 }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-04T21:06:49.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-12-04T21:06:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++3.lambda表达式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-04T21:06:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"函数式编程","slug":"函数式编程","link":"#函数式编程","children":[]},{"level":2,"title":"lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":3,"title":"其他例子","slug":"其他例子","link":"#其他例子","children":[]}]}],"git":{"createdTime":1701724009000,"updatedTime":1701724009000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":3.14,"words":942},"filePathRelative":"language/cpp/new[新特性]/3-lambda.md","localizedDate":"2023年12月4日","excerpt":"\\n\\n\\n\\n<h2> 函数式编程</h2>\\n<blockquote>\\n<p>函数式编程（Functional Programming）是一种编程范式，它将计算视为数学函数的求值，并避免了可变状态和可变数据。\\n函数式编程强调函数的纯粹性、不可变性和无副作用，这些特性使得程序更容易推理、测试和并行化。</p>\\n</blockquote>\\n<figure><figcaption></figcaption></figure>\\n\\n<h2> lambda表达式</h2>\\n<h3> 定义</h3>\\n\\n<h3> 语法</h3>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token punctuation\\">[</span>capture<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span>parameters<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> return_type <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 函数体</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
