import{_ as l,r as c,o as i,c as u,d as a,w as e,a as s,b as n,e as o}from"./app-a6f3266e.js";const r="/RenderDoc/assets/2actor-d5d2d1a6.png",d="/RenderDoc/assets/testfunction-20c4aa72.png",k="/RenderDoc/assets/dyonghans-f914a165.png",v="/RenderDoc/assets/cppcastvsgetacotrofclass-c66993a3.png",m={},b=s("h2",{id:"蓝图-c-通信",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#蓝图-c-通信","aria-hidden":"true"},"#"),n(" 蓝图&C++通信")],-1),h=s("h2",{id:"命令台调用-commandlinecall",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#命令台调用-commandlinecall","aria-hidden":"true"},"#"),n(" 命令台调用|CommandLineCall")],-1),f=s("blockquote",null,[s("p",null,[s("strong",null,"语法：CE+函数名+空格+参数")])],-1),g=s("blockquote",null,[s("p",null,[s("strong",null,"语法：KE+类名+函数名")])],-1),y=s("p",null,[n("搜嘎!说到确认身份,我知道有个 "),s("code",null," get actor of class"),n(" 节点可以找到想要的actor对象.")],-1),_=o('<h2 id="迭代查找-iterative-search" tabindex="-1"><a class="header-anchor" href="#迭代查找-iterative-search" aria-hidden="true">#</a> 迭代查找|Iterative search</h2><h3 id="蓝图实践" tabindex="-1"><a class="header-anchor" href="#蓝图实践" aria-hidden="true">#</a> 蓝图实践</h3><ol><li>新建两个actor放入场景。</li></ol><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>actor1中新建test001函数,actor2中新建test002函数</li></ol><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>3.actor1中使用<code>getactorofclass</code>节点获取到actor2，并调用test2函数</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="完整动图" tabindex="-1"><a class="header-anchor" href="#完整动图" aria-hidden="true">#</a> 完整动图</h4>',9),C=s("hr",null,null,-1),w=s("h3",{id:"c-剖析",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#c-剖析","aria-hidden":"true"},"#"),n(" c++剖析")],-1),A=s("span",{style:{color:"#c0392b"}},"getactorofclass",-1),x=o(`<h4 id="头文件-h" tabindex="-1"><a class="header-anchor" href="#头文件-h" aria-hidden="true">#</a> 头文件.h</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">/**
 * 在世界中查找指定类的第一个Actor。
 * 这是一项耗时的操作，谨慎使用，例如不要在每一帧都使用。
 * @param ActorClass 要查找的Actor的类。必须指定，否则结果将为空。
 * @return 指定类的Actor。
 */</span>
<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category<span class="token operator">=</span><span class="token string">&quot;Actor&quot;</span><span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">(</span>WorldContext<span class="token operator">=</span><span class="token string">&quot;WorldContextObject&quot;</span><span class="token punctuation">,</span> DeterminesOutputType<span class="token operator">=</span><span class="token string">&quot;ActorClass&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AActor</span><span class="token operator">*</span> <span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),j=s("p",null,[n("一个普通静态函数，返回类型是 "),s("code",null,"AActor*"),n("，即指向 "),s("code",null,"AActor"),n(" 类的指针。"),s("br"),n(" 在C++中，"),s("code",null,"static"),n(" 关键字用于指示该函数是属于类而不是类的实例，并且可以直接通过类名来调用，而不需要创建类的实例。")],-1),T=o(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 创建一个MyClass类的实例</span>
MyClass myObject<span class="token punctuation">;</span>

<span class="token comment">//如果函数是static实现，则不需要创建实例就可以直接调用</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> myVariable<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 静态函数实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 直接调用静态函数</span>
<span class="token class-name">MyClass</span><span class="token double-colon punctuation">::</span><span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),O=s("p",null,[n("这里static修饰的了函数,因此 "),s("code",null,"UGameplayStatics::GetActorOfClass"),n(" 可以直接调用，而不需要创建 "),s("code",null,"UGameplayStatics"),n(" 类的实例。")],-1),W=o(`<h4 id="源文件-cpp" tabindex="-1"><a class="header-anchor" href="#源文件-cpp" aria-hidden="true">#</a> 源文件.cpp</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>AActor<span class="token operator">*</span> <span class="token class-name">UGameplayStatics</span><span class="token double-colon punctuation">::</span><span class="token function">GetActorOfClass</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span> WorldContextObject<span class="token punctuation">,</span> TSubclassOf<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> ActorClass<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 使用QUICK_SCOPE_CYCLE_COUNTER进行性能分析，标记函数调用的性能</span>
    <span class="token function">QUICK_SCOPE_CYCLE_COUNTER</span><span class="token punctuation">(</span>UGameplayStatics_GetActorOfClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果未提供ActorClass，则不执行任何操作，直接返回nullptr</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ActorClass<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 通过WorldContextObject获取当前世界的指针，如果失败则记录错误并返回nullptr</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>UWorld<span class="token operator">*</span> World <span class="token operator">=</span> GEngine<span class="token operator">-&gt;</span><span class="token function">GetWorldFromContextObject</span><span class="token punctuation">(</span>WorldContextObject<span class="token punctuation">,</span> EGetWorldErrorMode<span class="token double-colon punctuation">::</span>LogAndReturnNull<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            <span class="token comment">// 使用TActorIterator迭代World中的所有指定类型的Actor</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>TActorIterator<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> <span class="token function">It</span><span class="token punctuation">(</span>World<span class="token punctuation">,</span> ActorClass<span class="token punctuation">)</span><span class="token punctuation">;</span> It<span class="token punctuation">;</span> <span class="token operator">++</span>It<span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token comment">// 获取当前迭代到的Actor指针</span>
                AActor<span class="token operator">*</span> Actor <span class="token operator">=</span> <span class="token operator">*</span>It<span class="token punctuation">;</span>
                <span class="token comment">// 返回找到的第一个符合条件的Actor</span>
                <span class="token keyword">return</span> Actor<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 如果未找到符合条件的Actor，返回nullptr</span>
    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),I=s("br",null,null,-1),S=o(`<h2 id="类型强转-cast" tabindex="-1"><a class="header-anchor" href="#类型强转-cast" aria-hidden="true">#</a> 类型强转|Cast</h2><h4 id="头文件-h-1" tabindex="-1"><a class="header-anchor" href="#头文件-h-1" aria-hidden="true">#</a> 头文件.h</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">To</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">From</span><span class="token operator">&gt;</span>
To<span class="token operator">*</span> <span class="token function">Cast</span><span class="token punctuation">(</span>From<span class="token operator">*</span> Src<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="源文件-h" tabindex="-1"><a class="header-anchor" href="#源文件-h" aria-hidden="true">#</a> 源文件.h</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">To</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">From</span><span class="token operator">&gt;</span>
FORCEINLINE To<span class="token operator">*</span> <span class="token function">Cast</span><span class="token punctuation">(</span>From<span class="token operator">*</span> Src<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">// 确保类型是完整的，避免尝试在不完整类型之间进行转换</span>
	<span class="token keyword">static_assert</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>From<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>To<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Attempting to cast between incomplete types&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>Src<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">// 检查是否是接口类型</span>
		<span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>TIsIInterface<span class="token operator">&lt;</span>From<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Value<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 如果是接口类型，获取对应的UObject</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>UObject<span class="token operator">*</span> Obj <span class="token operator">=</span> Src<span class="token operator">-&gt;</span><span class="token function">_getUObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token comment">// 如果目标类型也是接口</span>
				<span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>TIsIInterface<span class="token operator">&lt;</span>To<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Value<span class="token punctuation">)</span>
				<span class="token punctuation">{</span>
					<span class="token comment">// 返回To类型对应的接口地址</span>
					<span class="token keyword">return</span> <span class="token punctuation">(</span>To<span class="token operator">*</span><span class="token punctuation">)</span>Obj<span class="token operator">-&gt;</span><span class="token function">GetInterfaceAddress</span><span class="token punctuation">(</span>To<span class="token double-colon punctuation">::</span><span class="token class-name">UClassType</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">else</span>
				<span class="token punctuation">{</span>
					<span class="token comment">// 如果目标类型不是接口，检查是否是目标类型的实例</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span>Obj<span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>To<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
					<span class="token punctuation">{</span>
						<span class="token keyword">return</span> <span class="token punctuation">(</span>To<span class="token operator">*</span><span class="token punctuation">)</span>Obj<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果启用了Cast Flags，并且目标类型有特定的Cast标志</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>UE_USE_CAST_FLAGS <span class="token operator">&amp;&amp;</span> TCastFlags<span class="token operator">&lt;</span>To<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Value <span class="token operator">!=</span> CASTCLASS_None<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 检查是否可以使用特定的Cast标志进行转换</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span><span class="token punctuation">)</span>Src<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">HasAnyCastFlag</span><span class="token punctuation">(</span>TCastFlags<span class="token operator">&lt;</span>To<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Value<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token punctuation">(</span>To<span class="token operator">*</span><span class="token punctuation">)</span>Src<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// 如果目标类型是接口类型</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token keyword">constexpr</span> <span class="token punctuation">(</span>TIsIInterface<span class="token operator">&lt;</span>To<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>Value<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 返回To类型对应的接口地址</span>
			<span class="token keyword">return</span> <span class="token punctuation">(</span>To<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>UObject<span class="token operator">*</span><span class="token punctuation">)</span>Src<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">GetInterfaceAddress</span><span class="token punctuation">(</span>To<span class="token double-colon punctuation">::</span><span class="token class-name">UClassType</span><span class="token double-colon punctuation">::</span><span class="token function">StaticClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			<span class="token comment">// 如果目标类型不是接口，检查是否是目标类型的实例</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> UObject<span class="token operator">*</span><span class="token punctuation">)</span>Src<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token generic-function"><span class="token function">IsA</span><span class="token generic class-name"><span class="token operator">&lt;</span>To<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token punctuation">(</span>To<span class="token operator">*</span><span class="token punctuation">)</span>Src<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 如果源指针为空或类型转换失败，返回空指针</span>
	<span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="委托-delegate" tabindex="-1"><a class="header-anchor" href="#委托-delegate" aria-hidden="true">#</a> 委托|Delegate</h2><h2 id="接口-interface" tabindex="-1"><a class="header-anchor" href="#接口-interface" aria-hidden="true">#</a> 接口|Interface</h2><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="getactorofclassvscast" tabindex="-1"><a class="header-anchor" href="#getactorofclassvscast" aria-hidden="true">#</a> <code>getactorofclass</code>vs<code>Cast</code></h3><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2><p>https://forums.unrealengine.com/t/get-actor-of-class-vs-cast-to-class/597433</p>',12);function U(q,E){const t=c("ChatMessage"),p=c("GifWithButton");return i(),u("div",null,[a(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:e(()=>[n(" Baba!UE软件内通信有哪些方法啊! ")]),_:1}),a(t,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 有很多,看你什么用途. ")]),_:1}),b,h,a(t,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 比如关卡中的函数可以用ce命令直接通信. ")]),_:1}),f,a(p,{src:"../../assets/unrealgif/levelfunction.gif"}),a(t,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40},{default:e(()=>[n(" 现在很少在关卡内写函数了吧,有没有直接调用actor内的函数方法? ")]),_:1}),a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 也有,可用用ke命令来通信,但关卡中也得有这个对象. ")]),_:1}),g,a(p,{src:"../../assets/unrealgif/keclassfunction.gif"}),a(t,{avatar:"../../assets/emoji/bqb (5).png",avatarWidth:40},{default:e(()=>[n(" 你说的这些方法只适合Debug,有没有高级点的方法! ")]),_:1}),a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(' 这些方法确实不算不上"通信",可所谓的通信不就是不就是双方确认身份,传递消息的过程嘛?就这一个过程给你什么启发? ')]),_:1}),a(t,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:e(()=>[y]),_:1}),_,a(p,{src:"../../assets/unrealgif/refencecom.gif"}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:e(()=>[n(" 为什么要放在同一个关卡？不然会报错。 ")]),_:1}),a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 你把他理解成在地球上找人,如果人不在地球上又怎么找得到呢? ")]),_:1}),C,w,a(t,{avatar:"../../assets/emoji/bqb (3).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" Baba还是带你康康 "),A,n("节点源码实现原理吧. ")]),_:1}),x,a(t,{avatar:"../../assets/emoji/hx.png",avatarWidth:40,alignLeft:""},{default:e(()=>[j]),_:1}),a(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[n(" Baba我不懂什么叫创建类的实例！ ")]),_:1}),a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 给你举个例子吧！ ")]),_:1}),T,a(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40,alignLeft:""},{default:e(()=>[O]),_:1}),W,a(t,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 现在可以回答之前的问题了"),I,n(" 原理已经很清楚了,世界中迭代查找指定类的第一个Actor。迭代器后续的文章中有详细介绍可以翻看。 ")]),_:1}),S])}const G=l(m,[["render",U],["__file","6-Communication.html.vue"]]);export{G as default};
