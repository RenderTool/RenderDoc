import{_ as o,r as c,o as l,c as i,d as s,w as a,e,b as t,a as p}from"./app-cfa973e1.js";const r="/RenderDoc/assets/bigfour-5b7e4001.png",u={},d=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;MyClass()&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~MyClass()&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    MyClass<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">delete</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),k=e("<ol><li><p><strong>自动释放内存：</strong></p><ul><li>通过使用智能指针，可以自动在对象不再需要时释放相关的内存。这有助于防止内存泄漏，即程序运行时没有释放不再使用的内存。</li></ul></li><li><p><strong>防止重复释放：</strong></p><ul><li>智能指针通过引用计数或拥有者模式等机制，可以防止多次释放同一块内存。这减少了因释放已经释放的内存而导致的运行时错误。</li></ul></li><li><p><strong>简化代码：</strong></p><ul><li>使用智能指针可以简化代码，避免手动管理内存的复杂性。开发者无需显式调用 <code>new</code> 和 <code>delete</code>，减少了出错的机会，提高了代码的可读性和可维护性。</li></ul></li><li><p><strong>异常安全性：</strong></p><ul><li>智能指针在异常发生时能够正确释放相关资源，确保程序在异常情况下也能保持正确的状态，避免资源泄漏。</li></ul></li><li><p><strong>更安全的多线程编程：</strong></p><ul><li>使用智能指针可以避免多线程环境下的资源竞争和访问冲突，从而提高代码的线程安全性。例如，<code>std::shared_ptr</code> 通过引用计数来管理资源，能够在多线程环境中正确地共享资源。</li></ul></li><li><p><strong>循环引用的处理：</strong></p><ul><li>在使用 <code>std::shared_ptr</code> 时，当存在循环引用（两个对象相互引用）时，智能指针可以通过引用计数解决循环引用导致的内存泄漏问题。</li></ul></li></ol>",1),v=p("p",null,[t("无非就是自己写一个模板类，然后重写"),p("code",null,"BigFour")],-1),m=e('<div class="hint-container note"><p class="hint-container-title">注</p><p><code>BigFour</code>C++专栏中已经介绍过了 <img src="'+r+`" alt="" loading="lazy"></p></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">MySmartPointer</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    T<span class="token operator">*</span> ptr<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 构造函数</span>
    <span class="token function">MySmartPointer</span><span class="token punctuation">(</span>T<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 拷贝构造函数</span>
    <span class="token function">MySmartPointer</span><span class="token punctuation">(</span><span class="token keyword">const</span> MySmartPointer<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ptr <span class="token operator">=</span> other<span class="token punctuation">.</span>ptr <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 移动构造函数</span>
    <span class="token function">MySmartPointer</span><span class="token punctuation">(</span>MySmartPointer<span class="token operator">&amp;&amp;</span> other<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span>
        ptr <span class="token operator">=</span> other<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>
        other<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 析构函数</span>
    <span class="token operator">~</span><span class="token function">MySmartPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重载赋值运算符</span>
    MySmartPointer<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> MySmartPointer<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>
            ptr <span class="token operator">=</span> other<span class="token punctuation">.</span>ptr <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取原始指针</span>
    T<span class="token operator">*</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重载箭头运算符</span>
    T<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 重载解引用运算符</span>
    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 MySmartPointer</span>
    MySmartPointer<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">myPtr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Value: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>myPtr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

    <span class="token comment">// 在作用域结束时，MySmartPointer 的析构函数会自动释放资源</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=e(`<ol><li><p><strong>TSharedPtr：</strong> 代表共享所有权的智能指针。多个 <code>TSharedPtr</code> 实例可以共享相同的对象，当最后一个引用超出范围时，对象会被销毁。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TSharedPtr<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> SharedObject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MakeShared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>TWeakPtr：</strong> 代表弱引用智能指针，通常与 <code>TSharedPtr</code> 一起使用，用于避免循环引用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TSharedPtr<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> SharedObject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MakeShared</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
TWeakPtr<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> WeakObject <span class="token operator">=</span> SharedObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>TUniquePtr：</strong> 代表独占所有权的智能指针。每个 <code>TUniquePtr</code> 实例拥有对对象的唯一所有权，用于确保资源的独占性。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TUniquePtr<span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span> UniqueObject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">MakeUnique</span><span class="token generic class-name"><span class="token operator">&lt;</span>MyClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>UPROPERTY 和 UPROPERTY_POINTER：</strong> 在UE4的中，<code>UPROPERTY</code> 用于声明成员变量，并可以与 <code>TWeakObjectPtr</code> 一起使用，以创建弱引用指针。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">UPROPERTY</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
TWeakObjectPtr<span class="token operator">&lt;</span>AActor<span class="token operator">&gt;</span> WeakActor<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>FObjectPtr：</strong> 代表一个智能指针，可以包含 <code>UObject</code> 类型的对象。用于管理UE的对象生命周期。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>FObjectPtr<span class="token operator">&lt;</span>UClass<span class="token operator">&gt;</span> MyObject <span class="token operator">=</span> <span class="token generic-function"><span class="token function">NewObject</span><span class="token generic class-name"><span class="token operator">&lt;</span>UClass<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol>`,1);function g(y,h){const n=c("chatmessage");return l(),i("div",null,[s(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:a(()=>[t(" C++的指针就已经谈虎色变了，UE中的所谓的智能指针会不会更难？ ")]),_:1}),s(n,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[t(" 首先，我们应该先理解为什么要用到智能指针。在这之前你先告诉我我们是怎么利用指针动态分配内存的？ ")]),_:1}),s(n,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:a(()=>[t(" 这个倒不难，C++中用new来申请堆上的内存空间，用delete释放对应的内存。 ")]),_:1}),d,s(n,{avatar:"../../assets/emoji/bqb (6).png",avatarWidth:40,alignLeft:""},{default:a(()=>[t(" Good!但这只是一个非常简单的甚至算不上项目的Demo，如果到具体的项目中，这个MyClass指针往往不会使用后里面释放。 这时候引入了一个叫做智能指针的内存管理工具，解决了以下几个与手动内存管理相关的问题： ")]),_:1}),k,s(n,{avatar:"../../assets/emoji/bqb (7).png",avatarWidth:40},{default:a(()=>[t(" 好家伙！一口气出现几个我只看过没理解透彻的词汇出来！怎么就实现自动释放内存了？又怎么。。。 ")]),_:1}),s(n,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[t(" 别急！我们慢慢深入。首先你先告诉我，如果你来设计一个所谓的智能指针，你会怎么保证他自动分配？防止重复释放？ ")]),_:1}),s(n,{avatar:"../../assets/emoji/bqb (7).png",avatarWidth:40},{default:a(()=>[v]),_:1}),m,s(n,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:a(()=>[t(" 没错，一个简单指针模板类就这么实现了！但还谈不上`智能`。 ")]),_:1}),b])}const f=o(u,[["render",g],["__file","10-PTRINUE.html.vue"]]);export{f as default};
