import{_ as c,r as i,o as p,c as r,d as a,w as t,a as n,b as s,e as l}from"./app-a799a61c.js";const d="/RenderDoc/assets/loadassets002-8dcd164b.png",u="/RenderDoc/assets/load001-e699c7e9.png",g="/RenderDoc/assets/loadassets-88d31cc8.png",m="/RenderDoc/assets/load002-1949574f.png",b={},k=n("h2",{id:"前置",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前置","aria-hidden":"true"},"#"),s(" 前置")],-1),v=l('<figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><strong>对象引用 (<code>TObjectPtr</code>):</strong><ul><li><strong>特性：</strong> 对象引用是强引用，它持有对 <code>UObject</code> 派生类对象的强引用，当对象销毁时，引用计数减少。</li><li><strong>用途：</strong> 适用于需要确保对象在引用期间不会被销毁的情况，例如需要持有一个具体对象的引用。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TObjectPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MyObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>软引用 (<code>TSoftObjectPtr</code>):</strong><ul><li><strong>特性：</strong> 软引用是一种弱引用，它不会增加对象的引用计数。如果对象被销毁，软引用会变为无效。</li><li><strong>用途：</strong> 适用于需要引用对象，但不要求对象一直存在的情况，例如在需要加载对象时，但不希望对象一直保持在内存中。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TSoftObjectPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MySoftObject<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>类引用 (<code>TSubclassOf</code>):</strong><ul><li><strong>特性：</strong> 类引用是用于引用类的一种方式，而不是类的实例。它不会增加类的引用计数。</li><li><strong>用途：</strong> 适用于需要引用类本身而不是类的实例的情况，例如在运行时动态生成对象的时候。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TSubclassOf<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MyClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><strong>软类引用 (<code>TSoftClassPtr</code>):</strong><ul><li><strong>特性：</strong> 软类引用是软引用的类版本，用于引用类，当类被销毁时，引用变为无效。</li><li><strong>用途：</strong> 类似于软引用，适用于需要引用类但不要求一直存在的情况，例如在需要加载类时。</li></ul></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>TSoftClassPtr<span class="token operator">&lt;</span>UYourClass<span class="token operator">&gt;</span> MySoftClass<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h3>`,10),h=l("<ol><li><p><strong>类 (Class):</strong></p><ul><li><strong>定义：</strong> 类是一个抽象的概念，是对相似对象的通用属性和行为的抽象描述。它定义了对象的结构和行为。</li><li><strong>特征：</strong> 类是一个模板或蓝图，描述了一组对象共同的特性和行为。</li><li><strong>例子：</strong> 如果我们考虑“汽车”作为一个类，它可能包括属性如“颜色”、“速度”、“品牌”以及行为如“启动”、“停止”等。</li></ul></li><li><p><strong>对象 (Object):</strong></p><ul><li><strong>定义：</strong> 对象是类的实例，是类的具体化。它是内存中的一个实体，具有类定义的属性和行为。</li><li><strong>特征：</strong> 对象是类的具体表现，具有类定义的特性和可以执行的方法。</li><li><strong>例子：</strong> 如果我们实例化一个特定的汽车对象，它可能具有特定的颜色、速度、品牌，以及可以执行启动和停止等方法。</li></ul></li><li><p><strong>关系：</strong></p><ul><li>类和对象之间的关系是抽象与具体的关系。一个类可以有多个对象的实例，每个对象都是该类的具体实现。</li><li>类定义了对象的结构和行为，而对象则是类的具体实例，具有类定义的属性和方法。</li><li>对象是类的实体化，可以看作是类的具体实例。</li></ul></li></ol>",1),f=n("h2",{id:"异步",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异步","aria-hidden":"true"},"#"),s(" 异步")],-1),_=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),x=l(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">//定义句柄</span>
TSharedPtr<span class="token operator">&lt;</span>FStreamableHandle<span class="token operator">&gt;</span> Handle<span class="token punctuation">;</span>

TSoftObjectPtr<span class="token operator">&lt;</span>UInventorySubConfig<span class="token operator">&gt;</span> SubConfig<span class="token punctuation">;</span><span class="token comment">//如果是软引用，需要先ToSoftObjectPath()，使用需要先ToSoftObjectPath重载版本</span>

<span class="token keyword">const</span> UInventoryTotalConfig<span class="token operator">*</span> SubConfig<span class="token punctuation">;</span><span class="token comment">//如果是对象指针，可以直接放进去,会有对应的重载版本</span>

<span class="token comment">//委托</span>
FStreamableDelegate SubConfigLoadDelegate <span class="token operator">=</span> <span class="token class-name">FStreamableDelegate</span><span class="token double-colon punctuation">::</span><span class="token function">CreateUObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>你的类<span class="token double-colon punctuation">::</span>回调函数<span class="token punctuation">,</span> Index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//异步加载</span>
Handle <span class="token operator">=</span> <span class="token class-name">UAssetManager</span><span class="token double-colon punctuation">::</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetStreamableManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RequestAsyncLoad</span><span class="token punctuation">(</span>SubConfig<span class="token punctuation">,</span> SubConfigLoadDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>

Handle<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//是否有效</span>
Handle<span class="token operator">-&gt;</span><span class="token function">HasLoadCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进度 </span>
Handle<span class="token punctuation">.</span><span class="token function">GetLoadedAsset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取资源</span>
Handle<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放句柄</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),S=l('<figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="同步" tabindex="-1"><a class="header-anchor" href="#同步" aria-hidden="true">#</a> 同步</h2><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>`,5),C={href:"https://www.cnblogs.com/shiroe/p/14710066.html",target:"_blank",rel:"noopener noreferrer"},j={href:"https://docs.unrealengine.com/5.3/zh-CN/asynchronous-asset-loading-in-unreal-engine/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.bilibili.com/video/BV1Mr4y1A7nZ/?t=1h03m33s&vd_source=fc61eb54bf3245afbff2be6b8c1ebfc2",target:"_blank",rel:"noopener noreferrer"},O={href:"https://qiita.com/Zi_su/items/81dc5b5e29a96ad2cecc",target:"_blank",rel:"noopener noreferrer"},T={href:"https://jdelezenne.github.io/Codex/UE4/Assets%20Streaming.html",target:"_blank",rel:"noopener noreferrer"};function w(L,U){const e=i("chatmessage"),o=i("ExternalLinkIcon");return p(),r("div",null,[a(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 资源加载的几种写法 ")]),_:1}),k,a(e,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 先来了解一下几个UE中的引用类型 ")]),_:1}),v,a(e,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:t(()=>[s(" 类和对象什么区别？ ")]),_:1}),h,a(e,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 所以这里的引用一般是实例化的对象，但不一定是实例化的类。 ")]),_:1}),f,_,a(e,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 这里主要记录一下UAssetManager的异步加载，异步加载一定要检查指针！对于高频加载操作千万别自己释放句柄！因为异步玩玩不是实时的，容易出现线程安全问题！ ")]),_:1}),x,a(e,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40,alignLeft:""},{default:t(()=>[s(" 对应的蓝图节点 ")]),_:1}),S,n("p",null,[n("a",C,[s("https://www.cnblogs.com/shiroe/p/14710066.html"),a(o)])]),n("p",null,[n("a",j,[s("官方文档"),a(o)])]),n("p",null,[n("a",y,[s("官方直播"),a(o)])]),n("p",null,[n("a",O,[s("https://qiita.com/Zi_su/items/81dc5b5e29a96ad2cecc"),a(o)])]),n("p",null,[n("a",T,[s("https://jdelezenne.github.io/Codex/UE4/Assets%20Streaming.html"),a(o)])])])}const A=c(b,[["render",w],["__file","15-LoadAsset.html.vue"]]);export{A as default};
