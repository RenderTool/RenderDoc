import{_ as t,r,o as l,c,d as n,w as o,a as p,b as a,e}from"./app-7db99f70.js";const i="/RenderDoc/assets/tomandjerry-a4375c93.jpg",k="/RenderDoc/assets/bindde-e3a84557.png",u={},d=p("h2",{id:"委托-delegate",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#委托-delegate","aria-hidden":"true"},"#"),a(" 委托|Delegate")],-1),v=p("figure",null,[p("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),p("figcaption")],-1),m=e('<ol><li><p><strong>泛型但类型安全的方式：</strong></p><ul><li>委托是一种泛型但类型安全的机制，允许在运行时动态绑定到对象的成员函数。这意味着你可以在不知道对象类型的情况下，安全地调用其成员函数。</li></ul></li><li><p><strong>动态绑定到任意对象的成员函数：</strong></p><ul><li>委托允许你动态地绑定到任意对象的成员函数。这种灵活性使得在运行时能够决定要调用的函数，而不需要在编译时就确定。</li></ul></li><li><p><strong>安全地复制委托对象：</strong></p><ul><li>复制委托对象是安全的。这意味着你可以创建一个委托的副本，而不会影响原始委托的状态。每个委托对象都独立于其他委托对象。</li></ul></li><li><p><strong>值传递委托需要在堆上分配内存：</strong></p><ul><li>值传递委托，即通过值传递委托对象，需要在堆上分配内存。这样的操作相对较慢，因此通常不推荐。最好通过引用传递委托，以避免额外的内存分配。</li></ul></li><li><p><strong>尽量通过引用传递委托：</strong></p><ul><li>为了避免性能开销，推荐通过引用传递委托，而不是通过值传递。这样可以避免在堆上分配内存，提高代码执行效率。</li></ul></li></ol><h2 id="源码一览" tabindex="-1"><a class="header-anchor" href="#源码一览" aria-hidden="true">#</a> 源码一览</h2>',2),b=e(`<blockquote><p><strong>以下注释来自Engine\\Source\\Runtime\\Core\\Public\\Delegates\\Delegate.h</strong></p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>
C<span class="token operator">++</span> DELEGATES
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
This system allows you to call member functions on C<span class="token operator">++</span> objects in a generic<span class="token punctuation">,</span> yet type<span class="token operator">-</span>safe way<span class="token punctuation">.</span>
该系统允许以一种通用但类型安全的方式调用C<span class="token operator">++</span>对象上的成员函数。

Using delegates<span class="token punctuation">,</span> you can dynamically bind to a member function of an arbitrary object<span class="token punctuation">,</span>
使用委托，您可以动态绑定到任意对象的成员函数，

then call functions on the object<span class="token punctuation">,</span> even <span class="token keyword">if</span> the caller doesn<span class="token char">&#39;t know the object&#39;</span>s type<span class="token punctuation">.</span>
然后调用对象上的函数，即使调用方不知道对象的类型。
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
The system predefines various combinations of generic function signatures with which you can
declare a delegate type from<span class="token punctuation">,</span> filling in the type names <span class="token keyword">for</span> <span class="token keyword">return</span> value <span class="token operator">and</span> parameters with
该系统预定义了各种通用函数签名的组合，您可以从中声明委托类型，填充返回值和参数的类型名称

whichever types you need<span class="token punctuation">.</span>
根据您需要填充。
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>

Both single<span class="token operator">-</span>cast <span class="token operator">and</span> multi<span class="token operator">-</span>cast delegates are supported<span class="token punctuation">,</span> as well as <span class="token string">&quot;dynamic&quot;</span> delegates which
can be serialized to disk <span class="token operator">and</span> accessed from blueprints<span class="token punctuation">.</span>  Additionally<span class="token punctuation">,</span> delegates may define 
支持单播和多播委托，以及可序列化到磁盘并从蓝图中访问的“动态”委托。此外，委托可以定义

<span class="token string">&quot;payload&quot;</span> data which will be stored <span class="token operator">and</span> passed directly to bound functions<span class="token punctuation">.</span>
“payload”数据，该数据将被存储并直接传递给绑定的函数。 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>DELEGATE FEATURES
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
Currently we support delegate signatures <span class="token keyword">using</span> any combination of the following<span class="token operator">:</span>
目前，我们支持使用以下任意组合的委托签名：
    <span class="token operator">-</span> Functions returning a value
    <span class="token operator">-</span> 返回值为函数
    
    <span class="token operator">-</span> Up to four <span class="token string">&quot;payload&quot;</span> variables
    <span class="token operator">-</span> 最多四个“payload”变量
    
    <span class="token operator">-</span> Multiple function parameters depending on macro<span class="token operator">/</span><span class="token keyword">template</span> declaration
    <span class="token operator">-</span> 根据宏<span class="token operator">/</span>模板声明的多个函数参数
    
    <span class="token operator">-</span> Functions declared as <span class="token char">&#39;const&#39;</span>
    <span class="token operator">-</span> 以 <span class="token char">&#39;const&#39;</span> 声明的函数

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 
Multi<span class="token operator">-</span>cast delegates are also supported<span class="token punctuation">,</span> <span class="token keyword">using</span> the <span class="token char">&#39;DECLARE_MULTICAST_DELEGATE...&#39;</span> macros<span class="token punctuation">.</span>
还支持多播委托，使用 <span class="token char">&#39;DECLARE_MULTICAST_DELEGATE...&#39;</span> 宏。

Multi<span class="token operator">-</span>cast delegates allow you to attach multiple function delegates<span class="token punctuation">,</span> then execute them all at
once by calling a single <span class="token string">&quot;Broadcast()&quot;</span> function<span class="token punctuation">.</span>  
多播委托允许您附加多个函数委托，然后通过调用单个 <span class="token string">&quot;Broadcast()&quot;</span> 函数一次性执行它们。

Multi<span class="token operator">-</span>cast delegate signatures are <span class="token operator">not</span> allowed to use a <span class="token keyword">return</span> value<span class="token punctuation">.</span>
多播委托的签名不允许使用返回值。 

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   
Unlike other types<span class="token punctuation">,</span> dynamic delegates are integrated into the UObject reflection system <span class="token operator">and</span> can be
bound to blueprint<span class="token operator">-</span>implemented functions <span class="token operator">or</span> serialized to disk<span class="token punctuation">.</span> 
与其他类型不同，动态委托被集成到UObject反射系统中，并可以绑定到蓝图实现的函数或序列化到磁盘。
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> 

You can also bind native functions<span class="token punctuation">,</span>but the native functions need to be declared with UFUNCTION markup<span class="token punctuation">.</span> 
您还可以绑定本机函数，但本机函数需要用UFUNCTION标记声明。

You <span class="token keyword">do</span> <span class="token operator">not</span> need to use UFUNCTION <span class="token keyword">for</span> functions bound to other types of delegates<span class="token punctuation">.</span>
您无需对绑定到其他类型委托的函数使用 UFUNCTION。 

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    
You can assign <span class="token string">&quot;payload data&quot;</span> to your delegates<span class="token operator">!</span>  These are arbitrary variables that will be passed
directly to any bound function when it is invoked<span class="token punctuation">.</span> 
您可以为委托分配“负载数据”！这些是在调用时直接传递给任何绑定的函数的任意变量。

This is really useful as it allows you to store <span class="token punctuation">.</span>parameters within the delegate itself at bind<span class="token operator">-</span>time<span class="token punctuation">.</span> 
All delegate <span class="token function">types</span> <span class="token punctuation">(</span>except <span class="token keyword">for</span> <span class="token string">&quot;dynamic&quot;</span><span class="token punctuation">)</span> supports payload variables automatically<span class="token operator">!</span>
这非常有用，因为它允许您在绑定时在委托本身中存储参数。所有委托类型（除了“动态”）都自动支持负载变量！

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    
When binding to a delegate<span class="token punctuation">,</span> you can pass payload data along<span class="token punctuation">.</span>  This example passes two custom variables<span class="token punctuation">,</span>
a <span class="token keyword">bool</span> <span class="token operator">and</span> an int32 to a delegate<span class="token punctuation">.</span> 
在绑定到委托时，您可以传递负载数据。此示例将两个自定义变量（<span class="token keyword">bool</span>和int32）传递给委托。

Then when the delegate is invoked<span class="token punctuation">,</span> these parameters will be passed
然后，当调用委托时，这些参数将传递到您的绑定函数。

to your bound function<span class="token punctuation">.</span>  The extra variable arguments must always be accepted after the delegate
type parameter arguments<span class="token punctuation">.</span>
额外的变量参数必须始终在委托类型参数参数之后接受。 
  
  
    MyDelegate<span class="token punctuation">.</span><span class="token function">BindStatic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyFunction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Remember to look at the signature table at the bottom of <span class="token keyword">this</span> documentation comment <span class="token keyword">for</span> the macro names 
to use <span class="token keyword">for</span> each function signature type<span class="token punctuation">,</span> <span class="token operator">and</span> the binding table to see options <span class="token operator">and</span> concerns <span class="token keyword">for</span> binding<span class="token punctuation">.</span>

请记住查看文档注释底部的签名表，了解每种函数签名类型使用的宏名称，并查看绑定表以了解绑定的选项和注意事项。
   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本段梗概</strong></p><ol><li><p><strong>支持的委托签名：</strong></p><ul><li>支持使用各种组合的委托签名，包括： <ul><li>返回值为函数</li><li>最多四个 &quot;payload&quot; 变量</li><li>根据宏/模板声明的多个函数参数</li><li>以 &#39;const&#39; 声明的函数</li></ul></li></ul></li><li><p><strong>多播委托：</strong></p><ul><li>支持多播委托，使用 &#39;DECLARE_MULTICAST_DELEGATE...&#39; 宏。</li><li>多播委托允许附加多个函数委托，然后通过调用 &quot;Broadcast()&quot; 函数一次性执行它们。</li><li>多播委托的签名不允许使用返回值。</li></ul></li><li><p><strong>动态委托：</strong></p><ul><li>与其他类型不同，动态委托集成到 UObject 反射系统中，可以绑定到蓝图实现的函数或序列化到磁盘。</li></ul></li><li><p><strong>本机函数绑定：</strong></p><ul><li>可以绑定本机函数，但需要使用 UFUNCTION 标记声明本机函数。</li><li>对于绑定到其他类型委托的函数，无需使用 UFUNCTION。</li></ul></li><li><p><strong>负载数据：</strong></p><ul><li>可以为委托分配 &quot;payload 数据&quot;，这些是在调用时直接传递给任何绑定函数的任意变量。</li><li>允许在绑定时在委托本身中存储参数，除了 &quot;动态&quot; 委托，所有委托类型都自动支持负载变量。</li></ul></li><li><p><strong>绑定时传递负载数据：</strong></p><ul><li>在绑定到委托时，可以传递负载数据。示例中传递了两个自定义变量（bool 和 int32）给委托。</li><li>在调用委托时，这些参数将传递到绑定的函数，额外的变量参数必须始终在委托类型参数参数之后接受。</li></ul></li><li><p><strong>参考签名表和绑定表：</strong></p><ul><li>查看文档注释底部的签名表，以了解每种函数签名类型使用的宏名称。</li><li>查看绑定表，了解绑定的选项和注意事项。</li></ul></li></ol>`,5),g=e(`<div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam</span><span class="token punctuation">(</span>FOnPropertyValueChanged<span class="token punctuation">,</span> FName<span class="token punctuation">,</span> PropertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>这里，FOnPropertyValueChanged 是一个委托类型，它包含一个参数 PropertyName， 这个参数可以被视为 &quot;payload 变量&quot;，在触发委托时传递给相关的函数。</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>DELEGATES EXAMPLE
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
Suppose you have a <span class="token keyword">class</span> <span class="token class-name">with</span> a method that you<span class="token number">&#39;</span>d like to be able to call from anywhere<span class="token operator">:</span>
假设您有一个希望能够从任何地方调用的类方法：
 
    <span class="token keyword">class</span> <span class="token class-name">FLogWriter</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">WriteToLog</span><span class="token punctuation">(</span>FString<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

To call the WriteToLog function<span class="token punctuation">,</span> we<span class="token number">&#39;ll</span> need to create a delegate type <span class="token keyword">for</span> that function<span class="token number">&#39;</span>s signature<span class="token punctuation">.</span>
为了调用 WriteToLog 函数，我们需要为该函数的签名创建一个委托类型。

To <span class="token keyword">do</span> <span class="token keyword">this</span><span class="token punctuation">,</span> you will first declare the delegate <span class="token keyword">using</span> one of the macros below<span class="token punctuation">.</span>  For example<span class="token punctuation">,</span> here
is a simple delegate type<span class="token operator">:</span>
为此，您将首先使用下面的宏声明委托。例如，这里有一个简单的委托类型：
      
<span class="token function">DECLARE_DELEGATE_OneParam</span><span class="token punctuation">(</span>FStringDelegate<span class="token punctuation">,</span> FString<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
This creates a delegate type called <span class="token char">&#39;FStringDelegate&#39;</span> that takes a single parameter of type <span class="token char">&#39;FString&#39;</span><span class="token punctuation">.</span>
这将创建一个名为 <span class="token char">&#39;FStringDelegate&#39;</span> 的委托类型，该类型接受一个 <span class="token char">&#39;FString&#39;</span> 类型的单个参数。
 
Here<span class="token char">&#39;s an example of how you&#39;</span>d use <span class="token keyword">this</span> <span class="token char">&#39;FStringDelegate&#39;</span> in a <span class="token keyword">class</span><span class="token operator">:</span>
以下是在类中使用 <span class="token char">&#39;FStringDelegate&#39;</span> 的示例：
 
    <span class="token keyword">class</span> <span class="token class-name">FMyClass</span>
    <span class="token punctuation">{</span>
        FStringDelegate WriteToLogDelegate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
This allows your <span class="token keyword">class</span> <span class="token class-name">to</span> hold a pointer to a method in an arbitrary <span class="token keyword">class</span><span class="token punctuation">.</span>  The only thing the
<span class="token keyword">class</span> <span class="token class-name">really</span> knows about <span class="token keyword">this</span> delegate is its function signature<span class="token punctuation">.</span>
这使得您的类可以保存指向任意类中的方法的指针。类实际上只知道这个委托的函数签名。
 
Now<span class="token punctuation">,</span> to assign the delegate<span class="token punctuation">,</span> simply create an instance of your delegate <span class="token keyword">class</span><span class="token punctuation">,</span> passing along the
<span class="token keyword">class</span> <span class="token class-name">that</span> owns the method as a <span class="token keyword">template</span> parameter<span class="token punctuation">.</span>
现在，要分配委托，只需创建委托类的实例，将拥有该方法的类传递为模板参数。

You<span class="token number">&#39;ll</span> also pass the instance of your object
<span class="token operator">and</span> the actual function address of the method<span class="token punctuation">.</span>  So<span class="token punctuation">,</span> here we<span class="token char">&#39;ll create an instance of our &#39;</span>FLogWriter<span class="token number">&#39;</span>
您还将传递对象实例和方法的实际函数地址。因此，在这里我们将创建 <span class="token char">&#39;FLogWriter&#39;</span> 类的实例，

<span class="token keyword">class</span><span class="token punctuation">,</span> then create a delegate <span class="token keyword">for</span> the <span class="token char">&#39;WriteToLog&#39;</span> method of that object instance<span class="token operator">:</span>
然后为该对象实例的 <span class="token char">&#39;WriteToLog&#39;</span> 方法创建一个委托：
       
FSharedRef<span class="token operator">&lt;</span>FLogWriter<span class="token operator">&gt;</span> <span class="token function">LogWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">FLogWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">BindSP</span><span class="token punctuation">(</span>LogWriter<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FLogWriter<span class="token double-colon punctuation">::</span>WriteToLog<span class="token punctuation">)</span><span class="token punctuation">;</span>
 

You<span class="token number">&#39;</span>ve just dynamically bound a delegate to a method of a <span class="token keyword">class</span><span class="token operator">!</span>  Pretty simple<span class="token punctuation">,</span> right<span class="token operator">?</span>
您刚刚动态绑定了一个委托到一个类的方法！相当简单，对吧？
 
Note that the <span class="token char">&#39;SP&#39;</span> part of <span class="token char">&#39;BindSP&#39;</span> stands <span class="token keyword">for</span> <span class="token char">&#39;shared pointer&#39;</span><span class="token punctuation">,</span> because we<span class="token number">&#39;</span>re binding to an
object that<span class="token number">&#39;</span>s owned by a shared pointer<span class="token punctuation">.</span> 
请注意，<span class="token char">&#39;BindSP&#39;</span> 中的 <span class="token char">&#39;SP&#39;</span> 代表 <span class="token char">&#39;shared pointer&#39;</span>，因为我们正在绑定到由共享指针拥有的对象。

There are versions <span class="token keyword">for</span> different object types<span class="token punctuation">,</span>
such as <span class="token function">BindRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">BindUObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>  You can bind to global function pointers with <span class="token function">BindStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
有不同对象类型的版本，如 <span class="token function">BindRaw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">BindUObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>。您可以使用 <span class="token function">BindStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 绑定到全局函数指针。
      
      
Now<span class="token punctuation">,</span> your <span class="token char">&#39;WriteToLog&#39;</span> method can be called by FMyClass without it even knowing anything about
the <span class="token char">&#39;FLogWriter&#39;</span> <span class="token keyword">class</span><span class="token operator">!</span>  To call your delegate<span class="token punctuation">,</span> just use the <span class="token char">&#39;Execute()&#39;</span> method<span class="token operator">:</span>
现在，FMyClass 可以调用 <span class="token char">&#39;WriteToLog&#39;</span> 方法，甚至不知道 <span class="token char">&#39;FLogWriter&#39;</span> 类的存在！要调用委托，只需使用 <span class="token char">&#39;Execute()&#39;</span> 方法：       

WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Delegates are spiffy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
If you call <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> before binding a function to the delegate<span class="token punctuation">,</span> an assertion will be triggered<span class="token punctuation">.</span>  In
many cases<span class="token punctuation">,</span> you<span class="token number">&#39;ll</span> instead want to <span class="token keyword">do</span> <span class="token keyword">this</span><span class="token operator">:</span>
如果在将函数绑定到委托之前调用 <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，将触发断言。在许多情况下，您可能希望执行以下操作： 
   
WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Only executes if a function was bound!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


That<span class="token number">&#39;</span>s pretty much all there is to it<span class="token operator">!</span><span class="token operator">!</span>  You can read below <span class="token keyword">for</span> a bit more information<span class="token punctuation">.</span>
就是这样！您可以在下面阅读更多信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>本段梗概</strong></p><p><strong>1. 被调函数</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FLogWriter</span>
<span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">WriteToLog</span><span class="token punctuation">(</span>FString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>定义委托类型</strong></li></ol><blockquote><p>语法 委托类型(委托类型名称，参数列表)</p></blockquote><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>  <span class="token comment">//&#39;FStringDelegate&#39; 的委托类型，该类型接受一个 &#39;FString&#39; 类型的单个参数。</span>
  <span class="token function">DECLARE_DELEGATE_OneParam</span><span class="token punctuation">(</span>FStringDelegate<span class="token punctuation">,</span> FString<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>DECLARE_DELEGATE_OneParam</code>：</strong> 宏的名称，用于声明带有一个参数的委托。</li><li><strong><code>DelegateType</code>：</strong> 您要声明的委托的类型名称。</li><li><strong><code>ParameterType</code>：</strong> 委托的参数类型。在这个例子中，是一个参数的类型，表示委托被调用时将传递的数据类型。</li></ul><ol start="3"><li><strong>类中声明委托实例</strong></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">FMyClass</span>
<span class="token punctuation">{</span>
    FStringDelegate WriteToLogDelegate<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><p><strong>创建委托实例并绑定方法：</strong></p><ul><li>创建了一个 <code>FLogWriter</code> 类的实例 <code>LogWriter</code>，然后使用 <code>BindSP</code> 方法将 <code>WriteToLogDelegate</code> 委托绑定到 <code>FLogWriter::WriteToLog</code> 方法。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>FSharedRef<span class="token operator">&lt;</span>FLogWriter<span class="token operator">&gt;</span> <span class="token function">LogWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">FLogWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">BindSP</span><span class="token punctuation">(</span>LogWriter<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FLogWriter<span class="token double-colon punctuation">::</span>WriteToLog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这一步实现了动态绑定，使得 <code>WriteToLogDelegate</code> 委托现在可以调用 <code>FLogWriter::WriteToLog</code> 方法。</p></li><li><p><strong>调用委托：</strong></p><ul><li>使用 <code>Execute</code> 方法调用委托，传递一个 <code>FString</code> 参数。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Delegates are spiffy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>如果在绑定函数之前调用 <code>Execute</code>，将触发断言。通常，应该使用 <code>ExecuteIfBound</code> 方法，该方法仅在函数已绑定时才执行。</li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>WriteToLogDelegate<span class="token punctuation">.</span><span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span><span class="token function">TEXT</span><span class="token punctuation">(</span><span class="token string">&quot;Only executes if a function was bound!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>MORE INFORMATION
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
The delegate system understands certain types of objects<span class="token punctuation">,</span> <span class="token operator">and</span> additional features are enabled when
<span class="token keyword">using</span> these objects<span class="token punctuation">.</span>  
委托系统了解某些类型的对象，并在使用这些对象时启用附加功能。

If you bind a delegate to a member of a UObject <span class="token operator">or</span> shared pointer <span class="token keyword">class</span><span class="token punctuation">,</span> the
delegate system can keep a weak reference to the object<span class="token punctuation">,</span> so that <span class="token keyword">if</span> the object gets destroyed out
如果将委托绑定到UObject或共享指针类的成员，委托系统可以保持对对象的弱引用，

from underneath the delegate<span class="token punctuation">,</span> you<span class="token number">&#39;ll</span> be able to handle these cases by calling <span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span>
<span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> functions<span class="token punctuation">.</span>  Note the special binding syntax <span class="token keyword">for</span> the various types of supported objects<span class="token punctuation">.</span>
这样，如果对象在委托下方被销毁，您将能够通过调用<span class="token function">IsBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>或<span class="token function">ExecuteIfBound</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数来处理这些情况。请注意支持的对象类型的各种类型的特殊绑定语法。 
   
It<span class="token number">&#39;</span>s perfectly safe to copy delegate objects<span class="token punctuation">.</span>  Delegates can be passed around by value but <span class="token keyword">this</span> is
generally <span class="token operator">not</span> recommended since they <span class="token keyword">do</span> have to allocate memory on the heap<span class="token punctuation">.</span> 
复制委托对象是完全安全的。可以通过值传递委托，但通常不建议这样做，因为它们必须在堆上分配内存。

Pass them by reference when possible<span class="token operator">!</span>
尽可能通过引用传递它们！ 

Delegate signature declarations can exist at global scope<span class="token punctuation">,</span> within a <span class="token keyword">namespace</span> <span class="token operator">or</span> even within a <span class="token keyword">class</span>
<span class="token class-name">declaration</span> <span class="token punctuation">(</span>but <span class="token operator">not</span> function bodies<span class="token punctuation">.</span><span class="token punctuation">)</span>
委托签名声明可以存在于全局范围、命名空间内，甚至可以存在于类声明内（但不能存在于函数体内）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>FUNCTION SIGNATURES
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
Use <span class="token keyword">this</span> table to find the declaration macro to use to declare your delegate<span class="token punctuation">.</span>
使用此表查找用于声明委托的宏。
The full list is defined in DelegateCombinations<span class="token punctuation">.</span>h
完整列表在DelegateCombinations<span class="token punctuation">.</span>h中定义。
 
   Function signature                                   <span class="token operator">|</span>   Declaration macro
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
   <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                      <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE</span><span class="token punctuation">(</span> DelegateName <span class="token punctuation">)</span>
   <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span> <span class="token punctuation">)</span>                            <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE_OneParam</span><span class="token punctuation">(</span> DelegateName<span class="token punctuation">,</span> Param1Type <span class="token punctuation">)</span>
   <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Param2<span class="token operator">&gt;</span> <span class="token punctuation">)</span>                  <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE_TwoParams</span><span class="token punctuation">(</span> DelegateName<span class="token punctuation">,</span> Param1Type<span class="token punctuation">,</span> Param2Type <span class="token punctuation">)</span>
   <span class="token keyword">void</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Param2<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>             <span class="token operator">|</span>   DECLARE_DELEGATE_<span class="token operator">&lt;</span>Num<span class="token operator">&gt;</span><span class="token function">Params</span><span class="token punctuation">(</span> DelegateName<span class="token punctuation">,</span> Param1Type<span class="token punctuation">,</span> Param2Type<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
   <span class="token operator">&lt;</span>RetVal<span class="token operator">&gt;</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                  <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE_RetVal</span><span class="token punctuation">(</span> RetValType<span class="token punctuation">,</span> DelegateName <span class="token punctuation">)</span>
   <span class="token operator">&lt;</span>RetVal<span class="token operator">&gt;</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span> <span class="token punctuation">)</span>                        <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE_RetVal_OneParam</span><span class="token punctuation">(</span> RetValType<span class="token punctuation">,</span> DelegateName<span class="token punctuation">,</span> Param1Type <span class="token punctuation">)</span>
   <span class="token operator">&lt;</span>RetVal<span class="token operator">&gt;</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Param2<span class="token operator">&gt;</span> <span class="token punctuation">)</span>              <span class="token operator">|</span>   <span class="token function">DECLARE_DELEGATE_RetVal_TwoParams</span><span class="token punctuation">(</span> RetValType<span class="token punctuation">,</span> DelegateName<span class="token punctuation">,</span> Param1Type<span class="token punctuation">,</span> Param2Type <span class="token punctuation">)</span>
   <span class="token operator">&lt;</span>RetVal<span class="token operator">&gt;</span> <span class="token function">Function</span><span class="token punctuation">(</span> <span class="token operator">&lt;</span>Param1<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Param2<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>         <span class="token operator">|</span>   DECLARE_DELEGATE_RetVal_<span class="token operator">&lt;</span>Num<span class="token operator">&gt;</span><span class="token function">Params</span><span class="token punctuation">(</span> RetValType<span class="token punctuation">,</span> DelegateName<span class="token punctuation">,</span> Param1Type<span class="token punctuation">,</span> Param2Type<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
 
   Remember<span class="token punctuation">,</span> there are three different delegate types you can <span class="token function">define</span> <span class="token punctuation">(</span>any of the above signatures will work<span class="token punctuation">)</span><span class="token operator">:</span>
 
                        Single<span class="token operator">-</span>cast delegates<span class="token operator">:</span>  DECLARE_DELEGATE<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                         Multi<span class="token operator">-</span>cast delegates<span class="token operator">:</span>  DECLARE_MULTICAST_DELEGATE<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">Dynamic</span> <span class="token punctuation">(</span>UObject<span class="token punctuation">,</span> serializable<span class="token punctuation">)</span> delegates<span class="token operator">:</span>  DECLARE_DYNAMIC_DELEGATE<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="委托类型" tabindex="-1"><a class="header-anchor" href="#委托类型" aria-hidden="true">#</a> 委托类型</h3><p>有三种不同的委托类型可供定义：</p><ul><li>单播委托：<code>DECLARE_DELEGATE...()</code></li><li>多播委托：<code>DECLARE_MULTICAST_DELEGATE...()</code></li><li>动态（UObject，可序列化）委托：<code>DECLARE_DYNAMIC_DELEGATE...()</code></li></ul><h3 id="委托宏声明" tabindex="-1"><a class="header-anchor" href="#委托宏声明" aria-hidden="true">#</a> 委托宏声明</h3><table><thead><tr><th>Function Signature</th><th>Declaration Macro</th></tr></thead><tbody><tr><td><code>void Function()</code></td><td><code>DECLARE_DELEGATE(DelegateName)</code></td></tr><tr><td><code>void Function(&lt;Param1&gt;)</code></td><td><code>DECLARE_DELEGATE_OneParam(DelegateName, Param1Type)</code></td></tr><tr><td><code>void Function(&lt;Param1&gt;, &lt;Param2&gt;)</code></td><td><code>DECLARE_DELEGATE_TwoParams(DelegateName, Param1Type, Param2Type)</code></td></tr><tr><td><code>void Function(&lt;Param1&gt;, &lt;Param2&gt;, ...)</code></td><td><code>DECLARE_DELEGATE_&lt;Num&gt;Params(DelegateName, Param1Type, Param2Type, ...)</code></td></tr><tr><td><code>&lt;RetVal&gt; Function()</code></td><td><code>DECLARE_DELEGATE_RetVal(RetValType, DelegateName)</code></td></tr><tr><td><code>&lt;RetVal&gt; Function(&lt;Param1&gt;)</code></td><td><code>DECLARE_DELEGATE_RetVal_OneParam(RetValType, DelegateName, Param1Type)</code></td></tr><tr><td><code>&lt;RetVal&gt; Function(&lt;Param1&gt;, &lt;Param2&gt;)</code></td><td><code>DECLARE_DELEGATE_RetVal_TwoParams(RetValType, DelegateName, Param1Type, Param2Type)</code></td></tr><tr><td><code>&lt;RetVal&gt; Function(&lt;Param1&gt;, &lt;Param2&gt;, ...)</code></td><td><code>DECLARE_DELEGATE_RetVal_&lt;Num&gt;Params(RetValType, DelegateName, Param1Type, Param2Type, ...)</code></td></tr></tbody></table><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>BINDING AND SAFETY
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
 
Once a delegate has been declared<span class="token punctuation">,</span> it can be bound to functions stored in different places<span class="token punctuation">.</span>
一旦声明了委托，它就可以绑定到存储在不同位置的函数上。

Because delegates are often called <span class="token keyword">long</span> after they are bound<span class="token punctuation">,</span> extra attention must be paid to
avoid crashes<span class="token punctuation">.</span> This list is <span class="token keyword">for</span> single<span class="token operator">-</span>cast<span class="token punctuation">,</span> 
由于委托通常在绑定后很长时间才被调用，因此必须格外注意避免崩溃。此列表适用于单播委托，

<span class="token keyword">for</span> multi<span class="token operator">-</span>cast delegates<span class="token punctuation">,</span> replace Bind in the table below with Add<span class="token punctuation">.</span> Also <span class="token keyword">for</span> multi<span class="token operator">-</span>cast delegates<span class="token punctuation">,</span> 
Add will <span class="token keyword">return</span> a handle that can then be used to later remove the binding<span class="token punctuation">.</span> 
对于多播委托，请在下面的表中将Bind替换为Add。此外，对于多播委托，Add将返回一个句柄，稍后可以用来

All multi<span class="token operator">-</span>cast delegates have an <span class="token double-colon punctuation">::</span>FDelegate subtype defining an equivalent
single<span class="token operator">-</span>cast version<span class="token punctuation">,</span> 
删除绑定。所有多播委托都有一个<span class="token double-colon punctuation">::</span>FDelegate子类型，定义了一个等效的单播版本，

that can be Created one place <span class="token operator">and</span> then added later<span class="token punctuation">.</span>
可以在一个地方创建，然后稍后添加。 
   
   Bind function                                       <span class="token operator">|</span>   Usage
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
   <span class="token function">BindStatic</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>GlobalFunctionName<span class="token punctuation">)</span>                     <span class="token operator">|</span>   Call a <span class="token keyword">static</span> function<span class="token punctuation">,</span> can either be globally scoped <span class="token operator">or</span> a <span class="token keyword">class</span>

 <span class="token keyword">static</span>
   <span class="token function">BindUObject</span><span class="token punctuation">(</span>UObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>UClass<span class="token double-colon punctuation">::</span>Function<span class="token punctuation">)</span>             <span class="token operator">|</span>   Call a UObject <span class="token keyword">class</span> <span class="token class-name">member</span> function via a TWeakObjectPtr<span class="token punctuation">,</span> will <span class="token operator">not</span> be called <span class="token keyword">if</span> object is invalid
   <span class="token function">BindSP</span><span class="token punctuation">(</span>SharedPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FClass<span class="token double-colon punctuation">::</span>Function<span class="token punctuation">)</span>                <span class="token operator">|</span>   Call a native <span class="token keyword">class</span> <span class="token class-name">member</span> function via a TWeakPtr<span class="token punctuation">,</span> will <span class="token operator">not</span> be called <span class="token keyword">if</span> shared pointer is invalid
   <span class="token function">BindThreadSafeSP</span><span class="token punctuation">(</span>SharedPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FClass<span class="token double-colon punctuation">::</span>Function<span class="token punctuation">)</span>      <span class="token operator">|</span>   Call a native <span class="token keyword">class</span> <span class="token class-name">member</span> function via a TWeakPtr<span class="token punctuation">,</span> will <span class="token operator">not</span> be called <span class="token keyword">if</span> shared pointer is invalid
   <span class="token function">BindRaw</span><span class="token punctuation">(</span>RawPtr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>FClass<span class="token double-colon punctuation">::</span>Function<span class="token punctuation">)</span>                  <span class="token operator">|</span>   Call a native <span class="token keyword">class</span> <span class="token class-name">member</span> function with no safety checks<span class="token punctuation">.</span> You MUST call Unbind <span class="token operator">or</span> Remove when object dies to avoid crashes<span class="token operator">!</span>
   <span class="token function">BindLambda</span><span class="token punctuation">(</span>Lambda<span class="token punctuation">)</span>                                  <span class="token operator">|</span>   Call a lambda function with no safety checks<span class="token punctuation">.</span> You MUST make sure all captures will be safe at a later point to avoid crashes<span class="token operator">!</span>
   <span class="token function">BindWeakLambda</span><span class="token punctuation">(</span>UObject<span class="token punctuation">,</span> Lambda<span class="token punctuation">)</span>                     <span class="token operator">|</span>   Call a lambda function only <span class="token keyword">if</span> UObject is still valid<span class="token punctuation">.</span> Captured <span class="token char">&#39;this&#39;</span> will always be valid but any other captures may <span class="token operator">not</span> be
   <span class="token function">BindUFunction</span><span class="token punctuation">(</span>UObject<span class="token punctuation">,</span> <span class="token function">FName</span><span class="token punctuation">(</span><span class="token string">&quot;FunctionName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token operator">|</span>   Usable <span class="token keyword">for</span> both native <span class="token operator">and</span> dynamic delegates<span class="token punctuation">,</span> will call a UFUNCTION with specified name
   <span class="token function">BindDynamic</span><span class="token punctuation">(</span>UObject<span class="token punctuation">,</span> <span class="token operator">&amp;</span>UClass<span class="token double-colon punctuation">::</span>FunctionName<span class="token punctuation">)</span>         <span class="token operator">|</span>   Convenience wrapper only available <span class="token keyword">for</span> dynamic delegates<span class="token punctuation">,</span> FunctionName must be declared as a UFUNCTION
   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="委托绑定函数" tabindex="-1"><a class="header-anchor" href="#委托绑定函数" aria-hidden="true">#</a> 委托绑定函数</h3><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>绑定函数</th><th>用法</th></tr></thead><tbody><tr><td><code>BindStatic(&amp;GlobalFunctionName)</code></td><td>调用静态函数，可以是全局范围或类的静态函数</td></tr><tr><td><code>BindUObject(UObject, &amp;UClass::Function)</code></td><td>通过 TWeakObjectPtr 调用 UObject 类成员函数，如果对象无效，则不会被调用</td></tr><tr><td><code>BindSP(SharedPtr, &amp;FClass::Function)</code></td><td>通过 TWeakPtr 调用本机类成员函数，如果共享指针无效，则不会被调用</td></tr><tr><td><code>BindThreadSafeSP(SharedPtr, &amp;FClass::Function)</code></td><td>通过 TWeakPtr 调用本机类成员函数，如果共享指针无效，则不会被调用</td></tr><tr><td><code>BindRaw(RawPtr, &amp;FClass::Function)</code></td><td>无安全检查地调用本机类成员函数。当对象死亡时，必须调用 Unbind 或 Remove 以避免崩溃！</td></tr><tr><td><code>BindLambda(Lambda)</code></td><td>无安全检查地调用 Lambda 函数。必须确保所有捕获在以后的某个时刻都是安全的，以避免崩溃！</td></tr><tr><td><code>BindWeakLambda(UObject, Lambda)</code></td><td>仅当 UObject 仍然有效时才调用 Lambda 函数。捕获的 &#39;this&#39; 将始终有效，但其他任何捕获可能无效</td></tr><tr><td><code>BindUFunction(UObject, FName(&quot;FunctionName&quot;))</code></td><td>用于本机和动态委托，将调用具有指定名称的 UFUNCTION</td></tr><tr><td><code>BindDynamic(UObject, &amp;UClass::FunctionName)</code></td><td>仅用于动态委托的便捷包装器，FunctionName 必须声明为 UFUNCTION</td></tr></tbody></table>',24);function h(y,f){const s=r("ChatMessage");return l(),c("div",null,[d,n(s,{avatar:"../../assets/emoji/bqb (2).png",avatarWidth:40,alignLeft:""},{default:o(()=>[a(" 委托字面上来说就是委托别人帮忙介绍认识，双方并没有直接接触。 ")]),_:1}),n(s,{avatar:"../../assets/emoji/new9.png",avatarWidth:40},{default:o(()=>[a(" 这么说，委托有点像《猫和老鼠——送信使者》,Jerry写信给他的女朋友，让他的侄子帮忙送。Jerry和他女朋友并没有直接接触，而是通过委托侄子传递。 ")]),_:1}),v,n(s,{avatar:"../../assets/emoji/new3.png",avatarWidth:55,alignLeft:""},{default:o(()=>[a(" 确实，这个比喻很形象。 ")]),_:1}),n(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40,alignLeft:""},{default:o(()=>[a(" 关于UE委托的要点如下： ")]),_:1}),m,n(s,{avatar:"../../assets/emoji/new0.png",avatarWidth:40,alignLeft:""},{default:o(()=>[a(" 康康EpicBaba在UE引擎中对委托的注释吧。 ")]),_:1}),b,n(s,{avatar:"../../assets/emoji/new8.png",avatarWidth:55},{default:o(()=>[a(" payload变量是什么意思？ ")]),_:1}),n(s,{avatar:"../../assets/emoji/new7.png",avatarWidth:40,alignLeft:""},{default:o(()=>[a(' 在编程中，"payload" 通常指的是一种携带或包含有效数据的部分。在这里指委托（delegate）中可以携带的附加数据。例如： ')]),_:1}),g])}const w=t(u,[["render",h],["__file","6-Delegate.html.vue"]]);export{w as default};
