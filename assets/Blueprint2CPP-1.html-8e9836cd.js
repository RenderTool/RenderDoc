import{_ as e}from"./libexpcpp-97f4e187.js";import{_ as p,r as c,o as l,c as i,d as t,w as o,a,b as s,e as r}from"./app-619ba363.js";const u="/RenderDoc/assets/UEvaluepass-12eeab4e.jpg",k="/RenderDoc/assets/defalutreference-6457619f.gif",d={},g=a("h2",{id:"实践",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#实践","aria-hidden":"true"},"#"),s(" 实践")],-1),m=a("blockquote",null,[a("p",null,"测试不同传参方法对应的蓝图节点")],-1),f=a("ol",null,[a("li",null,"新建一个蓝图函数库类")],-1),v=r('<figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol start="2"><li>输入测试代码</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值传递&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyValue</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span>Camera<span class="token punctuation">,</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyConstReference</span><span class="token punctuation">(</span><span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span>Camera<span class="token punctuation">,</span> <span class="token keyword">const</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;const修饰的值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span>Camera<span class="token punctuation">,</span>int32 <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>测试结果</li></ol><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="蓝图" tabindex="-1"><a class="header-anchor" href="#蓝图" aria-hidden="true">#</a> 蓝图</h2><blockquote><p>蓝图中只有数组默认通过值传递的。</p></blockquote><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',8);function _(b,h){const n=c("ChatMessage");return l(),i("div",null,[t(n,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:o(()=>[s(" C++蓝图节点输入输出控制 ")]),_:1}),g,m,f,t(n,{avatar:"../../../assets/emoji/dsyj.png",avatarWidth:40},{default:o(()=>[s(" 蓝图函数库是一个静态函数的合集，便于测试 ")]),_:1}),v])}const q=p(d,[["render",_],["__file","Blueprint2CPP-1.html.vue"]]);export{q as default};
