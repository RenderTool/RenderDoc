const t=JSON.parse('{"key":"v-391766bc","path":"/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html","title":"SD2.图片仿PS投影Shader","lang":"zh-CN","frontmatter":{"title":"SD2.图片仿PS投影Shader","order":1,"category":["unreal"],"description":"/** PS图层样式投影效果 \\t@param {UVs}\\t\\t\\t\\t\\t\\ttexture coordinate \\t@param {Texture}\\t\\t\\t\\t\\ttexture object \\t@param {TextureSize}\\t\\t\\t\\t纹理大小（x, y） \\t@param {ShadowRGBA}\\t\\t\\t\\t\\t投影颜色与不透明度 \\t@param {ShadowRotate}\\t\\t\\t\\t投影角度 \\t@param {ShadowLength}\\t\\t\\t\\t投影距离 \\t@param {ShadowSize}\\t\\t\\t\\t\\t投影大小 \\t@param {BorderThreshold}\\t\\t\\t边界UVs阈值（左, 上, 右, 下） */ float4 Shadow(float2 UVs, Texture2D Texture, float2 TextureSize, float4 ShadowRGBA, float ShadowRotate, half ShadowLength, half ShadowSize, float4 BorderThreshold=0.001) { \\tconst float PI = acos(-1); \\t// 单位像素 \\tfloat2 TexturePixel = 1 / TextureSize; \\t// 角度 \\tfloat Angle = 360 * ShadowRotate; \\t// 弧度 \\tfloat Degrees = Angle / 180 * PI; \\t// 阴影反向方位（单位向量） \\tfloat2 Direction = TexturePixel * float2(cos(Degrees), sin(Degrees)); \\t \\tclass Function { \\t\\tTexture2D Texture; \\t\\tSamplerState TextureSampler; \\t\\tfloat4 ShadowRGBA; \\t\\tfloat2 Position; \\t\\tfloat BorderThresholdLeft; \\t\\tfloat BorderThresholdTop; \\t\\tfloat BorderThresholdRight; \\t\\tfloat BorderThresholdBottom; \\t\\t \\t\\tfloat PI; \\t\\tfloat2 TexturePixel; \\t\\t \\t\\t// 阴影颜色 \\t\\tfloat3 ShadowColor(float3 Color) { \\t\\t\\t// 如果需要与颜色混合，在此修改返回值，如下式 正片叠底。 \\t\\t\\t//\\treturn this.ShadowRGBA.rgb * Color; \\t\\t\\treturn this.ShadowRGBA.rgb; \\t\\t} \\t\\t \\t\\t// 混合 \\t\\tfloat3 Blend(float3 base, float3 blend, float alpha) { \\t\\t\\t// 如果使用了混合模式，把 blend 按混合公式计算一次，如下式 正片叠底。 \\t\\t\\t//\\tblend = base * blend; \\t\\t\\treturn lerp(base, blend, alpha); \\t\\t} \\t\\t \\t\\t// 纹理采样 \\t\\tfloat4 TextureSample(float2 UVs) { \\t\\t\\t// 如果需要 alpha 通道反向，在此修改。 \\t\\t\\treturn Texture2DSampleLevel(this.Texture, this.TextureSampler, UVs, 0).xyzw; \\t\\t} \\t\\t \\t\\tfloat4 GetShadowRGBA(float2 UVs) { \\t\\t\\t// 当前像素点 RGBA \\t\\t\\tfloat4 TextureRGBA = this.TextureSample(UVs); \\t\\t\\t// 阴影反向方位 UVs \\t\\t\\tfloat2 PositionUVs = UVs + this.Position; \\t\\t\\t// 阴影反向方位 UVs 超出了 0 - 1 的范围则不计算 \\t\\t\\tif (PositionUVs.x &lt; this.BorderThresholdLeft || PositionUVs.x &gt; this.BorderThresholdRight || PositionUVs.y &lt; this.BorderThresholdTop || PositionUVs.y &gt; this.BorderThresholdBottom) { \\t\\t\\t\\treturn TextureRGBA; \\t\\t\\t} \\t\\t\\t// 阴影反向方位像素点RGBA \\t\\t\\tfloat4 PositionRGBA = this.TextureSample(PositionUVs); \\t\\t\\t// 阴影透明度 \\t\\t\\tfloat ShadowOpacity = PositionRGBA.a * this.ShadowRGBA.a; \\t\\t\\tif (ShadowOpacity &lt;= 0) { \\t\\t\\t\\treturn TextureRGBA; \\t\\t\\t} \\t\\t\\t// 当前像素点混合后的结果色 \\t\\t\\t//\\tthis.ShadowRGBA.rgb 为 base 固有色 \\t\\t\\t//\\tTextureRGBA.rgb 为 blend 固有色 \\t\\t\\t//\\tTextureRGBA.a 为 alpha \\t\\t\\tfloat3 ShadowBlendColor = this.Blend(this.ShadowColor(PositionRGBA.rgb) * ShadowOpacity, TextureRGBA.rgb, TextureRGBA.a); \\t\\t\\t// 当前像素点混合后的透明度 \\t\\t\\tfloat ShadowBlendOpacity = ShadowOpacity + TextureRGBA.a - ShadowOpacity * TextureRGBA.a; \\t\\t\\t// 当前像素点混合后的RGBA \\t\\t\\treturn float4(ShadowBlendColor / ShadowBlendOpacity, ShadowBlendOpacity); \\t\\t} \\t\\t \\t\\tfloat Calculate1DGaussian(float x) { \\t\\t\\treturn exp(-0.5 * pow(this.PI * x, 2)); \\t\\t} \\t\\t \\t\\tfloat4 GetShadowSizeRGBA(float2 UVs, half ShadowSize) { \\t\\t\\t// 当前像素点 RGBA \\t\\t\\tfloat4 TextureRGBA = this.TextureSample(UVs); \\t\\t\\t// 投影大小范围内像素颜色累加 \\t\\t\\tfloat4 RGBASum = float4(0, 0, 0, 0); \\t\\t\\t// 投影大小范围内像素的权重 \\t\\t\\tfloat WeightSum = 0; \\t\\t\\tfor (half x = -ShadowSize; x &lt;= ShadowSize; x++) { \\t\\t\\t\\tfor (half y = -ShadowSize; y &lt;= ShadowSize; y++) { \\t\\t\\t\\t\\tfloat Weight = this.Calculate1DGaussian(x / ShadowSize) * this.Calculate1DGaussian(y / ShadowSize); \\t\\t\\t\\t\\tWeightSum += Weight; \\t\\t\\t\\t\\t// 阴影偏移 UVs \\t\\t\\t\\t\\tfloat2 OffsetUVs = UVs + float2(x, y) * this.TexturePixel + this.Position; \\t\\t\\t\\t\\tif (OffsetUVs.x &lt; this.BorderThresholdLeft || OffsetUVs.x &gt; this.BorderThresholdRight || OffsetUVs.y &lt; this.BorderThresholdTop || OffsetUVs.y &gt; this.BorderThresholdBottom) { \\t\\t\\t\\t\\t\\tcontinue; \\t\\t\\t\\t\\t} \\t\\t\\t\\t\\t// 阴影偏移像素点 RGBA \\t\\t\\t\\t\\tfloat4 OffsetRGBA = this.TextureSample(OffsetUVs); \\t\\t\\t\\t\\t// 阴影透明度 \\t\\t\\t\\t\\tfloat Opacity = this.ShadowRGBA.a * OffsetRGBA.a; \\t\\t\\t\\t\\tif (Opacity &lt;= 0) { \\t\\t\\t\\t\\t\\tcontinue; \\t\\t\\t\\t\\t} \\t\\t\\t\\t\\t// 阴影结果色 \\t\\t\\t\\t\\tfloat4 RGBA = float4(this.ShadowColor(OffsetRGBA.rgb), Opacity); \\t\\t\\t\\t\\tRGBASum += RGBA * Weight; \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\t// 模糊后的 RGBA \\t\\t\\tfloat4 BlurRGBA = RGBASum / WeightSum; \\t\\t\\t// 当前像素点混合后的结果色 \\t\\t\\tfloat3 Color = this.Blend(BlurRGBA.rgb * BlurRGBA.a, TextureRGBA.rgb, TextureRGBA.a); \\t\\t\\t// 当前像素点混合后的透明度 \\t\\t\\tfloat Opacity = BlurRGBA.a + TextureRGBA.a - BlurRGBA.a * TextureRGBA.a; \\t\\t\\t// 当前像素点混合后的RGBA \\t\\t\\treturn float4(Color / Opacity, Opacity); \\t\\t} \\t};\\t\\t// 注意要加分号 \\t \\t// Function func; \\t// func.Texture = Texture; \\t// func.TextureSampler = TextureSampler; \\t// func.ShadowRGBA = ShadowRGBA; \\t// func.Position = ShadowLength * Direction; \\t// func.BorderThresholdLeft = BorderThreshold.x; \\t// func.BorderThresholdTop = BorderThreshold.y; \\t// func.BorderThresholdRight = 1 - BorderThreshold.z; \\t// func.BorderThresholdBottom = 1 - BorderThreshold.w; \\t// func.PI = PI; \\t// func.TexturePixel = TexturePixel; \\tFunction func = { Texture, TextureSampler, ShadowRGBA, ShadowLength * Direction, BorderThreshold.x, BorderThreshold.y, 1 - BorderThreshold.z, 1 - BorderThreshold.w, PI, TexturePixel }; \\tif (ShadowSize &lt; 1) { \\t\\treturn func.GetShadowRGBA(UVs); \\t} \\treturn func.GetShadowSizeRGBA(UVs, round(ShadowSize)); }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/shader_%E7%9D%80%E8%89%B2%E5%99%A8_/3-%E5%9B%BE%E7%89%87%E6%8A%95%E5%BD%B1.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"SD2.图片仿PS投影Shader"}],["meta",{"property":"og:description","content":"/** PS图层样式投影效果 \\t@param {UVs}\\t\\t\\t\\t\\t\\ttexture coordinate \\t@param {Texture}\\t\\t\\t\\t\\ttexture object \\t@param {TextureSize}\\t\\t\\t\\t纹理大小（x, y） \\t@param {ShadowRGBA}\\t\\t\\t\\t\\t投影颜色与不透明度 \\t@param {ShadowRotate}\\t\\t\\t\\t投影角度 \\t@param {ShadowLength}\\t\\t\\t\\t投影距离 \\t@param {ShadowSize}\\t\\t\\t\\t\\t投影大小 \\t@param {BorderThreshold}\\t\\t\\t边界UVs阈值（左, 上, 右, 下） */ float4 Shadow(float2 UVs, Texture2D Texture, float2 TextureSize, float4 ShadowRGBA, float ShadowRotate, half ShadowLength, half ShadowSize, float4 BorderThreshold=0.001) { \\tconst float PI = acos(-1); \\t// 单位像素 \\tfloat2 TexturePixel = 1 / TextureSize; \\t// 角度 \\tfloat Angle = 360 * ShadowRotate; \\t// 弧度 \\tfloat Degrees = Angle / 180 * PI; \\t// 阴影反向方位（单位向量） \\tfloat2 Direction = TexturePixel * float2(cos(Degrees), sin(Degrees)); \\t \\tclass Function { \\t\\tTexture2D Texture; \\t\\tSamplerState TextureSampler; \\t\\tfloat4 ShadowRGBA; \\t\\tfloat2 Position; \\t\\tfloat BorderThresholdLeft; \\t\\tfloat BorderThresholdTop; \\t\\tfloat BorderThresholdRight; \\t\\tfloat BorderThresholdBottom; \\t\\t \\t\\tfloat PI; \\t\\tfloat2 TexturePixel; \\t\\t \\t\\t// 阴影颜色 \\t\\tfloat3 ShadowColor(float3 Color) { \\t\\t\\t// 如果需要与颜色混合，在此修改返回值，如下式 正片叠底。 \\t\\t\\t//\\treturn this.ShadowRGBA.rgb * Color; \\t\\t\\treturn this.ShadowRGBA.rgb; \\t\\t} \\t\\t \\t\\t// 混合 \\t\\tfloat3 Blend(float3 base, float3 blend, float alpha) { \\t\\t\\t// 如果使用了混合模式，把 blend 按混合公式计算一次，如下式 正片叠底。 \\t\\t\\t//\\tblend = base * blend; \\t\\t\\treturn lerp(base, blend, alpha); \\t\\t} \\t\\t \\t\\t// 纹理采样 \\t\\tfloat4 TextureSample(float2 UVs) { \\t\\t\\t// 如果需要 alpha 通道反向，在此修改。 \\t\\t\\treturn Texture2DSampleLevel(this.Texture, this.TextureSampler, UVs, 0).xyzw; \\t\\t} \\t\\t \\t\\tfloat4 GetShadowRGBA(float2 UVs) { \\t\\t\\t// 当前像素点 RGBA \\t\\t\\tfloat4 TextureRGBA = this.TextureSample(UVs); \\t\\t\\t// 阴影反向方位 UVs \\t\\t\\tfloat2 PositionUVs = UVs + this.Position; \\t\\t\\t// 阴影反向方位 UVs 超出了 0 - 1 的范围则不计算 \\t\\t\\tif (PositionUVs.x &lt; this.BorderThresholdLeft || PositionUVs.x &gt; this.BorderThresholdRight || PositionUVs.y &lt; this.BorderThresholdTop || PositionUVs.y &gt; this.BorderThresholdBottom) { \\t\\t\\t\\treturn TextureRGBA; \\t\\t\\t} \\t\\t\\t// 阴影反向方位像素点RGBA \\t\\t\\tfloat4 PositionRGBA = this.TextureSample(PositionUVs); \\t\\t\\t// 阴影透明度 \\t\\t\\tfloat ShadowOpacity = PositionRGBA.a * this.ShadowRGBA.a; \\t\\t\\tif (ShadowOpacity &lt;= 0) { \\t\\t\\t\\treturn TextureRGBA; \\t\\t\\t} \\t\\t\\t// 当前像素点混合后的结果色 \\t\\t\\t//\\tthis.ShadowRGBA.rgb 为 base 固有色 \\t\\t\\t//\\tTextureRGBA.rgb 为 blend 固有色 \\t\\t\\t//\\tTextureRGBA.a 为 alpha \\t\\t\\tfloat3 ShadowBlendColor = this.Blend(this.ShadowColor(PositionRGBA.rgb) * ShadowOpacity, TextureRGBA.rgb, TextureRGBA.a); \\t\\t\\t// 当前像素点混合后的透明度 \\t\\t\\tfloat ShadowBlendOpacity = ShadowOpacity + TextureRGBA.a - ShadowOpacity * TextureRGBA.a; \\t\\t\\t// 当前像素点混合后的RGBA \\t\\t\\treturn float4(ShadowBlendColor / ShadowBlendOpacity, ShadowBlendOpacity); \\t\\t} \\t\\t \\t\\tfloat Calculate1DGaussian(float x) { \\t\\t\\treturn exp(-0.5 * pow(this.PI * x, 2)); \\t\\t} \\t\\t \\t\\tfloat4 GetShadowSizeRGBA(float2 UVs, half ShadowSize) { \\t\\t\\t// 当前像素点 RGBA \\t\\t\\tfloat4 TextureRGBA = this.TextureSample(UVs); \\t\\t\\t// 投影大小范围内像素颜色累加 \\t\\t\\tfloat4 RGBASum = float4(0, 0, 0, 0); \\t\\t\\t// 投影大小范围内像素的权重 \\t\\t\\tfloat WeightSum = 0; \\t\\t\\tfor (half x = -ShadowSize; x &lt;= ShadowSize; x++) { \\t\\t\\t\\tfor (half y = -ShadowSize; y &lt;= ShadowSize; y++) { \\t\\t\\t\\t\\tfloat Weight = this.Calculate1DGaussian(x / ShadowSize) * this.Calculate1DGaussian(y / ShadowSize); \\t\\t\\t\\t\\tWeightSum += Weight; \\t\\t\\t\\t\\t// 阴影偏移 UVs \\t\\t\\t\\t\\tfloat2 OffsetUVs = UVs + float2(x, y) * this.TexturePixel + this.Position; \\t\\t\\t\\t\\tif (OffsetUVs.x &lt; this.BorderThresholdLeft || OffsetUVs.x &gt; this.BorderThresholdRight || OffsetUVs.y &lt; this.BorderThresholdTop || OffsetUVs.y &gt; this.BorderThresholdBottom) { \\t\\t\\t\\t\\t\\tcontinue; \\t\\t\\t\\t\\t} \\t\\t\\t\\t\\t// 阴影偏移像素点 RGBA \\t\\t\\t\\t\\tfloat4 OffsetRGBA = this.TextureSample(OffsetUVs); \\t\\t\\t\\t\\t// 阴影透明度 \\t\\t\\t\\t\\tfloat Opacity = this.ShadowRGBA.a * OffsetRGBA.a; \\t\\t\\t\\t\\tif (Opacity &lt;= 0) { \\t\\t\\t\\t\\t\\tcontinue; \\t\\t\\t\\t\\t} \\t\\t\\t\\t\\t// 阴影结果色 \\t\\t\\t\\t\\tfloat4 RGBA = float4(this.ShadowColor(OffsetRGBA.rgb), Opacity); \\t\\t\\t\\t\\tRGBASum += RGBA * Weight; \\t\\t\\t\\t} \\t\\t\\t} \\t\\t\\t// 模糊后的 RGBA \\t\\t\\tfloat4 BlurRGBA = RGBASum / WeightSum; \\t\\t\\t// 当前像素点混合后的结果色 \\t\\t\\tfloat3 Color = this.Blend(BlurRGBA.rgb * BlurRGBA.a, TextureRGBA.rgb, TextureRGBA.a); \\t\\t\\t// 当前像素点混合后的透明度 \\t\\t\\tfloat Opacity = BlurRGBA.a + TextureRGBA.a - BlurRGBA.a * TextureRGBA.a; \\t\\t\\t// 当前像素点混合后的RGBA \\t\\t\\treturn float4(Color / Opacity, Opacity); \\t\\t} \\t};\\t\\t// 注意要加分号 \\t \\t// Function func; \\t// func.Texture = Texture; \\t// func.TextureSampler = TextureSampler; \\t// func.ShadowRGBA = ShadowRGBA; \\t// func.Position = ShadowLength * Direction; \\t// func.BorderThresholdLeft = BorderThreshold.x; \\t// func.BorderThresholdTop = BorderThreshold.y; \\t// func.BorderThresholdRight = 1 - BorderThreshold.z; \\t// func.BorderThresholdBottom = 1 - BorderThreshold.w; \\t// func.PI = PI; \\t// func.TexturePixel = TexturePixel; \\tFunction func = { Texture, TextureSampler, ShadowRGBA, ShadowLength * Direction, BorderThreshold.x, BorderThreshold.y, 1 - BorderThreshold.z, 1 - BorderThreshold.w, PI, TexturePixel }; \\tif (ShadowSize &lt; 1) { \\t\\treturn func.GetShadowRGBA(UVs); \\t} \\treturn func.GetShadowSizeRGBA(UVs, round(ShadowSize)); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-16T00:55:39.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-16T00:55:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SD2.图片仿PS投影Shader\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-16T00:55:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1705366539000,"updatedTime":1705366539000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":4.94,"words":1483},"filePathRelative":"unreal/shader[着色器]/3-图片投影.md","localizedDate":"2024年1月16日","excerpt":"<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token comment\\">/**\\nPS图层样式投影效果\\n\\t@param {UVs}\\t\\t\\t\\t\\t\\ttexture coordinate\\n\\t@param {Texture}\\t\\t\\t\\t\\ttexture object\\n\\t@param {TextureSize}\\t\\t\\t\\t纹理大小（x, y）\\n\\t@param {ShadowRGBA}\\t\\t\\t\\t\\t投影颜色与不透明度\\n\\t@param {ShadowRotate}\\t\\t\\t\\t投影角度\\n\\t@param {ShadowLength}\\t\\t\\t\\t投影距离\\n\\t@param {ShadowSize}\\t\\t\\t\\t\\t投影大小\\n\\t@param {BorderThreshold}\\t\\t\\t边界UVs阈值（左, 上, 右, 下）\\n*/</span>\\nfloat4 <span class=\\"token function\\">Shadow</span><span class=\\"token punctuation\\">(</span>float2 UVs<span class=\\"token punctuation\\">,</span> Texture2D Texture<span class=\\"token punctuation\\">,</span> float2 TextureSize<span class=\\"token punctuation\\">,</span> float4 ShadowRGBA<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span> ShadowRotate<span class=\\"token punctuation\\">,</span> half ShadowLength<span class=\\"token punctuation\\">,</span> half ShadowSize<span class=\\"token punctuation\\">,</span> float4 BorderThreshold<span class=\\"token operator\\">=</span><span class=\\"token number\\">0.001</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">const</span> <span class=\\"token keyword\\">float</span> PI <span class=\\"token operator\\">=</span> <span class=\\"token function\\">acos</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 单位像素</span>\\n\\tfloat2 TexturePixel <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">/</span> TextureSize<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 角度</span>\\n\\t<span class=\\"token keyword\\">float</span> Angle <span class=\\"token operator\\">=</span> <span class=\\"token number\\">360</span> <span class=\\"token operator\\">*</span> ShadowRotate<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 弧度</span>\\n\\t<span class=\\"token keyword\\">float</span> Degrees <span class=\\"token operator\\">=</span> Angle <span class=\\"token operator\\">/</span> <span class=\\"token number\\">180</span> <span class=\\"token operator\\">*</span> PI<span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token comment\\">// 阴影反向方位（单位向量）</span>\\n\\tfloat2 Direction <span class=\\"token operator\\">=</span> TexturePixel <span class=\\"token operator\\">*</span> <span class=\\"token function\\">float2</span><span class=\\"token punctuation\\">(</span><span class=\\"token function\\">cos</span><span class=\\"token punctuation\\">(</span>Degrees<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">sin</span><span class=\\"token punctuation\\">(</span>Degrees<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Function</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tTexture2D Texture<span class=\\"token punctuation\\">;</span>\\n\\t\\tSamplerState TextureSampler<span class=\\"token punctuation\\">;</span>\\n\\t\\tfloat4 ShadowRGBA<span class=\\"token punctuation\\">;</span>\\n\\t\\tfloat2 Position<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">float</span> BorderThresholdLeft<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">float</span> BorderThresholdTop<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">float</span> BorderThresholdRight<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">float</span> BorderThresholdBottom<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\"token keyword\\">float</span> PI<span class=\\"token punctuation\\">;</span>\\n\\t\\tfloat2 TexturePixel<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\n\\t\\t<span class=\\"token comment\\">// 阴影颜色</span>\\n\\t\\tfloat3 <span class=\\"token function\\">ShadowColor</span><span class=\\"token punctuation\\">(</span>float3 Color<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 如果需要与颜色混合，在此修改返回值，如下式 正片叠底。</span>\\n\\t\\t\\t<span class=\\"token comment\\">//\\treturn this.ShadowRGBA.rgb * Color;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>ShadowRGBA<span class=\\"token punctuation\\">.</span>rgb<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\t<span class=\\"token comment\\">// 混合</span>\\n\\t\\tfloat3 <span class=\\"token function\\">Blend</span><span class=\\"token punctuation\\">(</span>float3 base<span class=\\"token punctuation\\">,</span> float3 blend<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">float</span> alpha<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 如果使用了混合模式，把 blend 按混合公式计算一次，如下式 正片叠底。</span>\\n\\t\\t\\t<span class=\\"token comment\\">//\\tblend = base * blend;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">lerp</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> blend<span class=\\"token punctuation\\">,</span> alpha<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\t<span class=\\"token comment\\">// 纹理采样</span>\\n\\t\\tfloat4 <span class=\\"token function\\">TextureSample</span><span class=\\"token punctuation\\">(</span>float2 UVs<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 如果需要 alpha 通道反向，在此修改。</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Texture2DSampleLevel</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>Texture<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>TextureSampler<span class=\\"token punctuation\\">,</span> UVs<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span>xyzw<span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\tfloat4 <span class=\\"token function\\">GetShadowRGBA</span><span class=\\"token punctuation\\">(</span>float2 UVs<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点 RGBA</span>\\n\\t\\t\\tfloat4 TextureRGBA <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TextureSample</span><span class=\\"token punctuation\\">(</span>UVs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 阴影反向方位 UVs</span>\\n\\t\\t\\tfloat2 PositionUVs <span class=\\"token operator\\">=</span> UVs <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>Position<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 阴影反向方位 UVs 超出了 0 - 1 的范围则不计算</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>PositionUVs<span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdLeft <span class=\\"token operator\\">||</span> PositionUVs<span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdRight <span class=\\"token operator\\">||</span> PositionUVs<span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdTop <span class=\\"token operator\\">||</span> PositionUVs<span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdBottom<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">return</span> TextureRGBA<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 阴影反向方位像素点RGBA</span>\\n\\t\\t\\tfloat4 PositionRGBA <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TextureSample</span><span class=\\"token punctuation\\">(</span>PositionUVs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 阴影透明度</span>\\n\\t\\t\\t<span class=\\"token keyword\\">float</span> ShadowOpacity <span class=\\"token operator\\">=</span> PositionRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>ShadowRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ShadowOpacity <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">return</span> TextureRGBA<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的结果色</span>\\n\\t\\t\\t<span class=\\"token comment\\">//\\tthis.ShadowRGBA.rgb 为 base 固有色</span>\\n\\t\\t\\t<span class=\\"token comment\\">//\\tTextureRGBA.rgb 为 blend 固有色</span>\\n\\t\\t\\t<span class=\\"token comment\\">//\\tTextureRGBA.a 为 alpha</span>\\n\\t\\t\\tfloat3 ShadowBlendColor <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Blend</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ShadowColor</span><span class=\\"token punctuation\\">(</span>PositionRGBA<span class=\\"token punctuation\\">.</span>rgb<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> ShadowOpacity<span class=\\"token punctuation\\">,</span> TextureRGBA<span class=\\"token punctuation\\">.</span>rgb<span class=\\"token punctuation\\">,</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的透明度</span>\\n\\t\\t\\t<span class=\\"token keyword\\">float</span> ShadowBlendOpacity <span class=\\"token operator\\">=</span> ShadowOpacity <span class=\\"token operator\\">+</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">-</span> ShadowOpacity <span class=\\"token operator\\">*</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的RGBA</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">float4</span><span class=\\"token punctuation\\">(</span>ShadowBlendColor <span class=\\"token operator\\">/</span> ShadowBlendOpacity<span class=\\"token punctuation\\">,</span> ShadowBlendOpacity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\t<span class=\\"token keyword\\">float</span> <span class=\\"token function\\">Calculate1DGaussian</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">float</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">exp</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">0.5</span> <span class=\\"token operator\\">*</span> <span class=\\"token function\\">pow</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>PI <span class=\\"token operator\\">*</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\n\\t\\tfloat4 <span class=\\"token function\\">GetShadowSizeRGBA</span><span class=\\"token punctuation\\">(</span>float2 UVs<span class=\\"token punctuation\\">,</span> half ShadowSize<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点 RGBA</span>\\n\\t\\t\\tfloat4 TextureRGBA <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TextureSample</span><span class=\\"token punctuation\\">(</span>UVs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 投影大小范围内像素颜色累加</span>\\n\\t\\t\\tfloat4 RGBASum <span class=\\"token operator\\">=</span> <span class=\\"token function\\">float4</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 投影大小范围内像素的权重</span>\\n\\t\\t\\t<span class=\\"token keyword\\">float</span> WeightSum <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>half x <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span>ShadowSize<span class=\\"token punctuation\\">;</span> x <span class=\\"token operator\\">&lt;=</span> ShadowSize<span class=\\"token punctuation\\">;</span> x<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span>half y <span class=\\"token operator\\">=</span> <span class=\\"token operator\\">-</span>ShadowSize<span class=\\"token punctuation\\">;</span> y <span class=\\"token operator\\">&lt;=</span> ShadowSize<span class=\\"token punctuation\\">;</span> y<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">float</span> Weight <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Calculate1DGaussian</span><span class=\\"token punctuation\\">(</span>x <span class=\\"token operator\\">/</span> ShadowSize<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Calculate1DGaussian</span><span class=\\"token punctuation\\">(</span>y <span class=\\"token operator\\">/</span> ShadowSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\tWeightSum <span class=\\"token operator\\">+=</span> Weight<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 阴影偏移 UVs</span>\\n\\t\\t\\t\\t\\tfloat2 OffsetUVs <span class=\\"token operator\\">=</span> UVs <span class=\\"token operator\\">+</span> <span class=\\"token function\\">float2</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">*</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>TexturePixel <span class=\\"token operator\\">+</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>Position<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>OffsetUVs<span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdLeft <span class=\\"token operator\\">||</span> OffsetUVs<span class=\\"token punctuation\\">.</span>x <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdRight <span class=\\"token operator\\">||</span> OffsetUVs<span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">&lt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdTop <span class=\\"token operator\\">||</span> OffsetUVs<span class=\\"token punctuation\\">.</span>y <span class=\\"token operator\\">&gt;</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>BorderThresholdBottom<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 阴影偏移像素点 RGBA</span>\\n\\t\\t\\t\\t\\tfloat4 OffsetRGBA <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">TextureSample</span><span class=\\"token punctuation\\">(</span>OffsetUVs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 阴影透明度</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">float</span> Opacity <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>ShadowRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">*</span> OffsetRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>Opacity <span class=\\"token operator\\">&lt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t\\t\\t<span class=\\"token keyword\\">continue</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t\\t\\t<span class=\\"token comment\\">// 阴影结果色</span>\\n\\t\\t\\t\\t\\tfloat4 RGBA <span class=\\"token operator\\">=</span> <span class=\\"token function\\">float4</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ShadowColor</span><span class=\\"token punctuation\\">(</span>OffsetRGBA<span class=\\"token punctuation\\">.</span>rgb<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> Opacity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t\\tRGBASum <span class=\\"token operator\\">+=</span> RGBA <span class=\\"token operator\\">*</span> Weight<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 模糊后的 RGBA</span>\\n\\t\\t\\tfloat4 BlurRGBA <span class=\\"token operator\\">=</span> RGBASum <span class=\\"token operator\\">/</span> WeightSum<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的结果色</span>\\n\\t\\t\\tfloat3 Color <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Blend</span><span class=\\"token punctuation\\">(</span>BlurRGBA<span class=\\"token punctuation\\">.</span>rgb <span class=\\"token operator\\">*</span> BlurRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">,</span> TextureRGBA<span class=\\"token punctuation\\">.</span>rgb<span class=\\"token punctuation\\">,</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的透明度</span>\\n\\t\\t\\t<span class=\\"token keyword\\">float</span> Opacity <span class=\\"token operator\\">=</span> BlurRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">+</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">-</span> BlurRGBA<span class=\\"token punctuation\\">.</span>a <span class=\\"token operator\\">*</span> TextureRGBA<span class=\\"token punctuation\\">.</span>a<span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token comment\\">// 当前像素点混合后的RGBA</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token function\\">float4</span><span class=\\"token punctuation\\">(</span>Color <span class=\\"token operator\\">/</span> Opacity<span class=\\"token punctuation\\">,</span> Opacity<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\t\\t<span class=\\"token comment\\">// 注意要加分号</span>\\n\\t\\n\\t<span class=\\"token comment\\">// Function func;</span>\\n\\t<span class=\\"token comment\\">// func.Texture = Texture;</span>\\n\\t<span class=\\"token comment\\">// func.TextureSampler = TextureSampler;</span>\\n\\t<span class=\\"token comment\\">// func.ShadowRGBA = ShadowRGBA;</span>\\n\\t<span class=\\"token comment\\">// func.Position = ShadowLength * Direction;</span>\\n\\t<span class=\\"token comment\\">// func.BorderThresholdLeft = BorderThreshold.x;</span>\\n\\t<span class=\\"token comment\\">// func.BorderThresholdTop = BorderThreshold.y;</span>\\n\\t<span class=\\"token comment\\">// func.BorderThresholdRight = 1 - BorderThreshold.z;</span>\\n\\t<span class=\\"token comment\\">// func.BorderThresholdBottom = 1 - BorderThreshold.w;</span>\\n\\t<span class=\\"token comment\\">// func.PI = PI;</span>\\n\\t<span class=\\"token comment\\">// func.TexturePixel = TexturePixel;</span>\\n\\tFunction func <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> Texture<span class=\\"token punctuation\\">,</span> TextureSampler<span class=\\"token punctuation\\">,</span> ShadowRGBA<span class=\\"token punctuation\\">,</span> ShadowLength <span class=\\"token operator\\">*</span> Direction<span class=\\"token punctuation\\">,</span> BorderThreshold<span class=\\"token punctuation\\">.</span>x<span class=\\"token punctuation\\">,</span> BorderThreshold<span class=\\"token punctuation\\">.</span>y<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">-</span> BorderThreshold<span class=\\"token punctuation\\">.</span>z<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1</span> <span class=\\"token operator\\">-</span> BorderThreshold<span class=\\"token punctuation\\">.</span>w<span class=\\"token punctuation\\">,</span> PI<span class=\\"token punctuation\\">,</span> TexturePixel <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ShadowSize <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> func<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetShadowRGBA</span><span class=\\"token punctuation\\">(</span>UVs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">return</span> func<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">GetShadowSizeRGBA</span><span class=\\"token punctuation\\">(</span>UVs<span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">round</span><span class=\\"token punctuation\\">(</span>ShadowSize<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
