const e=JSON.parse('{"key":"v-4c4aa776","path":"/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html","title":"DS2.SimpleFactory|简单工厂","lang":"zh-CN","frontmatter":{"title":"DS2.SimpleFactory|简单工厂","order":2,"category":["c++"],"description":"SimpleFactory简单工厂 Simple Factory 模式的核心组件： 定义接口或抽象类： 创建一个表示产品的接口或抽象类，其中包含产品的通用方法（例如，operate）。 创建具体产品类： 实现产品接口或继承抽象类，定义具体的产品类，每个类负责实现产品接口中的方法。 定义工厂类： 创建一个工厂类，其中包含一个用于创建产品对象的方法。这个方法可能是静态的，用于根据客户端的需求创建具体产品对象。 客户端使用工厂类： 客户端代码通过调用工厂类的方法来获取产品对象，而不是直接实例化具体产品类。这有助于降低客户端与具体产品类之间的耦合度。","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/designer_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_/2-SimpleFactory.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"DS2.SimpleFactory|简单工厂"}],["meta",{"property":"og:description","content":"SimpleFactory简单工厂 Simple Factory 模式的核心组件： 定义接口或抽象类： 创建一个表示产品的接口或抽象类，其中包含产品的通用方法（例如，operate）。 创建具体产品类： 实现产品接口或继承抽象类，定义具体的产品类，每个类负责实现产品接口中的方法。 定义工厂类： 创建一个工厂类，其中包含一个用于创建产品对象的方法。这个方法可能是静态的，用于根据客户端的需求创建具体产品对象。 客户端使用工厂类： 客户端代码通过调用工厂类的方法来获取产品对象，而不是直接实例化具体产品类。这有助于降低客户端与具体产品类之间的耦合度。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-02T22:07:13.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2024-01-02T22:07:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DS2.SimpleFactory|简单工厂\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-02T22:07:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":3,"title":"SimpleFactory简单工厂","slug":"simplefactory简单工厂","link":"#simplefactory简单工厂","children":[]},{"level":3,"title":"Simple Factory 模式的核心组件：","slug":"simple-factory-模式的核心组件","link":"#simple-factory-模式的核心组件","children":[]},{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]}],"git":{"createdTime":1703391495000,"updatedTime":1704233233000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"language/cpp/designer[设计模式]/2-SimpleFactory.md","localizedDate":"2023年12月24日","excerpt":"<h3> SimpleFactory简单工厂</h3>\\n\\n<figure><figcaption></figcaption></figure>\\n<h3> Simple Factory 模式的核心组件：</h3>\\n<ol>\\n<li>\\n<p><strong>定义接口或抽象类：</strong> 创建一个表示产品的接口或抽象类，其中包含产品的通用方法（例如，<code>operate</code>）。</p>\\n</li>\\n<li>\\n<p><strong>创建具体产品类：</strong> 实现产品接口或继承抽象类，定义具体的产品类，每个类负责实现产品接口中的方法。</p>\\n</li>\\n<li>\\n<p><strong>定义工厂类：</strong> 创建一个工厂类，其中包含一个用于创建产品对象的方法。这个方法可能是静态的，用于根据客户端的需求创建具体产品对象。</p>\\n</li>\\n<li>\\n<p><strong>客户端使用工厂类：</strong> 客户端代码通过调用工厂类的方法来获取产品对象，而不是直接实例化具体产品类。这有助于降低客户端与具体产品类之间的耦合度。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
