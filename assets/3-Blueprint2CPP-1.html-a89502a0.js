import{_ as c}from"./libexpcpp-97f4e187.js";import{_ as r,r as e,o as i,c as l,d as n,w as o,a,b as s,e as u}from"./app-719fbc9a.js";const d="/RenderDoc/assets/UEvaluepass-12eeab4e.jpg",k={},h=a("h2",{id:"实践",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#实践","aria-hidden":"true"},"#"),s(" 实践")],-1),m=a("h3",{id:"_1-新建一个蓝图函数库类",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-新建一个蓝图函数库类","aria-hidden":"true"},"#"),s(" 1. 新建一个蓝图函数库类")],-1),f=u('<figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-输入测试代码" tabindex="-1"><a class="header-anchor" href="#_2-输入测试代码" aria-hidden="true">#</a> 2. 输入测试代码</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值传递&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyValue</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span>Camera<span class="token punctuation">,</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyConstReference</span><span class="token punctuation">(</span><span class="token keyword">const</span> TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span> <span class="token keyword">const</span> int32 test<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">UFUNCTION</span><span class="token punctuation">(</span>BlueprintCallable<span class="token punctuation">,</span> Category <span class="token operator">=</span><span class="token string">&quot;TEST&quot;</span><span class="token punctuation">,</span>meta <span class="token operator">=</span> <span class="token punctuation">(</span> tooltip <span class="token operator">=</span> <span class="token string">&quot;const修饰的值引用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    	<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PassbyReference</span><span class="token punctuation">(</span>TArray<span class="token operator">&lt;</span>ACameraActor<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> Camera<span class="token punctuation">,</span>int32 <span class="token operator">&amp;</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-测试结果" tabindex="-1"><a class="header-anchor" href="#_3-测试结果" aria-hidden="true">#</a> 3. 测试结果</h3><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="蓝图中数组只能用引用传递。" tabindex="-1"><a class="header-anchor" href="#蓝图中数组只能用引用传递。" aria-hidden="true">#</a> 蓝图中数组只能用引用传递。</h3>',7);function _(g,v){const t=e("ChatMessage"),p=e("GifWithButton");return i(),l("div",null,[n(t,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:o(()=>[s(" 测试不同传参方法对应的蓝图节点结果 ")]),_:1}),h,m,n(t,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:o(()=>[s(" 蓝图函数库是一个静态函数的合集，便于测试 ")]),_:1}),f,n(p,{src:"../../assets/unrealgif/defalutreference.gif"})])}const y=r(k,[["render",_],["__file","3-Blueprint2CPP-1.html.vue"]]);export{y as default};
