import{_ as p,r as o,o as c,c as l,d as t,w as e,a,b as n,e as i}from"./app-25627e0a.js";const d={},r=a("h3",{id:"概念",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),n(" 概念")],-1),u=a("p",null,"浅拷贝是对相同数据的共享引用，一个修改会影响到另一个。",-1),k=a("p",null,"而深拷贝是创建一个原始数据的独立副本，修改一个不会影响另一个。",-1),m=i(`<h4 id="浅拷贝" tabindex="-1"><a class="header-anchor" href="#浅拷贝" aria-hidden="true">#</a> 浅拷贝：</h4><ul><li><p><strong>定义：</strong> 浅拷贝是指对对象进行复制，仅复制对象的值，而不复制对象所指向的内容。</p></li><li><p><strong>判断：</strong> 当类中只包含简单数据类型的成员变量时，进行默认的复制构造函数或赋值操作符重载会产生浅拷贝。</p></li><li><p><strong>示例：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">ShallowCopyExample</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>

    <span class="token function">ShallowCopyExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> ShallowCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data <span class="token operator">=</span> other<span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token comment">// 浅拷贝，只复制指针值，不复制内容</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝：</h4><ul><li><p><strong>定义：</strong> 深拷贝是指对对象进行复制，不仅复制对象的值，还复制对象所指向的内容。</p></li><li><p><strong>判断：</strong> 当类中包含动态分配内存的成员变量时，需要手动编写复制构造函数和赋值操作符重载来实现深拷贝。</p></li><li><p><strong>示例：</strong></p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">DeepCopyExample</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span><span class="token operator">*</span> data<span class="token punctuation">;</span>

    <span class="token function">DeepCopyExample</span><span class="token punctuation">(</span><span class="token keyword">const</span> DeepCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 深拷贝，复制内容</span>
    <span class="token punctuation">}</span>

    DeepCopyExample<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> DeepCopyExample<span class="token operator">&amp;</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> data<span class="token punctuation">;</span>  <span class="token comment">// 释放原有的动态内存</span>
            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 深拷贝，复制内容</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><p>这两种拷贝方式各有优缺点，具体使用取决于程序的需求和设计。</p><p>浅拷贝通常更高效，但需要小心避免意外修改原始数据。 深拷贝则更安全，但可能涉及到更多的资源开销，特别是对于大型数据结构。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><table><thead><tr><th>行为</th><th>深拷贝（Deep Copy）</th><th>浅拷贝（Shallow Copy）</th></tr></thead><tbody><tr><td>复制基本数据类型</td><td>创建独立的副本</td><td>创建副本，共享相同的值</td></tr><tr><td>复制数组（静态或动态）</td><td>复制所有元素，创建独立副本</td><td>复制数组对象，共享元素</td></tr><tr><td>复制对象（自定义类）</td><td>递归复制所有成员，创建独立副本</td><td>复制对象，共享引用类型的成员</td></tr><tr><td>复制嵌套对象</td><td>深度复制所有嵌套对象</td><td>复制外层对象，共享内部对象</td></tr></tbody></table>`,9);function h(v,b){const s=o("chatmessage");return c(),l("div",null,[t(s,{avatar:"../../../assets/emoji/hh.png",avatarWidth:40},{default:e(()=>[n(" 深拷贝和浅拷贝是什么？ ")]),_:1}),r,u,t(s,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 浅拷贝中，传递的是引用，所以对引用的修改会反映在原始数据上。 ")]),_:1}),k,t(s,{avatar:"../../../assets/emoji/new1.png",avatarWidth:40,alignLeft:""},{default:e(()=>[n(" 深拷贝中，创建了一个新的数据副本，对其的修改不会影响原始数据。 ")]),_:1}),m])}const w=p(d,[["render",h],["__file","5-copymode.html.vue"]]);export{w as default};
