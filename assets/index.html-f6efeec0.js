import{_ as u,r as c,o as p,c as k,d as l,w as s,f as m,a as n,b as a,e as o}from"./app-a94ef497.js";const v="/RenderDoc/assets/Lua-Logo.svg-34ad3e42.png",b={},h=o('<figure><img src="'+v+'" alt="" width="200" height="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="须知" tabindex="-1"><a class="header-anchor" href="#须知" aria-hidden="true">#</a> 须知</h2><blockquote><p>本站只是简单介绍一下lua基础，具体入门还是看大佬教程吧，重点还是关注我自己的项目问题。</p></blockquote><h2 id="lua" tabindex="-1"><a class="header-anchor" href="#lua" aria-hidden="true">#</a> lua</h2><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，比如我们的主角<a href="%22https://www.unrealengine.com/zh-CN/download%22">unreal engine</a></p>',5),g=o(`<h2 id="脚本式编程" tabindex="-1"><a class="header-anchor" href="#脚本式编程" aria-hidden="true">#</a> 脚本式编程</h2><p>我们可以将 Lua 程序代码保存到一个以 lua 结尾的文件，并执行。 <br>如：<code>test.lua</code>，该模式称为脚本式编程。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World！&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),_=o(`<h2 id="lua注释" tabindex="-1"><a class="header-anchor" href="#lua注释" aria-hidden="true">#</a> lua注释</h2><ol><li>单行注释用：</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--单行注释</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>多行注释：</li></ol><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">--[[
多行注释
多行注释
--]]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua保留关键字" tabindex="-1"><a class="header-anchor" href="#lua保留关键字" aria-hidden="true">#</a> lua保留关键字</h2><table><thead><tr><th>关键词</th><th>描述</th><th></th><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td></td><td>break</td><td>退出循环</td></tr><tr><td>do</td><td>开始一个块</td><td></td><td>else</td><td>备用条件</td></tr><tr><td>elseif</td><td>备用条件</td><td></td><td>end</td><td>结束块</td></tr><tr><td>false</td><td>布尔假值</td><td></td><td>for</td><td>循环遍历范围</td></tr><tr><td>function</td><td>定义函数</td><td></td><td>if</td><td>条件语句</td></tr><tr><td>in</td><td>在范围内</td><td></td><td>local</td><td>定义本地变量</td></tr><tr><td>nil</td><td>表示不存在</td><td></td><td>not</td><td>逻辑非</td></tr><tr><td>or</td><td>逻辑或</td><td></td><td>repeat</td><td>循环直到</td></tr><tr><td>return</td><td>从函数返回</td><td></td><td>then</td><td>条件为真时的块</td></tr><tr><td>true</td><td>布尔真值</td><td></td><td>until</td><td>循环结束条件</td></tr><tr><td>while</td><td>While 循环</td><td></td><td>goto</td><td>跳转到标签</td></tr></tbody></table>`,7),f=o('<h2 id="lua变量" tabindex="-1"><a class="header-anchor" href="#lua变量" aria-hidden="true">#</a> lua变量</h2><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>全局变量</td><td>默认情况下总是全局变量</td><td>可以在任何地方被访问和修改。想删除一个全局变量，只需要将变量赋值为nil。</td></tr><tr><td>局部变量</td><td>local b = 5</td><td>仅在声明它的作用域内可见和访问。</td></tr></tbody></table>',2),y=o(`<h2 id="lua常量" tabindex="-1"><a class="header-anchor" href="#lua常量" aria-hidden="true">#</a> lua常量</h2><p>在Lua中，没有明确的语法用于定义常量，如在其他编程语言中使用 const 或 final 关键字。<br> 然而，通常通过约定俗成的方式来模拟常量的概念。<br> 在Lua中，使用全大写字母表示的变量名通常被视为常量，表示这些变量的值不应该被修改。</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 定义常量</span>
MAX_VALUE <span class="token operator">=</span> <span class="token number">100</span>
PI <span class="token operator">=</span> <span class="token number">3.14</span>

<span class="token comment">-- 使用常量</span>
<span class="token keyword">local</span> radius <span class="token operator">=</span> <span class="token number">5</span>
<span class="token keyword">local</span> area <span class="token operator">=</span> PI <span class="token operator">*</span> radius <span class="token operator">*</span> radius

<span class="token comment">-- 尝试修改常量（虽然不会报错，但是不是推荐的做法）</span>
MAX_VALUE <span class="token operator">=</span> <span class="token number">200</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua数据类型" tabindex="-1"><a class="header-anchor" href="#lua数据类型" aria-hidden="true">#</a> lua数据类型</h2><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数。</td></tr><tr><td>string</td><td>由一对双引号或单引号来表示。</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数。</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构。</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序。</td></tr><tr><td>table</td><td>在 Lua 里，table 的创建是通过&quot;构造表达式&quot;来完成，<br>最简单构造表达式是{}，用来创建一个空表。也写成表格。</td></tr></tbody></table><h2 id="lua循环语句" tabindex="-1"><a class="header-anchor" href="#lua循环语句" aria-hidden="true">#</a> lua循环语句</h2><h3 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> for</h3>`,7),w=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"--Lua 编程语言中数值 for 循环语法格式:"),a(`
`),n("span",{class:"token comment"},"--其中exp3对标 步长默认是1，默认可以不写"),a(`
`),n("span",{class:"token keyword"},"for"),a(" var"),n("span",{class:"token operator"},"="),a("exp1"),n("span",{class:"token punctuation"},","),a("exp2"),n("span",{class:"token punctuation"},","),a("exp3 "),n("span",{class:"token keyword"},"do"),a(`  
    `),n("span",{class:"token operator"},"<"),a("执行体"),n("span",{class:"token operator"},">"),a(`  
`),n("span",{class:"token keyword"},"end"),a(`  
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),a(" a "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token punctuation"},";"),a("a"),n("span",{class:"token operator"},"<"),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),a("a"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),a(`
`),n("span",{class:"token comment"},"//对应到lua这里的int a = 0 就是exp1,a<10就是exp2 ,a++就是exp3"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("h3",{id:"while",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#while","aria-hidden":"true"},"#"),a(" while")],-1),A=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[a("i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token keyword"},"while"),a(),n("span",{class:"token punctuation"},"("),a("i "),n("span",{class:"token operator"},"<"),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token keyword"},"do"),a(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),a("i"),n("span",{class:"token punctuation"},")"),a(`
    i `),n("span",{class:"token operator"},"="),a(" i "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token keyword"},"end"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"while"),a(),n("span",{class:"token punctuation"},"("),a("i "),n("span",{class:"token operator"},"<"),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),a("cout"),n("span",{class:"token operator"},"<<"),a("i"),n("span",{class:"token operator"},"<<"),a("std"),n("span",{class:"token double-colon punctuation"},"::"),a("endl"),n("span",{class:"token punctuation"},";"),a(`
    i `),n("span",{class:"token operator"},"="),a(" i "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("h3",{id:"repeat-until",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#repeat-until","aria-hidden":"true"},"#"),a(" repeat...until")],-1),W=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[a("i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token keyword"},"repeat"),a(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),a("i"),n("span",{class:"token punctuation"},")"),a(`
    i `),n("span",{class:"token operator"},"="),a(" i "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token keyword"},"until"),a(),n("span",{class:"token punctuation"},"("),a("i "),n("span",{class:"token operator"},">"),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[a("i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token keyword"},"do"),n("span",{class:"token punctuation"},"{"),a(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),a("cout"),n("span",{class:"token operator"},"<<"),a("i"),n("span",{class:"token operator"},"<<"),a("std"),n("span",{class:"token double-colon punctuation"},"::"),a("endl"),n("span",{class:"token punctuation"},";"),a(`
     i `),n("span",{class:"token operator"},"="),a(" i "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"while"),a(),n("span",{class:"token punctuation"},"("),a("i "),n("span",{class:"token operator"},">"),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("br",null,null,-1),V=n("h2",{id:"lua条件语句",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lua条件语句","aria-hidden":"true"},"#"),a(" lua条件语句")],-1),B=n("h3",{id:"if",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#if","aria-hidden":"true"},"#"),a(" if")],-1),N=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[n("span",{class:"token comment"},"--[ 0 为 true ]"),a(`
`),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"then"),a(`
    `),n("span",{class:"token keyword"},"do"),a(`
    `),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0 为 true"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"end"),a(`
    `),n("span",{class:"token comment"},"--这里的do end可以省略。"),a(`
`),n("span",{class:"token keyword"},"end"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("div",{class:"language-cpp line-numbers-mode","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    std`),n("span",{class:"token double-colon punctuation"},"::"),a("cout"),n("span",{class:"token operator"},"<<"),n("span",{class:"token string"},'"0 为 true"'),n("span",{class:"token operator"},"<<"),a("std"),n("span",{class:"token double-colon punctuation"},"::"),a("endl"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),I=n("h2",{id:"lua函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lua函数","aria-hidden":"true"},"#"),a(" lua函数")],-1),z=n("div",{class:"language-lua line-numbers-mode","data-ext":"lua"},[n("pre",{class:"language-lua"},[n("code",null,[a("optional_function_scope "),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"function_name"),n("span",{class:"token punctuation"},"("),a(" argument1"),n("span",{class:"token punctuation"},","),a(" argument2"),n("span",{class:"token punctuation"},"..."),n("span",{class:"token punctuation"},","),a(" argumentn"),n("span",{class:"token punctuation"},")"),a(`
    function_body
    `),n("span",{class:"token keyword"},"return"),a(` result_params_comma_separated
`),n("span",{class:"token keyword"},"end"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),H=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"function_name"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[a("argument1"),n("span",{class:"token punctuation"},","),a(" argument2"),n("span",{class:"token operator"},"..."),n("span",{class:"token punctuation"},","),a(" argumentn")]),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"{"),a(`
    function_body
    `),n("span",{class:"token keyword"},"return"),a(` result_params_comma_separated
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=o(`<ul><li>optional_function_scope: 该参数是可选的指定函数是全局函数还是局部函数，未设置该参数默认为全局函数，如果你需要设置函数为局部函数需要使用关键字 local。</li><li>function_name: 指定函数名称。</li><li>argument1, argument2, argument3..., argumentn: 函数参数，多个参数以逗号隔开，函数也可以不带参数。</li><li>function_body: 函数体，函数中需要执行的代码语句块。</li><li>result_params_comma_separated: 函数返回值，Lua语言函数可以返回多个值，每个值以 <span style="color:red;"> 逗号隔开。 </span></li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 定义一个返回多个值的函数</span>
<span class="token keyword">function</span> <span class="token function">getMultipleValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token keyword">true</span>
<span class="token keyword">end</span>

<span class="token comment">-- 调用函数并接收返回值</span>
<span class="token keyword">local</span> num<span class="token punctuation">,</span> greeting<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token function">getMultipleValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">-- 打印返回值</span>
<span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>       <span class="token comment">-- 输出 10</span>
<span class="token function">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>  <span class="token comment">-- 输出 hello</span>
<span class="token function">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>      <span class="token comment">-- 输出 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S=n("br",null,null,-1),Q=n("span",{style:{color:"red"}}," auto ",-1),U=o(`<h3 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数" aria-hidden="true">#</a> 可变参数</h3><blockquote><p>Lua 函数可以接受可变数目的参数，和 C 语言类似<br>在函数参数列表中使用三点 ... 表示例如：</p></blockquote><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">...</span><span class="token punctuation">)</span>  
<span class="token keyword">local</span> s <span class="token operator">=</span> <span class="token number">0</span>  
  <span class="token keyword">for</span> i<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span> <span class="token keyword">do</span>   <span class="token comment">--&gt; {...} 表示一个由所有变长参数构成的数组  </span>
    s <span class="token operator">=</span> s <span class="token operator">+</span> v  
  <span class="token keyword">end</span>  
  <span class="token keyword">return</span> s  
<span class="token keyword">end</span>  
<span class="token function">print</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">---&gt;25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua运算符" tabindex="-1"><a class="header-anchor" href="#lua运算符" aria-hidden="true">#</a> lua运算符</h2><table><thead><tr><th>类别</th><th>Lua</th><th>C++</th></tr></thead><tbody><tr><td>字符串连接</td><td>..</td><td>+ 或 append()</td></tr><tr><td>逻辑与</td><td>and</td><td>&amp;&amp;</td></tr><tr><td>逻辑或</td><td>or</td><td>|</td></tr><tr><td>逻辑非</td><td>not</td><td>!</td></tr><tr><td>自增</td><td>无</td><td>++</td></tr><tr><td>自减</td><td>无</td><td>--</td></tr><tr><td>三元条件</td><td>condition and a or b</td><td>condition ? a : b</td></tr><tr><td>条件表达式</td><td>condition and a or b</td><td>condition ? a : b</td></tr><tr><td>按位与</td><td>无</td><td>&amp;</td></tr><tr><td>按位或</td><td>无</td><td>|</td></tr><tr><td>按位取反</td><td>无</td><td>~</td></tr><tr><td>左移</td><td>无</td><td>&lt;&lt;</td></tr><tr><td>右移</td><td>无</td><td>&gt;&gt;</td></tr><tr><td>取余</td><td>%</td><td>%</td></tr></tbody></table>`,5),D=o(`<blockquote><p>特殊的LUA中有个一元运算符#，表示取字符串长度.</p></blockquote><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, Lua!&quot;</span>
<span class="token keyword">local</span> len <span class="token operator">=</span> <span class="token operator">#</span>str
<span class="token function">print</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token comment">-- 输出：12</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua字符串" tabindex="-1"><a class="header-anchor" href="#lua字符串" aria-hidden="true">#</a> lua字符串</h2><h3 id="_1-单引号" tabindex="-1"><a class="header-anchor" href="#_1-单引号" aria-hidden="true">#</a> 1. 单引号</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> str1 <span class="token operator">=</span> <span class="token string">&#39;This is a string.&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-双引号" tabindex="-1"><a class="header-anchor" href="#_2-双引号" aria-hidden="true">#</a> 2. 双引号</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, &quot;</span>
str <span class="token operator">=</span> str <span class="token operator">..</span> <span class="token string">&quot;World!&quot;</span>  <span class="token comment">-- 创建一个新的字符串并将其赋值给str</span>
<span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token comment">-- 输出 &quot;Hello, World!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单双引号它们的功能是相似的，可以根据个人偏好来选择使用哪种引号。<br> 主要区别在于在字符串内部的引号是否需要转义。</p></blockquote><hr>`,9),O=o(`<ol><li><p><strong>转义字符：</strong></p><ul><li>在双引号字符串中，可以直接使用单引号，而不需要转义。反之亦然。</li><li>例如，在双引号字符串中，可以写 <code>&quot;It&#39;s a string&quot;</code> 而不需要转义单引号。</li></ul></li><li><p><strong>字符串内嵌：</strong></p><ul><li>可以在单引号字符串中直接使用双引号，反之亦然。</li><li>例如，在单引号字符串中，可以写 <code>&#39;This is a &quot;string&quot; inside&#39;</code>。</li></ul></li></ol><p>示例：</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> singleQuoted <span class="token operator">=</span> <span class="token string">&#39;This is a single-quoted string&#39;</span>
<span class="token keyword">local</span> doubleQuoted <span class="token operator">=</span> <span class="token string">&quot;This is a double-quoted string&quot;</span>
<span class="token keyword">local</span> mixedQuotes <span class="token operator">=</span> <span class="token string">&#39;You can use &quot;double quotes&quot; inside single quotes&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3-与-间的一串字符。" tabindex="-1"><a class="header-anchor" href="#_3-与-间的一串字符。" aria-hidden="true">#</a> 3. [[ 与 ]] 间的一串字符。</h3><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token keyword">local</span> multilineString <span class="token operator">=</span> <span class="token string">[[
This is a multiline string1.
This is a multiline string2.
This is a multiline string3.
]]</span>

<span class="token function">print</span><span class="token punctuation">(</span>multilineString<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lua数组" tabindex="-1"><a class="header-anchor" href="#lua数组" aria-hidden="true">#</a> lua数组</h2><ul><li>在 Lua 中，数组不是一种特定的数据类型，而是一种用来存储一组值的数据结构。</li><li>实际上，Lua 中并没有专门的数组类型，而是使用一种被称为 &quot;table&quot; 的数据结构来实现数组的功能。</li><li>要计算数组的长度（即数组中元素的个数），可以使用 # 操作符</li></ul><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 创建一个数组</span>
<span class="token keyword">local</span> myArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span>

<span class="token comment">-- 访问数组元素</span>
<span class="token function">print</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">-- 输出 10</span>
<span class="token function">print</span><span class="token punctuation">(</span>myArray<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">-- 输出 30</span>

<span class="token comment">-- 计算数组长度</span>
<span class="token keyword">local</span> length <span class="token operator">=</span> <span class="token operator">#</span>myArray
<span class="token function">print</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token comment">-- 输出 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="todo" tabindex="-1"><a class="header-anchor" href="#todo" aria-hidden="true">#</a> TODO</h2><p>未完待续。。。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,12),P={href:"https://zh.wikipedia.org/wiki/Lua",target:"_blank",rel:"noopener noreferrer"},X=n("li",null,[n("a",{href:"%22https://www.runoob.com/lua/lua-functions.html%22"},"菜鸟教程")],-1);function J(R,Y){const i=c("chatmessage"),d=c("CodeTabs"),r=c("ExternalLinkIcon");return p(),k("div",null,[h,l(i,{avatar:"../../assets/emoji/hh.png",avatarWidth:40},{default:s(()=>[a(" 跟BABA一起念 Lua/'lua/（噜啊） ")]),_:1}),m(" more "),g,l(i,{avatar:"../../assets/emoji/blzt.png",avatarWidth:40},{default:s(()=>[a(" 这里的print是内建函数，有点类似cpp中的std标注库中的函数。 ")]),_:1}),_,l(i,{avatar:"../../assets/emoji/hx.png",avatarWidth:40},{default:s(()=>[a(" 记不住，根本记不住。 ")]),_:1}),f,l(i,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" BABA多一句，这里不是null是nil ")]),_:1}),y,l(d,{id:"397",data:[{id:"lua"},{id:"cpp"}],active:0,"tab-id":"shell"},{title0:s(({value:t,isActive:e})=>[a("lua")]),title1:s(({value:t,isActive:e})=>[a("cpp")]),tab0:s(({value:t,isActive:e})=>[w]),tab1:s(({value:t,isActive:e})=>[x]),_:1}),q,l(d,{id:"408",data:[{id:"lua"},{id:"cpp"}],active:0,"tab-id":"shell"},{title0:s(({value:t,isActive:e})=>[a("lua")]),title1:s(({value:t,isActive:e})=>[a("cpp")]),tab0:s(({value:t,isActive:e})=>[A]),tab1:s(({value:t,isActive:e})=>[L]),_:1}),l(i,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:s(()=>[a(" 可以理解成{}代码块用do end来表示。 ")]),_:1}),j,l(d,{id:"420",data:[{id:"lua"},{id:"cpp"}],active:0,"tab-id":"shell"},{title0:s(({value:t,isActive:e})=>[a("lua")]),title1:s(({value:t,isActive:e})=>[a("cpp")]),tab0:s(({value:t,isActive:e})=>[W]),tab1:s(({value:t,isActive:e})=>[C]),_:1}),l(i,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" for 和 while 循环的条件语句在当前循环执行开始时判断"),T,a("而 repeat...until 循环的条件语句在当前循环结束后判断。 ")]),_:1}),V,B,l(d,{id:"435",data:[{id:"lua"},{id:"cpp"}],active:0,"tab-id":"shell"},{title0:s(({value:t,isActive:e})=>[a("lua")]),title1:s(({value:t,isActive:e})=>[a("cpp")]),tab0:s(({value:t,isActive:e})=>[N]),tab1:s(({value:t,isActive:e})=>[E]),_:1}),l(i,{avatar:"../../assets/emoji/ybk.png",avatarWidth:40},{default:s(()=>[a(" 可以理解成{}代码块用then end来表示。 ")]),_:1}),I,l(d,{id:"447",data:[{id:"lua"},{id:"js"}],active:0,"tab-id":"shell"},{title0:s(({value:t,isActive:e})=>[a("lua")]),title1:s(({value:t,isActive:e})=>[a("js")]),tab0:s(({value:t,isActive:e})=>[z]),tab1:s(({value:t,isActive:e})=>[H]),_:1}),M,l(i,{avatar:"../../assets/emoji/dsyj.png",avatarWidth:40},{default:s(()=>[a(" 1.这里的函数定义特性更像JS中的function name (){} ,因为变量类型是自动的。"),S,a(" 2.不同于C++的auto,"),Q,a("是一种推导机制，一旦赋值特定类型，就不能再改变。 ")]),_:1}),U,l(i,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:s(()=>[a(" 记不住，根本记不住。咱们只需记一个特殊的就行了。 ")]),_:1}),D,l(i,{avatar:"../../assets/emoji/kclr.png",avatarWidth:40},{default:s(()=>[a(" 你在说啥？单引号和双引号区别: ")]),_:1}),O,n("ul",null,[n("li",null,[n("a",P,[a("wiki"),l(r)])]),X])])}const G=u(b,[["render",J],["__file","index.html.vue"]]);export{G as default};
