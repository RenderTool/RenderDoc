const n=JSON.parse('{"key":"v-722f5743","path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/Keywords%20inline.html","title":"c++inline[内联函数]","lang":"zh-CN","frontmatter":{"title":"c++inline[内联函数]","category":["c++"],"tag":["inline"],"description":"概念 使用 inline 关键字，编译器会尝试在调用处直接展开函数的代码，而不是生成函数调用的指令。 这可以减少函数调用的开销，特别适用于简单的、频繁调用的小函数。 实践 #include &lt;iostream&gt; // 定义内联函数 inline int add(int a, int b) { return a + b; } int main() { int x = 5; int y = 10; // 调用内联函数 int result = add(x, y); std::cout &lt;&lt; \\"Result: \\" &lt;&lt; result &lt;&lt; std::endl; return 0; }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/Keywords%20inline.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++inline[内联函数]"}],["meta",{"property":"og:description","content":"概念 使用 inline 关键字，编译器会尝试在调用处直接展开函数的代码，而不是生成函数调用的指令。 这可以减少函数调用的开销，特别适用于简单的、频繁调用的小函数。 实践 #include &lt;iostream&gt; // 定义内联函数 inline int add(int a, int b) { return a + b; } int main() { int x = 5; int y = 10; // 调用内联函数 int result = add(x, y); std::cout &lt;&lt; \\"Result: \\" &lt;&lt; result &lt;&lt; std::endl; return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-13T17:06:48.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:tag","content":"inline"}],["meta",{"property":"article:modified_time","content":"2023-11-13T17:06:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++inline[内联函数]\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-11-13T17:06:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"实践","slug":"实践","link":"#实践","children":[]}],"git":{"createdTime":1699887822000,"updatedTime":1699895208000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":2}]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"language/cpp/keywords[关键字]/Keywords inline.md","localizedDate":"2023年11月13日","excerpt":"\\n<h2> 概念</h2>\\n<blockquote>\\n<p>使用 inline 关键字，编译器会尝试在调用处直接展开函数的代码，而不是生成函数调用的指令。<br>\\n这可以减少函数调用的开销，特别适用于简单的、频繁调用的小函数。</p>\\n</blockquote>\\n<h2> 实践</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;iostream&gt;</span></span>\\n\\n<span class=\\"token comment\\">// 定义内联函数</span>\\n<span class=\\"token keyword\\">inline</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">int</span> x <span class=\\"token operator\\">=</span> <span class=\\"token number\\">5</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> y <span class=\\"token operator\\">=</span> <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 调用内联函数</span>\\n    <span class=\\"token keyword\\">int</span> result <span class=\\"token operator\\">=</span> <span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">,</span> y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Result: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> result <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
