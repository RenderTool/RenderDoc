const n=JSON.parse('{"key":"v-c13b7a06","path":"/unreal/gameplay_%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6_/9-DelegateUse.html","title":"GP9.Delegate|委托实践","lang":"zh-CN","frontmatter":{"title":"GP9.Delegate|委托实践","order":9,"category":["u++"],"description":"委托实践|Delegate 声明委托： DECLARE_DELEGATE(FMyDelegate); 或者使用 DECLARE_MULTICAST_DELEGATE 来声明多播委托： DECLARE_MULTICAST_DELEGATE(FMyMulticastDelegate); 还可以声明带有参数的委托： DECLARE_DELEGATE_OneParam(FMyDelegateWithParam, int32); 定义委托实例： 在类中定义委托的实例： UCLASS() class MYPROJECT_API AMyActor : public AActor { GENERATED_BODY() public: FMyDelegate MyDelegate; FMyMulticastDelegate MyMulticastDelegate; FMyDelegateWithParam MyDelegateWithParam; }; 绑定和解绑委托： 在构造函数或其他地方绑定和解绑委托： AMyActor::AMyActor() { // 绑定委托 MyDelegate.BindUObject(this, &amp;AMyActor::MyFunction); // 绑定多播委托 MyMulticastDelegate.AddUObject(this, &amp;AMyActor::MyMulticastFunction); // 绑定带参数的委托 MyDelegateWithParam.BindUObject(this, &amp;AMyActor::MyFunctionWithParam); // 解绑委托 MyDelegate.Unbind(); // 解绑多播委托 MyMulticastDelegate.RemoveAll(this); } 委托的回调函数： 定义委托回调的成员函数： UFUNCTION() void MyFunction() { // 委托被触发时执行的代码 } UFUNCTION() void MyMulticastFunction() { // 多播委托被触发时执行的代码 } UFUNCTION() void MyFunctionWithParam(int32 Param) { // 带参数的委托被触发时执行的代码 } 触发委托： 在适当的地方触发委托： void SomeFunction() { // 触发委托 MyDelegate.ExecuteIfBound(); // 触发多播委托 MyMulticastDelegate.Broadcast(); // 触发带参数的委托 MyDelegateWithParam.ExecuteIfBound(42); }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/unreal/gameplay_%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6_/9-DelegateUse.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"GP9.Delegate|委托实践"}],["meta",{"property":"og:description","content":"委托实践|Delegate 声明委托： DECLARE_DELEGATE(FMyDelegate); 或者使用 DECLARE_MULTICAST_DELEGATE 来声明多播委托： DECLARE_MULTICAST_DELEGATE(FMyMulticastDelegate); 还可以声明带有参数的委托： DECLARE_DELEGATE_OneParam(FMyDelegateWithParam, int32); 定义委托实例： 在类中定义委托的实例： UCLASS() class MYPROJECT_API AMyActor : public AActor { GENERATED_BODY() public: FMyDelegate MyDelegate; FMyMulticastDelegate MyMulticastDelegate; FMyDelegateWithParam MyDelegateWithParam; }; 绑定和解绑委托： 在构造函数或其他地方绑定和解绑委托： AMyActor::AMyActor() { // 绑定委托 MyDelegate.BindUObject(this, &amp;AMyActor::MyFunction); // 绑定多播委托 MyMulticastDelegate.AddUObject(this, &amp;AMyActor::MyMulticastFunction); // 绑定带参数的委托 MyDelegateWithParam.BindUObject(this, &amp;AMyActor::MyFunctionWithParam); // 解绑委托 MyDelegate.Unbind(); // 解绑多播委托 MyMulticastDelegate.RemoveAll(this); } 委托的回调函数： 定义委托回调的成员函数： UFUNCTION() void MyFunction() { // 委托被触发时执行的代码 } UFUNCTION() void MyMulticastFunction() { // 多播委托被触发时执行的代码 } UFUNCTION() void MyFunctionWithParam(int32 Param) { // 带参数的委托被触发时执行的代码 } 触发委托： 在适当的地方触发委托： void SomeFunction() { // 触发委托 MyDelegate.ExecuteIfBound(); // 触发多播委托 MyMulticastDelegate.Broadcast(); // 触发带参数的委托 MyDelegateWithParam.ExecuteIfBound(42); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-20T15:33:23.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-12-20T15:33:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GP9.Delegate|委托实践\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-20T15:33:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[{"level":2,"title":"委托实践|Delegate","slug":"委托实践-delegate","link":"#委托实践-delegate","children":[]}],"git":{"createdTime":1703086403000,"updatedTime":1703086403000,"contributors":[{"name":"sigaohe","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":0.93,"words":278},"filePathRelative":"unreal/gameplay[游戏框架]/9-DelegateUse.md","localizedDate":"2023年12月20日","excerpt":"<h2> 委托实践|Delegate</h2>\\n<ol>\\n<li>\\n<p><strong>声明委托：</strong></p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">DECLARE_DELEGATE</span><span class=\\"token punctuation\\">(</span>FMyDelegate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>或者使用 <code>DECLARE_MULTICAST_DELEGATE</code> 来声明多播委托：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">DECLARE_MULTICAST_DELEGATE</span><span class=\\"token punctuation\\">(</span>FMyMulticastDelegate<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div><p>还可以声明带有参数的委托：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">DECLARE_DELEGATE_OneParam</span><span class=\\"token punctuation\\">(</span>FMyDelegateWithParam<span class=\\"token punctuation\\">,</span> int32<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>定义委托实例：</strong></p>\\n<p>在类中定义委托的实例：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UCLASS</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MYPROJECT_API</span> AMyActor <span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">public</span> AActor\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token function\\">GENERATED_BODY</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    FMyDelegate MyDelegate<span class=\\"token punctuation\\">;</span>\\n    FMyMulticastDelegate MyMulticastDelegate<span class=\\"token punctuation\\">;</span>\\n    FMyDelegateWithParam MyDelegateWithParam<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>绑定和解绑委托：</strong></p>\\n<p>在构造函数或其他地方绑定和解绑委托：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token class-name\\">AMyActor</span><span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">AMyActor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 绑定委托</span>\\n    MyDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">BindUObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>AMyActor<span class=\\"token double-colon punctuation\\">::</span>MyFunction<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token comment\\">// 绑定多播委托</span>\\n    MyMulticastDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">AddUObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>AMyActor<span class=\\"token double-colon punctuation\\">::</span>MyMulticastFunction<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 绑定带参数的委托</span>\\n    MyDelegateWithParam<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">BindUObject</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">&amp;</span>AMyActor<span class=\\"token double-colon punctuation\\">::</span>MyFunctionWithParam<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 解绑委托</span>\\n    MyDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Unbind</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 解绑多播委托</span>\\n    MyMulticastDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">RemoveAll</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>委托的回调函数：</strong></p>\\n<p>定义委托回调的成员函数：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 委托被触发时执行的代码</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyMulticastFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 多播委托被触发时执行的代码</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token function\\">UFUNCTION</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">MyFunctionWithParam</span><span class=\\"token punctuation\\">(</span>int32 Param<span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 带参数的委托被触发时执行的代码</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>触发委托：</strong></p>\\n<p>在适当的地方触发委托：</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">void</span> <span class=\\"token function\\">SomeFunction</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// 触发委托</span>\\n    MyDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ExecuteIfBound</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 触发多播委托</span>\\n    MyMulticastDelegate<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Broadcast</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">// 触发带参数的委托</span>\\n    MyDelegateWithParam<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ExecuteIfBound</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">42</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
