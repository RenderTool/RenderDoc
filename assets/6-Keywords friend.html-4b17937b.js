const n=JSON.parse('{"key":"v-7244b256","path":"/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html","title":"c++6.friend","lang":"zh-CN","frontmatter":{"title":"c++6.friend","order":6,"category":["c++"],"description":"访问私有成员： 如果有一些与类密切相关的非成员函数需要访问类的私有成员， 但这些函数不适合成为类的成员函数，可以将它们声明为友元函数，以便访问类的私有部分。 class MyClass { private: int privateData; public: MyClass() : privateData(0) {} // 友元函数的声明 friend void displayPrivateData(const MyClass&amp; obj); }; // 友元函数的定义 void displayPrivateData(const MyClass&amp; obj) { std::cout &lt;&lt; \\"Private Data: \\" &lt;&lt; obj.privateData &lt;&lt; std::endl; } 提高效率： 有时，为了提高效率，需要使用非成员函数来执行某些操作，而这些操作需要访问类的私有成员。通过将这些函数声明为友元，可以避免将所有操作都包装成成员函数。 重载运算符： 重载某些运算符时，可能需要直接访问类的私有成员。友元函数允许非成员函数重载类的运算符并访问类的私有部分。 class Complex { private: double real; double imag; public: Complex(double r, double i) : real(r), imag(i) {} // 友元函数的声明 friend Complex operator+(const Complex&amp; a, const Complex&amp; b); }; // 友元函数的定义 Complex operator+(const Complex&amp; a, const Complex&amp; b) { return Complex(a.real + b.real, a.imag + b.imag); }","head":[["meta",{"property":"og:url","content":"https://rendertool.github.io/RenderDoc/RenderDoc/language/cpp/keywords_%E5%85%B3%E9%94%AE%E5%AD%97_/6-Keywords%20friend.html"}],["meta",{"property":"og:site_name","content":"RenderDoc"}],["meta",{"property":"og:title","content":"c++6.friend"}],["meta",{"property":"og:description","content":"访问私有成员： 如果有一些与类密切相关的非成员函数需要访问类的私有成员， 但这些函数不适合成为类的成员函数，可以将它们声明为友元函数，以便访问类的私有部分。 class MyClass { private: int privateData; public: MyClass() : privateData(0) {} // 友元函数的声明 friend void displayPrivateData(const MyClass&amp; obj); }; // 友元函数的定义 void displayPrivateData(const MyClass&amp; obj) { std::cout &lt;&lt; \\"Private Data: \\" &lt;&lt; obj.privateData &lt;&lt; std::endl; } 提高效率： 有时，为了提高效率，需要使用非成员函数来执行某些操作，而这些操作需要访问类的私有成员。通过将这些函数声明为友元，可以避免将所有操作都包装成成员函数。 重载运算符： 重载某些运算符时，可能需要直接访问类的私有成员。友元函数允许非成员函数重载类的运算符并访问类的私有部分。 class Complex { private: double real; double imag; public: Complex(double r, double i) : real(r), imag(i) {} // 友元函数的声明 friend Complex operator+(const Complex&amp; a, const Complex&amp; b); }; // 友元函数的定义 Complex operator+(const Complex&amp; a, const Complex&amp; b) { return Complex(a.real + b.real, a.imag + b.imag); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-20T12:08:07.000Z"}],["meta",{"property":"article:author","content":"Mr.Si"}],["meta",{"property":"article:modified_time","content":"2023-12-20T12:08:07.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"c++6.friend\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-20T12:08:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Si\\",\\"url\\":\\"https://rendertool.github.io/RenderDoc/\\"}]}"]]},"headers":[],"git":{"createdTime":1703074087000,"updatedTime":1703074087000,"contributors":[{"name":"admin","email":"750831855@qq.com","commits":1}]},"readingTime":{"minutes":2.06,"words":619},"filePathRelative":"language/cpp/keywords[关键字]/6-Keywords friend.md","localizedDate":"2023年12月20日","excerpt":"\\n\\n\\n\\n\\n\\n<ol>\\n<li>\\n<p><strong>访问私有成员：</strong> 如果有一些与类密切相关的非成员函数需要访问类的私有成员，\\n但这些函数不适合成为类的成员函数，可以将它们声明为友元函数，以便访问类的私有部分。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyClass</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">int</span> privateData<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">MyClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">privateData</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 友元函数的声明</span>\\n    <span class=\\"token keyword\\">friend</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">displayPrivateData</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> MyClass<span class=\\"token operator\\">&amp;</span> obj<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 友元函数的定义</span>\\n<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">displayPrivateData</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> MyClass<span class=\\"token operator\\">&amp;</span> obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    std<span class=\\"token double-colon punctuation\\">::</span>cout <span class=\\"token operator\\">&lt;&lt;</span> <span class=\\"token string\\">\\"Private Data: \\"</span> <span class=\\"token operator\\">&lt;&lt;</span> obj<span class=\\"token punctuation\\">.</span>privateData <span class=\\"token operator\\">&lt;&lt;</span> std<span class=\\"token double-colon punctuation\\">::</span>endl<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong>提高效率：</strong> 有时，为了提高效率，需要使用非成员函数来执行某些操作，而这些操作需要访问类的私有成员。通过将这些函数声明为友元，可以避免将所有操作都包装成成员函数。</p>\\n</li>\\n<li>\\n<p><strong>重载运算符：</strong> 重载某些运算符时，可能需要直接访问类的私有成员。友元函数允许非成员函数重载类的运算符并访问类的私有部分。</p>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Complex</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">private</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token keyword\\">double</span> real<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">double</span> imag<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span><span class=\\"token operator\\">:</span>\\n    <span class=\\"token function\\">Complex</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">double</span> r<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">double</span> i<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">real</span><span class=\\"token punctuation\\">(</span>r<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">imag</span><span class=\\"token punctuation\\">(</span>i<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">// 友元函数的声明</span>\\n    <span class=\\"token keyword\\">friend</span> Complex <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Complex<span class=\\"token operator\\">&amp;</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Complex<span class=\\"token operator\\">&amp;</span> b<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">// 友元函数的定义</span>\\nComplex <span class=\\"token keyword\\">operator</span><span class=\\"token operator\\">+</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> Complex<span class=\\"token operator\\">&amp;</span> a<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">const</span> Complex<span class=\\"token operator\\">&amp;</span> b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">Complex</span><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">.</span>real <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">.</span>real<span class=\\"token punctuation\\">,</span> a<span class=\\"token punctuation\\">.</span>imag <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">.</span>imag<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
